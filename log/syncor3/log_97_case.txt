code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0231
Next Token :  even, Posbility: 0.0913
Next Token :  count, Posbility: 0.1709
Next Token :  rec, Posbility: 0.2480
Next Token :  , Posbility: 0.3184
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0135
Next Token : odd, Posbility: 0.0223
Next Token : f, Posbility: 0.0287
Next Token : pairs, Posbility: 0.2119
Next Token : x, Posbility: 0.5078
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0079
Next Token : _, Posbility: 0.0090
Next Token :  =, Posbility: 0.0148
Next Token : n, Posbility: 0.0190
Next Token : or, Posbility: 0.9180
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0090
Next Token : list, Posbility: 0.0115
Next Token :  =, Posbility: 0.0752
Next Token :  , Posbility: 0.0962
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0591
Next Token : list, Posbility: 0.0669
Next Token : even, Posbility: 0.0859
Next Token : pairs, Posbility: 0.2344
Next Token : count, Posbility: 0.2656
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0253
Next Token :  l, Posbility: 0.0535
Next Token : _, Posbility: 0.1455
Next Token :  =, Posbility: 0.2402
Next Token :  , Posbility: 0.3965
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0325
Next Token : ls, Posbility: 0.0325
Next Token : (, Posbility: 0.0535
Next Token : lst, Posbility: 0.0776
Next Token : x, Posbility: 0.6523
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0040
Next Token :  l, Posbility: 0.0045
Next Token :  , Posbility: 0.0378
Next Token :  =, Posbility: 0.0623
Next Token : s, Posbility: 0.8594
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0009
Next Token :  i, Posbility: 0.0011
Next Token :  a, Posbility: 0.0013
Next Token :  , Posbility: 0.0256
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0018
Next Token :  ..., Posbility: 0.0027
Next Token :  match, Posbility: 0.0105
Next Token :  , Posbility: 0.1279
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0047
Next Token : let, Posbility: 0.0047
Next Token :    , Posbility: 0.0069
Next Token :     , Posbility: 0.0742
Next Token :   , Posbility: 0.9023
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0117
Next Token : x, Posbility: 0.0170
Next Token : match, Posbility: 0.0762
Next Token : List, Posbility: 0.1108
Next Token : let, Posbility: 0.7227
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0422
Next Token :  even, Posbility: 0.0479
Next Token :  count, Posbility: 0.0615
Next Token :  rec, Posbility: 0.2432
Next Token :  , Posbility: 0.3535
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0337
Next Token : y, Posbility: 0.0381
Next Token : n, Posbility: 0.0432
Next Token : pairs, Posbility: 0.1514
Next Token : x, Posbility: 0.3613
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0233
Next Token : _, Posbility: 0.0339
Next Token :  =, Posbility: 0.1187
Next Token : or, Posbility: 0.3223
Next Token : s, Posbility: 0.4141
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0266
Next Token : 2, Posbility: 0.0562
Next Token : ', Posbility: 0.0928
Next Token : _, Posbility: 0.2852
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0023
Next Token :  sort, Posbility: 0.0023
Next Token : 
, Posbility: 0.0103
Next Token :  [, Posbility: 0.0281
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Vector, Posbility: 0.0066
Next Token : Seq, Posbility: 0.0140
Next Token : Array, Posbility: 0.0295
Next Token : x, Posbility: 0.2188
Next Token : List, Posbility: 0.6719
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : Helpers, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : _, Posbility: 0.0013
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0266
Next Token : sort, Posbility: 0.0933
Next Token : map, Posbility: 0.2539
Next Token : filter, Posbility: 0.2539
Next Token : rev, Posbility: 0.2539
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0010
Next Token :  ~, Posbility: 0.0015
Next Token : (, Posbility: 0.0015
Next Token : _, Posbility: 0.0123
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0022
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : or, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >>, Posbility: 0.0006
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0085
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0004
Next Token : 

, Posbility: 0.0074
Next Token :   , Posbility: 0.0084
Next Token :  , Posbility: 0.0084
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :    , Posbility: 0.0004
Next Token :       , Posbility: 0.0005
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0130
Next Token : (, Posbility: 0.0167
Next Token : match, Posbility: 0.0515
Next Token : List, Posbility: 0.1592
Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0410
Next Token :  even, Posbility: 0.0679
Next Token :  count, Posbility: 0.0767
Next Token :  rec, Posbility: 0.1836
Next Token :  , Posbility: 0.3887
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : odd, Posbility: 0.0354
Next Token : y, Posbility: 0.0454
Next Token : n, Posbility: 0.0583
Next Token : pairs, Posbility: 0.1396
Next Token : x, Posbility: 0.3809
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0228
Next Token : _, Posbility: 0.0376
Next Token :  =, Posbility: 0.1689
Next Token : or, Posbility: 0.2168
Next Token : s, Posbility: 0.4590
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0176
Next Token : 2, Posbility: 0.0256
Next Token : ', Posbility: 0.0422
Next Token : _, Posbility: 0.1895
Next Token :  =, Posbility: 0.6602
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0022
Next Token :  String, Posbility: 0.0045
Next Token :  [, Posbility: 0.0262
Next Token : 
, Posbility: 0.0713
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0084
Next Token : ref, Posbility: 0.0122
Next Token : Array, Posbility: 0.0122
Next Token : x, Posbility: 0.0483
Next Token : List, Posbility: 0.8555
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Utils, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0243
Next Token : fold, Posbility: 0.0747
Next Token : rev, Posbility: 0.1797
Next Token : map, Posbility: 0.2617
Next Token : filter, Posbility: 0.2617
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0126
Next Token :  ~, Posbility: 0.0126
Next Token :  ((, Posbility: 0.0161
Next Token : _, Posbility: 0.0439
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : #, Posbility: 0.0024
Next Token : List, Posbility: 0.0027
Next Token : f, Posbility: 0.0039
Next Token : x, Posbility: 0.0288
Next Token : (, Posbility: 0.9531
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0210
Next Token : f, Posbility: 0.0210
Next Token : fn, Posbility: 0.0269
Next Token : function, Posbility: 0.0569
Next Token : fun, Posbility: 0.7852
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0059
Next Token :  a, Posbility: 0.0097
Next Token :  v, Posbility: 0.0205
Next Token :  i, Posbility: 0.0718
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0161
Next Token : n, Posbility: 0.0161
Next Token : y, Posbility: 0.0161
Next Token : (, Posbility: 0.0439
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0013
Next Token : _, Posbility: 0.0015
Next Token : i, Posbility: 0.0022
Next Token :  i, Posbility: 0.0052
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 0.0008
Next Token : y, Posbility: 0.0028
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0062
Next Token :  ((, Posbility: 0.0062
Next Token :  !, Posbility: 0.0102
Next Token :  not, Posbility: 0.0277
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0076
Next Token : Mod, Posbility: 0.0339
Next Token : Int, Posbility: 0.0383
Next Token : (, Posbility: 0.1953
Next Token : x, Posbility: 0.6797
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !=, Posbility: 0.0234
Next Token :  =, Posbility: 0.0342
Next Token :  , Posbility: 0.2852
Next Token :  %, Posbility: 0.2852
Next Token :  mod, Posbility: 0.2852
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token :  10, Posbility: 0.0009
Next Token :  4, Posbility: 0.0065
Next Token :  2), Posbility: 0.0178
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : 5, Posbility: 0.0012
Next Token : x, Posbility: 0.0022
Next Token : 3, Posbility: 0.0109
Next Token : 2, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ===, Posbility: 0.0064
Next Token :  !=, Posbility: 0.0175
Next Token :  , Posbility: 0.1001
Next Token :  ==, Posbility: 0.1289
Next Token :  =, Posbility: 0.7422
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0023
Next Token :  , Posbility: 0.0062
Next Token :  0, Posbility: 0.0170
Next Token :  1), Posbility: 0.0461
Next Token :  0), Posbility: 0.9258
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  ~, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : or, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0023
Next Token :  , Posbility: 0.0056
Next Token :  |, Posbility: 0.0105
Next Token : 
, Posbility: 0.0222
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :   , Posbility: 0.0017
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0155
Next Token : x, Posbility: 0.0226
Next Token : match, Posbility: 0.0542
Next Token : List, Posbility: 0.2139
Next Token : let, Posbility: 0.6602
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  even, Posbility: 0.0245
Next Token :  acc, Posbility: 0.0278
Next Token :  count, Posbility: 0.0405
Next Token :  rec, Posbility: 0.0591
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0157
Next Token : n, Posbility: 0.0178
Next Token : y, Posbility: 0.0259
Next Token : pairs, Posbility: 0.0623
Next Token : x, Posbility: 0.7578
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0039
Next Token : _, Posbility: 0.0050
Next Token :  =, Posbility: 0.0135
Next Token : or, Posbility: 0.0222
Next Token : s, Posbility: 0.9453
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0038
Next Token : 2, Posbility: 0.0056
Next Token : ,, Posbility: 0.0134
Next Token : _, Posbility: 0.0222
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  String, Posbility: 0.0005
Next Token :  [, Posbility: 0.0015
Next Token : 
, Posbility: 0.0178
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0013
Next Token : Map, Posbility: 0.0016
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0226
Next Token : List, Posbility: 0.9609
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0310
Next Token : rev, Posbility: 0.0579
Next Token : fold, Posbility: 0.0957
Next Token : filter, Posbility: 0.2598
Next Token : map, Posbility: 0.3770
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0050
Next Token :  acc, Posbility: 0.0050
Next Token :  ((, Posbility: 0.0072
Next Token : i, Posbility: 0.0105
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0018
Next Token : List, Posbility: 0.0027
Next Token : f, Posbility: 0.0044
Next Token : x, Posbility: 0.0255
Next Token : (, Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : +, Posbility: 0.0008
Next Token : fn, Posbility: 0.0010
Next Token : function, Posbility: 0.0040
Next Token : fun, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0007
Next Token :  a, Posbility: 0.0019
Next Token :  v, Posbility: 0.0027
Next Token :  i, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0009
Next Token : y, Posbility: 0.0024
Next Token : _, Posbility: 0.0066
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0005
Next Token : 1, Posbility: 0.0007
Next Token : s, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0024
Next Token :  ((, Posbility: 0.0065
Next Token :  [, Posbility: 0.0065
Next Token :  ~, Posbility: 0.0065
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0113
Next Token : if, Posbility: 0.0187
Next Token : List, Posbility: 0.0396
Next Token : (, Posbility: 0.1074
Next Token : x, Posbility: 0.7930
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  %, Posbility: 0.0126
Next Token : x, Posbility: 0.0143
Next Token :  +, Posbility: 0.1060
Next Token :  *, Posbility: 0.1748
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0113
Next Token : -, Posbility: 0.0239
Next Token : /, Posbility: 0.0306
Next Token : x, Posbility: 0.2910
Next Token : ^, Posbility: 0.6172
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0209
Next Token :  0), Posbility: 0.1201
Next Token :  2), Posbility: 0.1982
Next Token :  , Posbility: 0.2539
Next Token :  1), Posbility: 0.3262
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0019
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 0.0012
Next Token :  , Posbility: 0.0040
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0148
Next Token : match, Posbility: 0.0315
Next Token : x, Posbility: 0.0586
Next Token : let, Posbility: 0.4336
Next Token : List, Posbility: 0.4336
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List
 score:False
Error type: noerr
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0013
Next Token : filter, Posbility: 0.0059
Next Token : fold, Posbility: 0.0432
Next Token : count, Posbility: 0.0713
Next Token : length, Posbility: 0.8672
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0021
Next Token : _, Posbility: 0.0031
Next Token : 
, Posbility: 0.0040
Next Token :  ((, Posbility: 0.0108
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : @@, Posbility: 0.0005
Next Token : List, Posbility: 0.0090
Next Token : (, Posbility: 0.4941
Next Token : x, Posbility: 0.4941
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0121
Next Token :  *, Posbility: 0.0177
Next Token :  , Posbility: 0.0544
Next Token : 

, Posbility: 0.3555
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0249
Next Token : ```, Posbility: 0.0310
Next Token :   , Posbility: 0.0330
Next Token : 

, Posbility: 0.0527
Next Token : let, Posbility: 0.0654
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0210
Next Token :  test, Posbility: 0.0645
Next Token :  count, Posbility: 0.0645
Next Token :  main, Posbility: 0.2891
Next Token :  , Posbility: 0.3711
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0148
Next Token : _, Posbility: 0.0276
Next Token : pairs, Posbility: 0.0850
Next Token : (), Posbility: 0.1235
Next Token : x, Posbility: 0.5547
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0033
Next Token : ors, Posbility: 0.0101
Next Token :  =, Posbility: 0.0130
Next Token : s, Posbility: 0.0454
Next Token : or, Posbility: 0.9102
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : 2, Posbility: 0.0013
Next Token :  =, Posbility: 0.0074
Next Token :  , Posbility: 0.0138
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pair, Posbility: 0.0124
Next Token : test, Posbility: 0.0181
Next Token : list, Posbility: 0.0262
Next Token : pairs, Posbility: 0.0262
Next Token : count, Posbility: 0.7656
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0393
Next Token : ', Posbility: 0.0393
Next Token :  , Posbility: 0.0737
Next Token : 2, Posbility: 0.0737
Next Token : _, Posbility: 0.6992
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0334
Next Token : ex, Posbility: 0.0378
Next Token : 2, Posbility: 0.0430
Next Token : list, Posbility: 0.0908
Next Token : test, Posbility: 0.1328
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cases, Posbility: 0.0083
Next Token : er, Posbility: 0.0121
Next Token : _, Posbility: 0.0476
Next Token :  =, Posbility: 0.3984
Next Token :  , Posbility: 0.4531
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0098
Next Token : (, Posbility: 0.0125
Next Token : n, Posbility: 0.0635
Next Token : x, Posbility: 0.3223
Next Token : (), Posbility: 0.5312
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test ()
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  format, Posbility: 0.0025
Next Token :  (*, Posbility: 0.0025
Next Token :  test, Posbility: 0.0052
Next Token :  , Posbility: 0.1953
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0013
Next Token :    , Posbility: 0.0034
Next Token :     , Posbility: 0.0249
Next Token : let, Posbility: 0.0249
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0145
Next Token : print, Posbility: 0.0211
Next Token : Printf, Posbility: 0.0393
Next Token : assert, Posbility: 0.2910
Next Token : let, Posbility: 0.4805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0250
Next Token :  l, Posbility: 0.0283
Next Token :  even, Posbility: 0.0283
Next Token :  expected, Posbility: 0.0322
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0091
Next Token : t, Posbility: 0.0103
Next Token : n, Posbility: 0.0247
Next Token : pairs, Posbility: 0.0359
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token : ors, Posbility: 0.0078
Next Token : or, Posbility: 0.0271
Next Token :  =, Posbility: 0.0574
Next Token : s, Posbility: 0.8945
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0007
Next Token : 0, Posbility: 0.0040
Next Token : _, Posbility: 0.0045
Next Token : 1, Posbility: 0.0075
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0291
Next Token :  [0,, Posbility: 0.0291
Next Token :  [1,, Posbility: 0.0791
Next Token :  , Posbility: 0.2148
Next Token :  [, Posbility: 0.5820
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0593
Next Token :  0, Posbility: 0.0593
Next Token :  , Posbility: 0.0977
Next Token : |, Posbility: 0.1108
Next Token : 1, Posbility: 0.2070
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  3;, Posbility: 0.0031
Next Token :  2;, Posbility: 0.0076
Next Token :  |, Posbility: 0.0110
Next Token :  , Posbility: 0.0811
Next Token : ;, Posbility: 0.8750
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0410
Next Token : 2, Posbility: 0.0869
Next Token :  , Posbility: 0.0869
Next Token :  3;, Posbility: 0.0869
Next Token :  2;, Posbility: 0.5664
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0142
Next Token :  1;, Posbility: 0.0142
Next Token :  4;, Posbility: 0.0386
Next Token :  , Posbility: 0.1050
Next Token :  3;, Posbility: 0.7734
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  3;, Posbility: 0.0140
Next Token :  4, Posbility: 0.0381
Next Token :  5;, Posbility: 0.0381
Next Token :  , Posbility: 0.1035
Next Token :  4;, Posbility: 0.7656
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0032
Next Token :  2;, Posbility: 0.0032
Next Token :  3;, Posbility: 0.0032
Next Token :  , Posbility: 0.1768
Next Token :  5;, Posbility: 0.7891
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1;, Posbility: 0.0031
Next Token :  0;, Posbility: 0.0039
Next Token :  10;, Posbility: 0.0050
Next Token :  8;, Posbility: 0.0064
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 5, Posbility: 0.0026
Next Token : 8, Posbility: 0.0030
Next Token : 9, Posbility: 0.0056
Next Token : 7, Posbility: 0.0322
Next Token : 6, Posbility: 0.9414
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0005
Next Token :  , Posbility: 0.0018
Next Token : ];, Posbility: 0.0030
Next Token : ], Posbility: 0.3457
Next Token : ;, Posbility: 0.6484
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  10;, Posbility: 0.0017
Next Token :  0;, Posbility: 0.0019
Next Token :  8;, Posbility: 0.0024
Next Token : ], Posbility: 0.0035
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 42, Posbility: 0.0006
Next Token : 8, Posbility: 0.0019
Next Token : 9, Posbility: 0.0031
Next Token : 6, Posbility: 0.0040
Next Token : 7, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0001
Next Token : ];, Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token : ], Posbility: 0.1187
Next Token : ;, Posbility: 0.8789
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 8, Posbility: 0.0020
Next Token : ], Posbility: 0.0020
Next Token :  10;, Posbility: 0.0033
Next Token :  , Posbility: 0.1787
Next Token :  8;, Posbility: 0.8008
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  11, Posbility: 0.0005
Next Token :  0;, Posbility: 0.0007
Next Token :  10, Posbility: 0.0007
Next Token :  10;, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 8, Posbility: 0.0004
Next Token : 99, Posbility: 0.0004
Next Token : 16, Posbility: 0.0005
Next Token : 7, Posbility: 0.0005
Next Token : 9, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0002
Next Token : ];, Posbility: 0.0010
Next Token :  , Posbility: 0.0011
Next Token : ], Posbility: 0.4355
Next Token : ;, Posbility: 0.5586
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  12, Posbility: 0.0090
Next Token :  0;, Posbility: 0.0192
Next Token :  , Posbility: 0.0405
Next Token :  10, Posbility: 0.2334
Next Token :  10;, Posbility: 0.6328
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0023
Next Token :  20, Posbility: 0.0038
Next Token :  12, Posbility: 0.0092
Next Token :  , Posbility: 0.0221
Next Token :  11, Posbility: 0.9414
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0003
Next Token : ];, Posbility: 0.0009
Next Token :  , Posbility: 0.0017
Next Token : ], Posbility: 0.3203
Next Token : ;, Posbility: 0.6758
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  20, Posbility: 0.0012
Next Token : ], Posbility: 0.0015
Next Token :  13, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token :  12, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0003
Next Token : ];, Posbility: 0.0011
Next Token :  , Posbility: 0.0012
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  12, Posbility: 0.0019
Next Token : ], Posbility: 0.0031
Next Token :  14, Posbility: 0.0031
Next Token :  , Posbility: 0.0107
Next Token :  13, Posbility: 0.9688
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ];, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : ], Posbility: 0.0850
Next Token : ;, Posbility: 0.9141
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  13, Posbility: 0.0015
Next Token :  15, Posbility: 0.0017
Next Token :  , Posbility: 0.0046
Next Token :  14, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0001
Next Token : ];, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : ], Posbility: 0.0952
Next Token : ;, Posbility: 0.9023
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : ], Posbility: 0.0005
Next Token : 15, Posbility: 0.0012
Next Token :  , Posbility: 0.0067
Next Token :  15, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : ];, Posbility: 0.0009
Next Token : ], Posbility: 0.2217
Next Token : ;, Posbility: 0.7734
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  20, Posbility: 0.0008
Next Token : 
, Posbility: 0.0022
Next Token : ], Posbility: 0.0024
Next Token :  17, Posbility: 0.0046
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : 42, Posbility: 0.0001
Next Token : 36, Posbility: 0.0001
Next Token : 6, Posbility: 0.0001
Next Token : 16, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0009
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.0010
Next Token : ], Posbility: 0.2441
Next Token : ;, Posbility: 0.7500
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0010
Next Token : ], Posbility: 0.0040
Next Token : 
, Posbility: 0.0051
Next Token :  , Posbility: 0.0085
Next Token :  17, Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : ], Posbility: 0.0850
Next Token : ;, Posbility: 0.9141
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 18, Posbility: 0.0009
Next Token :  19, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.0025
Next Token :  18, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : ], Posbility: 0.0757
Next Token : ;, Posbility: 0.9219
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  21, Posbility: 0.0007
Next Token :  , Posbility: 0.0013
Next Token :  20, Posbility: 0.0017
Next Token : 
, Posbility: 0.0036
Next Token :  19, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token : ];, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  21, Posbility: 0.0010
Next Token : 
, Posbility: 0.0052
Next Token :  20, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0008
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.0013
Next Token : ], Posbility: 0.4668
Next Token : ;, Posbility: 0.5273
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  22, Posbility: 0.0014
Next Token :  , Posbility: 0.0051
Next Token : ], Posbility: 0.0057
Next Token : 
, Posbility: 0.0156
Next Token :  21, Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0004
Next Token :  , Posbility: 0.0011
Next Token : 
, Posbility: 0.0016
Next Token : ], Posbility: 0.1641
Next Token : ;, Posbility: 0.8320
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  21, Posbility: 0.0019
Next Token :  23, Posbility: 0.0035
Next Token :  , Posbility: 0.0040
Next Token : 
, Posbility: 0.0058
Next Token :  22, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0007
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token : ], Posbility: 0.0952
Next Token : ;, Posbility: 0.9023
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0006
Next Token :  24, Posbility: 0.0009
Next Token : 
, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token :  23, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0011
Next Token : ], Posbility: 0.0850
Next Token : ;, Posbility: 0.9102
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0005
Next Token : ], Posbility: 0.0010
Next Token : 
, Posbility: 0.0107
Next Token :  , Posbility: 0.0177
Next Token :  24, Posbility: 0.9688
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0006
Next Token : ];, Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : ], Posbility: 0.0952
Next Token : ;, Posbility: 0.9023
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  26, Posbility: 0.0008
Next Token : ], Posbility: 0.0009
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0109
Next Token :  25, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0007
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0008
Next Token : ], Posbility: 0.1064
Next Token : ;, Posbility: 0.8906
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 26, Posbility: 0.0005
Next Token : ], Posbility: 0.0010
Next Token : 
, Posbility: 0.0028
Next Token :  , Posbility: 0.0041
Next Token :  26, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token : ];, Posbility: 0.0007
Next Token : ], Posbility: 0.0420
Next Token : ;, Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0005
Next Token :  28, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0019
Next Token :  27, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token : ];, Posbility: 0.0004
Next Token : ], Posbility: 0.0259
Next Token : ;, Posbility: 0.9727
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : 28, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0022
Next Token :  28, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : ];, Posbility: 0.0007
Next Token : ], Posbility: 0.0420
Next Token : ;, Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0003
Next Token :  30, Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.0012
Next Token :  29, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0007
Next Token : ], Posbility: 0.0601
Next Token : ;, Posbility: 0.9375
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : 30, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.0019
Next Token :  30, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0009
Next Token : ];, Posbility: 0.0018
Next Token :  , Posbility: 0.0023
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  30, Posbility: 0.0002
Next Token : 31, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : ], Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 32;, Posbility: 0.0003
Next Token : 32, Posbility: 0.0004
Next Token : 33, Posbility: 0.0006
Next Token : 35, Posbility: 0.0009
Next Token : 31, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : ];, Posbility: 0.0022
Next Token : ], Posbility: 0.2012
Next Token : ;, Posbility: 0.7930
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 32, Posbility: 0.0005
Next Token : 32;, Posbility: 0.0006
Next Token : 
, Posbility: 0.0013
Next Token : ], Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 35, Posbility: 0.0013
Next Token : 31, Posbility: 0.0013
Next Token : 33, Posbility: 0.0053
Next Token : 32;, Posbility: 0.3730
Next Token : 32, Posbility: 0.6133
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0035
Next Token : ;, Posbility: 0.0334
Next Token : ];, Posbility: 0.0913
Next Token : ], Posbility: 0.8633
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0016
Next Token :  =, Posbility: 0.0030
Next Token : 
, Posbility: 0.0417
Next Token :  in, Posbility: 0.9531
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :       , Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0527
Next Token : x, Posbility: 0.0598
Next Token : Printf, Posbility: 0.1846
Next Token : assert, Posbility: 0.2090
Next Token : let, Posbility: 0.2676
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0237
Next Token :  even, Posbility: 0.0269
Next Token :  count, Posbility: 0.0728
Next Token :  expected, Posbility: 0.1060
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0283
Next Token : pairs, Posbility: 0.0679
Next Token : n, Posbility: 0.1270
Next Token : y, Posbility: 0.1631
Next Token : x, Posbility: 0.3906
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0050
Next Token : ors, Posbility: 0.0121
Next Token :  =, Posbility: 0.1143
Next Token : or, Posbility: 0.1885
Next Token : s, Posbility: 0.6602
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0132
Next Token : ', Posbility: 0.0150
Next Token : 2, Posbility: 0.0359
Next Token : _, Posbility: 0.0977
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [1,, Posbility: 0.0014
Next Token :  String, Posbility: 0.0029
Next Token : 
, Posbility: 0.0129
Next Token :  [, Posbility: 0.0579
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0045
Next Token : Array, Posbility: 0.0065
Next Token : (, Posbility: 0.0107
Next Token : x, Posbility: 0.1904
Next Token : List, Posbility: 0.7539
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Utils, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0254
Next Token : sort, Posbility: 0.1006
Next Token : filter, Posbility: 0.1143
Next Token : rev, Posbility: 0.1465
Next Token : map, Posbility: 0.4512
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0055
Next Token :  ~, Posbility: 0.0080
Next Token : _, Posbility: 0.0091
Next Token : i, Posbility: 0.0247
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0032
Next Token : Int, Posbility: 0.0036
Next Token : f, Posbility: 0.0041
Next Token : x, Posbility: 0.1045
Next Token : (, Posbility: 0.8750
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0010
Next Token : let, Posbility: 0.0010
Next Token : x, Posbility: 0.0022
Next Token : function, Posbility: 0.0028
Next Token : fun, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0014
Next Token :  k, Posbility: 0.0023
Next Token :  v, Posbility: 0.0079
Next Token :  i, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0038
Next Token : (, Posbility: 0.0049
Next Token : n, Posbility: 0.0134
Next Token : _, Posbility: 0.0282
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0002
Next Token : i, Posbility: 0.0003
Next Token : s, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0030
Next Token :  [, Posbility: 0.0038
Next Token :  1, Posbility: 0.0104
Next Token :  String, Posbility: 0.0133
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0146
Next Token : if, Posbility: 0.0242
Next Token : List, Posbility: 0.0398
Next Token : (, Posbility: 0.0579
Next Token : x, Posbility: 0.8008
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : or, Posbility: 0.0239
Next Token :  %, Posbility: 0.0239
Next Token :  *, Posbility: 0.2002
Next Token :  +, Posbility: 0.2578
Next Token :  , Posbility: 0.4238
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0023
Next Token : ::, Posbility: 0.0023
Next Token : /, Posbility: 0.0105
Next Token : -, Posbility: 0.0366
Next Token : ^, Posbility: 0.9453
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0283
Next Token :  0), Posbility: 0.0771
Next Token :  , Posbility: 0.1270
Next Token :  2), Posbility: 0.1631
Next Token :  1), Posbility: 0.4434
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0006
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 0.0005
Next Token :  in, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.0008
Next Token :  |, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0566
Next Token : x, Posbility: 0.0933
Next Token : Printf, Posbility: 0.1055
Next Token : assert, Posbility: 0.1738
Next Token : let, Posbility: 0.3691
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0176
Next Token :  even, Posbility: 0.0289
Next Token :  expected, Posbility: 0.0479
Next Token :  count, Posbility: 0.0613
Next Token :  , Posbility: 0.6602
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0200
Next Token : y, Posbility: 0.0544
Next Token : n, Posbility: 0.0618
Next Token : pairs, Posbility: 0.0698
Next Token : x, Posbility: 0.6641
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0031
Next Token : ors, Posbility: 0.0058
Next Token :  =, Posbility: 0.0547
Next Token : or, Posbility: 0.0703
Next Token : s, Posbility: 0.8555
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0018
Next Token : 1, Posbility: 0.0044
Next Token : 2, Posbility: 0.0119
Next Token : _, Posbility: 0.0286
Next Token :  =, Posbility: 0.9453
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0007
Next Token :  String, Posbility: 0.0011
Next Token : 
, Posbility: 0.0039
Next Token :  [, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0003
Next Token : Map, Posbility: 0.0008
Next Token : (, Posbility: 0.0034
Next Token : x, Posbility: 0.0527
Next Token : List, Posbility: 0.9375
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0182
Next Token : sort, Posbility: 0.0300
Next Token : rev, Posbility: 0.1191
Next Token : map, Posbility: 0.2217
Next Token : filter, Posbility: 0.4707
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0013
Next Token :  ~, Posbility: 0.0015
Next Token : _, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (__, Posbility: 0.0001
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0001
Next Token : fn, Posbility: 0.0002
Next Token : not, Posbility: 0.0005
Next Token : function, Posbility: 0.0008
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  v, Posbility: 0.0005
Next Token :  i, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : (, Posbility: 0.0012
Next Token : _, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0003
Next Token :  0, Posbility: 0.0004
Next Token :  not, Posbility: 0.0009
Next Token :  mod, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Mod, Posbility: 0.0002
Next Token : Int, Posbility: 0.0005
Next Token : List, Posbility: 0.0013
Next Token : (, Posbility: 0.0085
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0036
Next Token :  =, Posbility: 0.0060
Next Token :  , Posbility: 0.0162
Next Token :  %, Posbility: 0.0728
Next Token :  mod, Posbility: 0.8906
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0024
Next Token :  10, Posbility: 0.0024
Next Token :  15, Posbility: 0.0024
Next Token :  4, Posbility: 0.0177
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 16, Posbility: 0.0011
Next Token : 6, Posbility: 0.0015
Next Token : 5, Posbility: 0.0024
Next Token : 3, Posbility: 0.0109
Next Token : 2, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0004
Next Token :  ==, Posbility: 0.0019
Next Token :  !=, Posbility: 0.0052
Next Token :  , Posbility: 0.0085
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  2), Posbility: 0.0003
Next Token :  0, Posbility: 0.0009
Next Token :  1), Posbility: 0.0179
Next Token :  0), Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0571
Next Token : x, Posbility: 0.0732
Next Token : assert, Posbility: 0.1758
Next Token : Printf, Posbility: 0.1758
Next Token : let, Posbility: 0.3301
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0153
Next Token :  result, Posbility: 0.0173
Next Token :  expected, Posbility: 0.0366
Next Token :  count, Posbility: 0.0532
Next Token :  , Posbility: 0.7344
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0120
Next Token : y, Posbility: 0.0327
Next Token : n, Posbility: 0.0476
Next Token : pairs, Posbility: 0.0693
Next Token : x, Posbility: 0.7461
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0014
Next Token : ors, Posbility: 0.0037
Next Token :  =, Posbility: 0.0347
Next Token : or, Posbility: 0.0574
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0017
Next Token : 1, Posbility: 0.0019
Next Token : 2, Posbility: 0.0040
Next Token : _, Posbility: 0.0157
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  String, Posbility: 0.0007
Next Token : 
, Posbility: 0.0012
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0002
Next Token : Map, Posbility: 0.0006
Next Token : (, Posbility: 0.0023
Next Token : x, Posbility: 0.0417
Next Token : List, Posbility: 0.9492
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0225
Next Token : sort, Posbility: 0.0288
Next Token : filter, Posbility: 0.0327
Next Token : map, Posbility: 0.3516
Next Token : rev, Posbility: 0.4512
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0004
Next Token : _, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0009
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0703
Next Token : print, Posbility: 0.0796
Next Token : Printf, Posbility: 0.1689
Next Token : assert, Posbility: 0.2168
Next Token : let, Posbility: 0.2461
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0198
Next Token :  result, Posbility: 0.0254
Next Token :  expected, Posbility: 0.0371
Next Token :  count, Posbility: 0.0781
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0227
Next Token : y, Posbility: 0.0618
Next Token : n, Posbility: 0.0898
Next Token : pairs, Posbility: 0.0898
Next Token : x, Posbility: 0.5859
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0034
Next Token : ors, Posbility: 0.0044
Next Token :  =, Posbility: 0.0693
Next Token : or, Posbility: 0.0693
Next Token : s, Posbility: 0.8438
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0024
Next Token : 1, Posbility: 0.0031
Next Token : 2, Posbility: 0.0064
Next Token : _, Posbility: 0.0226
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0014
Next Token : 
, Posbility: 0.0064
Next Token :  String, Posbility: 0.0064
Next Token :  [, Posbility: 0.0223
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0010
Next Token : Map, Posbility: 0.0013
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.1162
Next Token : List, Posbility: 0.8594
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0403
Next Token : sort, Posbility: 0.0403
Next Token : rev, Posbility: 0.1094
Next Token : filter, Posbility: 0.1240
Next Token : map, Posbility: 0.3809
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0007
Next Token : _, Posbility: 0.0022
Next Token : i, Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0004
Next Token : f, Posbility: 0.0008
Next Token : List, Posbility: 0.0013
Next Token : x, Posbility: 0.0179
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0005
Next Token :  i, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : y, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : _, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0007
Next Token :  String, Posbility: 0.0009
Next Token :  [, Posbility: 0.0015
Next Token :  1, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0013
Next Token : List, Posbility: 0.0019
Next Token : if, Posbility: 0.0019
Next Token : (, Posbility: 0.0085
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0011
Next Token :  |, Posbility: 0.0014
Next Token :  *, Posbility: 0.0220
Next Token :  +, Posbility: 0.0361
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^2, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0003
Next Token : -, Posbility: 0.0008
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0024
Next Token :  , Posbility: 0.0039
Next Token :  0), Posbility: 0.0039
Next Token :  2), Posbility: 0.0177
Next Token :  1), Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0737
Next Token : List, Posbility: 0.1216
Next Token : x, Posbility: 0.1377
Next Token : assert, Posbility: 0.1562
Next Token : let, Posbility: 0.3301
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0095
Next Token :  result, Posbility: 0.0108
Next Token :  expected, Posbility: 0.0108
Next Token :  count, Posbility: 0.0259
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0053
Next Token : n, Posbility: 0.0184
Next Token : y, Posbility: 0.0184
Next Token : pairs, Posbility: 0.0267
Next Token : x, Posbility: 0.8867
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : ors, Posbility: 0.0016
Next Token :  =, Posbility: 0.0176
Next Token : or, Posbility: 0.0176
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0006
Next Token : 1, Posbility: 0.0010
Next Token : 2, Posbility: 0.0019
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  String, Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  [, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0001
Next Token : Map, Posbility: 0.0002
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.0228
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0166
Next Token : reverse, Posbility: 0.0212
Next Token : map, Posbility: 0.0952
Next Token : rev, Posbility: 0.2012
Next Token : filter, Posbility: 0.5469
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0003
Next Token : not, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token :  true, Posbility: 0.0001
Next Token :  mod, Posbility: 0.0002
Next Token :  not, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : Int, Posbility: 0.0001
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token :  %, Posbility: 0.0109
Next Token :  mod, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  12, Posbility: 0.0003
Next Token :  1, Posbility: 0.0009
Next Token :  10, Posbility: 0.0009
Next Token :  4, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0003
Next Token : 6, Posbility: 0.0004
Next Token : 5, Posbility: 0.0007
Next Token : 3, Posbility: 0.0067
Next Token : 2, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0003
Next Token :  !=, Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  0, Posbility: 0.0003
Next Token :  2), Posbility: 0.0003
Next Token :  1), Posbility: 0.0179
Next Token :  0), Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0664
Next Token : assert, Posbility: 0.0854
Next Token : Printf, Posbility: 0.1094
Next Token : x, Posbility: 0.1592
Next Token : let, Posbility: 0.3828
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0076
Next Token :  expected, Posbility: 0.0086
Next Token :  pair, Posbility: 0.0086
Next Token :  count, Posbility: 0.0206
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0052
Next Token : n, Posbility: 0.0183
Next Token : y, Posbility: 0.0183
Next Token : pairs, Posbility: 0.0302
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : ors, Posbility: 0.0021
Next Token :  =, Posbility: 0.0137
Next Token : or, Posbility: 0.0226
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0006
Next Token : 1, Posbility: 0.0010
Next Token : 2, Posbility: 0.0015
Next Token : _, Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0004
Next Token :  [], Posbility: 0.0004
Next Token : 
, Posbility: 0.0015
Next Token :  [, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0001
Next Token : Map, Posbility: 0.0003
Next Token : (, Posbility: 0.0021
Next Token : x, Posbility: 0.0292
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Util, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0145
Next Token : concat, Posbility: 0.0145
Next Token : filter, Posbility: 0.0308
Next Token : rev, Posbility: 0.3750
Next Token : map, Posbility: 0.4824
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0004
Next Token : x, Posbility: 0.0059
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  |, Posbility: 0.0003
Next Token :  *, Posbility: 0.0028
Next Token :  +, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 0.0002
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0005
Next Token :  3), Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :  2), Posbility: 0.0052
Next Token :  1), Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0378
Next Token : assert, Posbility: 0.0552
Next Token : x, Posbility: 0.0908
Next Token : List, Posbility: 0.1318
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0021
Next Token :  result, Posbility: 0.0024
Next Token :  even, Posbility: 0.0024
Next Token :  count, Posbility: 0.0058
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0011
Next Token : n, Posbility: 0.0035
Next Token : y, Posbility: 0.0051
Next Token : pairs, Posbility: 0.0084
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ors, Posbility: 0.0003
Next Token :  =, Posbility: 0.0052
Next Token : or, Posbility: 0.0052
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token : _, Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0067
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0037
Next Token : reverse, Posbility: 0.0101
Next Token : map, Posbility: 0.2021
Next Token : rev, Posbility: 0.2021
Next Token : filter, Posbility: 0.5469
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : not, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  true, Posbility: 0.0001
Next Token :  mod, Posbility: 0.0001
Next Token :  not, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :  %, Posbility: 0.0085
Next Token :  mod, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  12, Posbility: 0.0002
Next Token :  10, Posbility: 0.0004
Next Token :  1, Posbility: 0.0007
Next Token :  4, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0002
Next Token : 6, Posbility: 0.0003
Next Token : 5, Posbility: 0.0003
Next Token : 3, Posbility: 0.0041
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0002
Next Token :  !=, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  2), Posbility: 0.0001
Next Token :  1), Posbility: 0.0067
Next Token :  0), Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : assert, Posbility: 0.0297
Next Token : print, Posbility: 0.0381
Next Token : List, Posbility: 0.0491
Next Token : x, Posbility: 0.1035
Next Token : let, Posbility: 0.6758
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  expected, Posbility: 0.0013
Next Token :  result, Posbility: 0.0017
Next Token :  res, Posbility: 0.0017
Next Token :  count, Posbility: 0.0040
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0021
Next Token : n, Posbility: 0.0027
Next Token : y, Posbility: 0.0040
Next Token : pairs, Posbility: 0.0066
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ors, Posbility: 0.0005
Next Token :  =, Posbility: 0.0059
Next Token : or, Posbility: 0.0067
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 2, Posbility: 0.0003
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0124
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : Util, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0033
Next Token : reverse, Posbility: 0.0148
Next Token : filter, Posbility: 0.0403
Next Token : rev, Posbility: 0.1094
Next Token : map, Posbility: 0.8086
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0008
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  *, Posbility: 0.0005
Next Token :  +, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0001
Next Token :  0), Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  2), Posbility: 0.0007
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0101
Next Token : print, Posbility: 0.0148
Next Token : x, Posbility: 0.0583
Next Token : List, Posbility: 0.0752
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  even, Posbility: 0.0005
Next Token :  res, Posbility: 0.0006
Next Token :  result, Posbility: 0.0008
Next Token :  count, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0005
Next Token : n, Posbility: 0.0010
Next Token : y, Posbility: 0.0015
Next Token : pairs, Posbility: 0.0022
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0015
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0008
Next Token : reverse, Posbility: 0.0057
Next Token : rev, Posbility: 0.0156
Next Token : map, Posbility: 0.1152
Next Token : filter, Posbility: 0.8516
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  not, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  true, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  %, Posbility: 0.0041
Next Token :  mod, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  22, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0002
Next Token :  4, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0001
Next Token : 5, Posbility: 0.0001
Next Token : 3, Posbility: 0.0009
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  !=, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1), Posbility: 0.0025
Next Token :  0), Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : assert, Posbility: 0.0168
Next Token : print, Posbility: 0.0190
Next Token : List, Posbility: 0.0245
Next Token : x, Posbility: 0.0669
Next Token : let, Posbility: 0.8125
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  even, Posbility: 0.0004
Next Token :  result, Posbility: 0.0006
Next Token :  res, Posbility: 0.0007
Next Token :  count, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0009
Next Token : n, Posbility: 0.0012
Next Token : y, Posbility: 0.0015
Next Token : pairs, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token :  =, Posbility: 0.0032
Next Token : or, Posbility: 0.0032
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0024
Next Token : filter, Posbility: 0.0175
Next Token : rev, Posbility: 0.0175
Next Token : map, Posbility: 0.9531
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  1), Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token :  +, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token :  0), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  2), Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0067
Next Token : print, Posbility: 0.0077
Next Token : x, Posbility: 0.0388
Next Token : List, Posbility: 0.0439
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  even, Posbility: 0.0002
Next Token :  result, Posbility: 0.0003
Next Token :  res, Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : y, Posbility: 0.0005
Next Token : pairs, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0008
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0017
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Utils, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0005
Next Token : rev, Posbility: 0.0024
Next Token : map, Posbility: 0.0178
Next Token : filter, Posbility: 0.9766
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  true, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  %, Posbility: 0.0041
Next Token :  mod, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  22, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  4, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0005
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1), Posbility: 0.0009
Next Token :  0), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0108
Next Token : print, Posbility: 0.0139
Next Token : List, Posbility: 0.0229
Next Token : x, Posbility: 0.0623
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  expected, Posbility: 0.0002
Next Token :  result, Posbility: 0.0004
Next Token :  res, Posbility: 0.0004
Next Token :  count, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0005
Next Token : y, Posbility: 0.0007
Next Token : n, Posbility: 0.0008
Next Token : pairs, Posbility: 0.0013
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0013
Next Token :  =, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0028
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0005
Next Token : rev, Posbility: 0.0040
Next Token : filter, Posbility: 0.0109
Next Token : map, Posbility: 0.9805
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1), Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token :  0), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  2), Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0054
Next Token : (, Posbility: 0.0070
Next Token : List, Posbility: 0.0244
Next Token : x, Posbility: 0.0312
Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  expected, Posbility: 0.0001
Next Token :  res, Posbility: 0.0002
Next Token :  result, Posbility: 0.0002
Next Token :  count, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : n, Posbility: 0.0005
Next Token : pairs, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : or, Posbility: 0.0008
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0012
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Utils, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0005
Next Token : rev, Posbility: 0.0015
Next Token : map, Posbility: 0.0109
Next Token : filter, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  true, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : !(, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  %, Posbility: 0.0032
Next Token :  mod, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  22, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  4, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =0), Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1), Posbility: 0.0009
Next Token :  0), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0061
Next Token : (, Posbility: 0.0089
Next Token : List, Posbility: 0.0212
Next Token : x, Posbility: 0.0398
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  expected, Posbility: 0.0001
Next Token :  result, Posbility: 0.0002
Next Token :  res, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0004
Next Token : n, Posbility: 0.0004
Next Token : pairs, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0009
Next Token :  =, Posbility: 0.0012
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0017
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : Utils, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0003
Next Token : rev, Posbility: 0.0015
Next Token : filter, Posbility: 0.0067
Next Token : map, Posbility: 0.9883
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False
Error type: noerr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: noerr
---------------------------
Next Token : 1), Posbility: 0.0000
Next Token :  0), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  2), Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1)
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0042
Next Token : (, Posbility: 0.0070
Next Token : List, Posbility: 0.0277
Next Token : x, Posbility: 0.0315
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : or, Posbility: 0.0003
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  filter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : Utils, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : find, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0003
Next Token : rev, Posbility: 0.0009
Next Token : map, Posbility: 0.0109
Next Token : filter, Posbility: 0.9844
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (
 score:False
Error type: noerr
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun
 score:False
Error type: noerr
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token :  true, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token :  ==, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  %, Posbility: 0.0025
Next Token :  mod, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod
 score:False
Error type: noerr
---------------------------
Next Token :  22, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 
 score:False
Error type: noerr
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0000
Next Token :  ==, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 =
 score:False
Error type: noerr
---------------------------
Next Token : =0), Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1), Posbility: 0.0004
Next Token :  0), Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0)
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0048
Next Token : (, Posbility: 0.0080
Next Token : List, Posbility: 0.0168
Next Token : x, Posbility: 0.0356
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0003
Next Token : pairs, Posbility: 0.0004
Next Token : n, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : or, Posbility: 0.0004
Next Token :  =, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0015
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : rev, Posbility: 0.0009
Next Token : filter, Posbility: 0.0052
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that counts the number of pairs of integers in a list that xor to an even number. *)
let xor_count xs =
  let xs = List.rev xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (fun x -> x ^ 1) xs in
  let xs = List.filter (fun x -> x mod 2 = 0) xs in
  let xs = List.map (
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>