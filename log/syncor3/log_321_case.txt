code:
 (* Write a function to divide two lists element wise. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  compare, Posbility: 0.0017
Next Token :  element, Posbility: 0.0061
Next Token :  list, Posbility: 0.0188
Next Token :  , Posbility: 0.2285
Next Token :  rec, Posbility: 0.7070
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  even, Posbility: 0.0066
Next Token :  rec, Posbility: 0.0203
Next Token :  loop, Posbility: 0.0203
Next Token :  list, Posbility: 0.0486
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0177
Next Token : fold, Posbility: 0.0200
Next Token : split, Posbility: 0.0425
Next Token : div, Posbility: 0.1680
Next Token : divide, Posbility: 0.5156
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0153
Next Token : 2, Posbility: 0.0222
Next Token :  =, Posbility: 0.1133
Next Token : _, Posbility: 0.3066
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0356
Next Token : lst, Posbility: 0.0459
Next Token : (, Posbility: 0.0854
Next Token : :, Posbility: 0.1245
Next Token : x, Posbility: 0.4336
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0052
Next Token : 0, Posbility: 0.0058
Next Token :  =, Posbility: 0.0381
Next Token : s, Posbility: 0.2480
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0010
Next Token : (, Posbility: 0.0011
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 0.0085
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0033
Next Token :  v, Posbility: 0.0033
Next Token :  i, Posbility: 0.0042
Next Token :  , Posbility: 0.0518
Next Token :  =, Posbility: 0.9180
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0024
Next Token :  function, Posbility: 0.0065
Next Token :  , Posbility: 0.0615
Next Token :  match, Posbility: 0.0698
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0064
Next Token :    , Posbility: 0.0093
Next Token : 	, Posbility: 0.0106
Next Token :     , Posbility: 0.1138
Next Token :   , Posbility: 0.8398
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0050
Next Token : List, Posbility: 0.0106
Next Token : let, Posbility: 0.0540
Next Token : if, Posbility: 0.1660
Next Token : match, Posbility: 0.7422
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0019
Next Token : 
, Posbility: 0.0024
Next Token :  String, Posbility: 0.0027
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0018
Next Token : y, Posbility: 0.0312
Next Token : List, Posbility: 0.0664
Next Token : (, Posbility: 0.0752
Next Token : x, Posbility: 0.8086
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0045
Next Token :  =, Posbility: 0.0058
Next Token :  , Posbility: 0.0332
Next Token :  with, Posbility: 0.4043
Next Token : ,, Posbility: 0.5195
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : y, Posbility: 0.0474
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0015
Next Token :  , Posbility: 0.0015
Next Token : ,, Posbility: 0.0040
Next Token : 
, Posbility: 0.0066
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :  [, Posbility: 0.0013
Next Token : 

, Posbility: 0.0031
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :       , Posbility: 0.0011
Next Token :    , Posbility: 0.0016
Next Token :     , Posbility: 0.0471
Next Token :   , Posbility: 0.9492
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0031
Next Token : [], Posbility: 0.0039
Next Token : (, Posbility: 0.0065
Next Token : [, Posbility: 0.0226
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0136
Next Token :  [], Posbility: 0.0371
Next Token :  [, Posbility: 0.0786
Next Token :  , Posbility: 0.1006
Next Token :  [],, Posbility: 0.7422
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0008
Next Token : [], Posbility: 0.0027
Next Token :  [],, Posbility: 0.0123
Next Token :  , Posbility: 0.1167
Next Token :  [], Posbility: 0.8633
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0060
Next Token :   , Posbility: 0.0164
Next Token :  =>, Posbility: 0.0164
Next Token :  |, Posbility: 0.0444
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : â†’, Posbility: 0.0004
Next Token : -, Posbility: 0.0009
Next Token : ::, Posbility: 0.0012
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  error, Posbility: 0.0037
Next Token : 
, Posbility: 0.0101
Next Token :  [];, Posbility: 0.0101
Next Token :  , Posbility: 0.0454
Next Token :  [], Posbility: 0.9141
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0033
Next Token :   , Posbility: 0.0079
Next Token :  , Posbility: 0.0189
Next Token :  |, Posbility: 0.0400
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0103
Next Token :  [], Posbility: 0.0149
Next Token :  [],, Posbility: 0.1245
Next Token :  [, Posbility: 0.2637
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0219
Next Token : hd, Posbility: 0.0464
Next Token : h, Posbility: 0.0464
Next Token : _, Posbility: 0.2354
Next Token : x, Posbility: 0.5625
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0908
Next Token :  , Posbility: 0.1318
Next Token : s, Posbility: 0.1318
Next Token : ,, Posbility: 0.1494
Next Token : ::, Posbility: 0.3164
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : q, Posbility: 0.0190
Next Token : tx, Posbility: 0.0277
Next Token : y, Posbility: 0.0752
Next Token : _, Posbility: 0.1099
Next Token : x, Posbility: 0.6328
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0144
Next Token : ', Posbility: 0.0209
Next Token : ',, Posbility: 0.0344
Next Token : x, Posbility: 0.0569
Next Token : s, Posbility: 0.7852
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0095
Next Token :  |, Posbility: 0.0095
Next Token : 1,, Posbility: 0.0258
Next Token :  , Posbility: 0.0703
Next Token : ,, Posbility: 0.8555
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :  [],, Posbility: 0.0012
Next Token :  [, Posbility: 0.0055
Next Token :  [], Posbility: 0.4941
Next Token :  , Posbility: 0.4941
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ([], Posbility: 0.0008
Next Token : (), Posbility: 0.0044
Next Token : x, Posbility: 0.0072
Next Token : _, Posbility: 0.1455
Next Token : y, Posbility: 0.8359
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0039
Next Token :  |, Posbility: 0.0044
Next Token : s, Posbility: 0.0065
Next Token :  , Posbility: 0.0199
Next Token : ::, Posbility: 0.9570
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : [, Posbility: 0.0007
Next Token : [], Posbility: 0.0040
Next Token : _, Posbility: 0.0085
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0024
Next Token : ,, Posbility: 0.0040
Next Token :  |, Posbility: 0.0040
Next Token :  when, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : â†’, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0028
Next Token :   , Posbility: 0.0036
Next Token :  [, Posbility: 0.0238
Next Token :  , Posbility: 0.4766
Next Token : 
, Posbility: 0.4766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0060
Next Token :      , Posbility: 0.0127
Next Token :   , Posbility: 0.0127
Next Token :     , Posbility: 0.4766
Next Token :       , Posbility: 0.4766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0510
Next Token : match, Posbility: 0.0579
Next Token : x, Posbility: 0.0840
Next Token : List, Posbility: 0.0840
Next Token : let, Posbility: 0.6211
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0171
Next Token :  len, Posbility: 0.0171
Next Token :  l, Posbility: 0.0220
Next Token :  rec, Posbility: 0.3047
Next Token :  , Posbility: 0.5000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0378
Next Token : (, Posbility: 0.0623
Next Token : z, Posbility: 0.0703
Next Token : y, Posbility: 0.0903
Next Token : x, Posbility: 0.4062
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0659
Next Token : _, Posbility: 0.0850
Next Token : ,, Posbility: 0.0962
Next Token : s, Posbility: 0.1582
Next Token :  =, Posbility: 0.2969
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0034
Next Token :  match, Posbility: 0.0039
Next Token :  first, Posbility: 0.0063
Next Token :  [, Posbility: 0.0082
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0155
Next Token : head, Posbility: 0.0613
Next Token : divide, Posbility: 0.1011
Next Token : List, Posbility: 0.1299
Next Token : x, Posbility: 0.5820
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0330
Next Token : [0], Posbility: 0.0374
Next Token :  , Posbility: 0.1016
Next Token :  in, Posbility: 0.1484
Next Token : ::, Posbility: 0.5156
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [];, Posbility: 0.0203
Next Token : divide, Posbility: 0.0203
Next Token : y, Posbility: 0.0552
Next Token : (, Posbility: 0.0908
Next Token : x, Posbility: 0.6719
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0008
Next Token : 
, Posbility: 0.0019
Next Token : ;, Posbility: 0.0024
Next Token :  in, Posbility: 0.0109
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0182
Next Token : 
, Posbility: 0.0386
Next Token : ;, Posbility: 0.0635
Next Token : ,, Posbility: 0.0815
Next Token :  in, Posbility: 0.7734
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0005
Next Token :       , Posbility: 0.0006
Next Token :   , Posbility: 0.0021
Next Token :  , Posbility: 0.0291
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :         , Posbility: 0.0015
Next Token :     , Posbility: 0.0017
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0145
Next Token : (, Posbility: 0.0164
Next Token : y, Posbility: 0.0186
Next Token : match, Posbility: 0.0238
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  mut, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0007
Next Token : (, Posbility: 0.0015
Next Token : n, Posbility: 0.0015
Next Token : x, Posbility: 0.0139
Next Token : y, Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0005
Next Token : _, Posbility: 0.0005
Next Token : s, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : divide, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : ~, Posbility: 0.0003
Next Token : :, Posbility: 0.0004
Next Token : s, Posbility: 0.0017
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0007
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 0.0012
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0601
Next Token : List, Posbility: 0.0679
Next Token : [, Posbility: 0.0771
Next Token : x, Posbility: 0.1445
Next Token : let, Posbility: 0.5039
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0085
Next Token :  l, Posbility: 0.0085
Next Token :  res, Posbility: 0.0085
Next Token :  rec, Posbility: 0.2793
Next Token :  , Posbility: 0.5938
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : q, Posbility: 0.0466
Next Token : quot, Posbility: 0.0530
Next Token : z, Posbility: 0.0530
Next Token : y, Posbility: 0.1123
Next Token : x, Posbility: 0.4434
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0427
Next Token : _, Posbility: 0.0623
Next Token : ,, Posbility: 0.0908
Next Token :  =, Posbility: 0.3164
Next Token : s, Posbility: 0.3164
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0093
Next Token : _, Posbility: 0.0251
Next Token : ,, Posbility: 0.0532
Next Token : ', Posbility: 0.0532
Next Token :  =, Posbility: 0.8320
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0047
Next Token :  match, Posbility: 0.0101
Next Token :  [, Posbility: 0.0114
Next Token : 
, Posbility: 0.0449
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0214
Next Token : y, Posbility: 0.0242
Next Token : List, Posbility: 0.1226
Next Token : divide, Posbility: 0.2949
Next Token : x, Posbility: 0.4277
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0288
Next Token :  , Posbility: 0.0476
Next Token :  in, Posbility: 0.1289
Next Token : s, Posbility: 0.2129
Next Token : ::, Posbility: 0.4512
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0232
Next Token : y, Posbility: 0.0298
Next Token : [], Posbility: 0.0435
Next Token : (, Posbility: 0.2832
Next Token : x, Posbility: 0.5273
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0005
Next Token : ;, Posbility: 0.0008
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 0.0178
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0063
Next Token :  |, Posbility: 0.0071
Next Token : ,, Posbility: 0.0104
Next Token : ;, Posbility: 0.0134
Next Token :  in, Posbility: 0.9336
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :   , Posbility: 0.0009
Next Token : 

, Posbility: 0.0024
Next Token :  , Posbility: 0.0140
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0007
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 0.0009
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0219
Next Token : (, Posbility: 0.0280
Next Token : x, Posbility: 0.0280
Next Token : match, Posbility: 0.0359
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0010
Next Token :  mut, Posbility: 0.0011
Next Token :  res, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0009
Next Token : (, Posbility: 0.0011
Next Token : z, Posbility: 0.0018
Next Token : x, Posbility: 0.0226
Next Token : y, Posbility: 0.9570
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  [], Posbility: 0.0010
Next Token : 
, Posbility: 0.0012
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0014
Next Token : (, Posbility: 0.0024
Next Token : divide, Posbility: 0.0024
Next Token : x, Posbility: 0.0291
Next Token : y, Posbility: 0.9609
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : :, Posbility: 0.0006
Next Token : s, Posbility: 0.0032
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0015
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0012
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 0.0015
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0640
Next Token : List, Posbility: 0.0640
Next Token : match, Posbility: 0.0820
Next Token : x, Posbility: 0.1055
Next Token : let, Posbility: 0.5352
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0078
Next Token :  new, Posbility: 0.0099
Next Token :  res, Posbility: 0.0128
Next Token :  rec, Posbility: 0.3301
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0271
Next Token : quot, Posbility: 0.0271
Next Token : y, Posbility: 0.0649
Next Token : z, Posbility: 0.0649
Next Token : x, Posbility: 0.5430
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0298
Next Token : 0, Posbility: 0.0435
Next Token : _, Posbility: 0.0630
Next Token : s, Posbility: 0.2832
Next Token :  =, Posbility: 0.4121
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Car, Posbility: 0.0038
Next Token : 
, Posbility: 0.0081
Next Token :  first, Posbility: 0.0170
Next Token :  match, Posbility: 0.0170
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0198
Next Token : divide, Posbility: 0.0325
Next Token : head, Posbility: 0.0781
Next Token : List, Posbility: 0.1138
Next Token : x, Posbility: 0.6562
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0581
Next Token :  in, Posbility: 0.0845
Next Token : [0], Posbility: 0.1084
Next Token : ::, Posbility: 0.2021
Next Token : s, Posbility: 0.4297
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0413
Next Token : [0];, Posbility: 0.0413
Next Token : ::, Posbility: 0.0991
Next Token :  in, Posbility: 0.0991
Next Token : [0], Posbility: 0.5039
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 0.0004
Next Token : ::, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0003
Next Token :   , Posbility: 0.0006
Next Token :  match, Posbility: 0.0006
Next Token :  , Posbility: 0.0179
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :           , Posbility: 0.0013
Next Token :         , Posbility: 0.0013
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0102
Next Token : if, Posbility: 0.0115
Next Token : x, Posbility: 0.0131
Next Token : match, Posbility: 0.0277
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  mut, Posbility: 0.0009
Next Token :  rest, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0036
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : n, Posbility: 0.0007
Next Token : z, Posbility: 0.0007
Next Token : x, Posbility: 0.2656
Next Token : y, Posbility: 0.7227
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : _, Posbility: 0.0009
Next Token : s, Posbility: 0.0059
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  first, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0179
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0003
Next Token : [1], Posbility: 0.0004
Next Token : ::, Posbility: 0.0009
Next Token : [0], Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0001
Next Token : [-1], Posbility: 0.0009
Next Token : [1], Posbility: 0.0009
Next Token : [, Posbility: 0.0025
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 0.0010
Next Token :         , Posbility: 0.0022
Next Token :      , Posbility: 0.0096
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0488
Next Token : x, Posbility: 0.0713
Next Token : if, Posbility: 0.0913
Next Token : match, Posbility: 0.0913
Next Token : let, Posbility: 0.5977
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0081
Next Token :  new, Posbility: 0.0118
Next Token :  rest, Posbility: 0.0152
Next Token :  rec, Posbility: 0.0874
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0092
Next Token : remainder, Posbility: 0.0118
Next Token : z, Posbility: 0.0134
Next Token : y, Posbility: 0.0366
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0023
Next Token : _, Posbility: 0.0063
Next Token : ', Posbility: 0.0063
Next Token :  =, Posbility: 0.0284
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0048
Next Token : 2, Posbility: 0.0048
Next Token : _, Posbility: 0.0079
Next Token : ', Posbility: 0.0581
Next Token :  =, Posbility: 0.9062
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0005
Next Token :  remove, Posbility: 0.0005
Next Token :  drop, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : Array, Posbility: 0.0017
Next Token : (, Posbility: 0.0024
Next Token : List, Posbility: 0.0066
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : :, Posbility: 0.0010
Next Token :  , Posbility: 0.0020
Next Token : ::, Posbility: 0.0598
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0532
Next Token : ::, Posbility: 0.0684
Next Token : [1:, Posbility: 0.1128
Next Token : [, Posbility: 0.3066
Next Token : [1:], Posbility: 0.3477
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  and, Posbility: 0.0004
Next Token : ,, Posbility: 0.0008
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.0019
Next Token : (, Posbility: 0.0022
Next Token : [, Posbility: 0.0028
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  rest, Posbility: 0.0000
Next Token :  acc, Posbility: 0.0000
Next Token :  mut, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  filter, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0032
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : [1:], Posbility: 0.0000
Next Token : ::, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [:], Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [1:, Posbility: 0.0002
Next Token : [:-1], Posbility: 0.0003
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :           , Posbility: 0.0017
Next Token :         , Posbility: 0.0024
Next Token :      , Posbility: 0.0109
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0535
Next Token : [, Posbility: 0.0684
Next Token : (, Posbility: 0.0776
Next Token : x, Posbility: 0.0879
Next Token : let, Posbility: 0.5742
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0082
Next Token :  new, Posbility: 0.0120
Next Token :  res, Posbility: 0.0198
Next Token :  rec, Posbility: 0.1660
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : r, Posbility: 0.0283
Next Token : q, Posbility: 0.0322
Next Token : z, Posbility: 0.0530
Next Token : y, Posbility: 0.0601
Next Token : x, Posbility: 0.6445
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0090
Next Token : ', Posbility: 0.0115
Next Token : _, Posbility: 0.0131
Next Token : s, Posbility: 0.3379
Next Token :  =, Posbility: 0.5586
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0009
Next Token :  [, Posbility: 0.0035
Next Token : 
, Posbility: 0.0066
Next Token :  match, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0115
Next Token : (, Posbility: 0.0243
Next Token : y, Posbility: 0.0400
Next Token : divide, Posbility: 0.0850
Next Token : x, Posbility: 0.8047
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0156
Next Token :  +, Posbility: 0.0259
Next Token :  , Posbility: 0.0547
Next Token : ::, Posbility: 0.0796
Next Token : s, Posbility: 0.7539
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1], Posbility: 0.0024
Next Token : [-1], Posbility: 0.0039
Next Token :  in, Posbility: 0.0050
Next Token : [, Posbility: 0.0136
Next Token : [0], Posbility: 0.9531
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  and, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token :  +, Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :           , Posbility: 0.0003
Next Token :         , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0024
Next Token : [, Posbility: 0.0024
Next Token : (, Posbility: 0.0040
Next Token : match, Posbility: 0.0075
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  new, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  mut, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0005
Next Token : x, Posbility: 0.0179
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0013
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : [0], Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0002
Next Token : [, Posbility: 0.0002
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :           , Posbility: 0.0005
Next Token :         , Posbility: 0.0012
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0157
Next Token : (, Posbility: 0.0259
Next Token : match, Posbility: 0.0259
Next Token : x, Posbility: 0.0332
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0008
Next Token :  new, Posbility: 0.0013
Next Token :  rest, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : remainder, Posbility: 0.0009
Next Token : z, Posbility: 0.0012
Next Token : (, Posbility: 0.0019
Next Token : y, Posbility: 0.0024
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : ', Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  remove, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ~, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ::, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : [1:, Posbility: 0.0009
Next Token : [, Posbility: 0.0010
Next Token : [1], Posbility: 0.0019
Next Token : [1:], Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :           , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : [, Posbility: 0.0015
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  mut, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0010
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0012
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0002
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0009
Next Token :           , Posbility: 0.0015
Next Token :         , Posbility: 0.0017
Next Token :      , Posbility: 0.0096
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0325
Next Token : (, Posbility: 0.0608
Next Token : [, Posbility: 0.0608
Next Token : x, Posbility: 0.0781
Next Token : let, Posbility: 0.6523
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0081
Next Token :  result, Posbility: 0.0091
Next Token :  res, Posbility: 0.0150
Next Token :  rec, Posbility: 0.1108
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0151
Next Token : r, Posbility: 0.0151
Next Token : y, Posbility: 0.0220
Next Token : z, Posbility: 0.0283
Next Token : x, Posbility: 0.8281
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token : ,, Posbility: 0.0042
Next Token : ', Posbility: 0.0042
Next Token : s, Posbility: 0.0649
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0005
Next Token :  match, Posbility: 0.0017
Next Token : 
, Posbility: 0.0019
Next Token :  [, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0038
Next Token : y, Posbility: 0.0081
Next Token : (, Posbility: 0.0134
Next Token : divide, Posbility: 0.0221
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0055
Next Token :  , Posbility: 0.0103
Next Token :  +, Posbility: 0.0132
Next Token : ::, Posbility: 0.0315
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0004
Next Token : [0],, Posbility: 0.0004
Next Token : [1], Posbility: 0.0009
Next Token : [, Posbility: 0.0041
Next Token : [0], Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  and, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0003
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token : [, Posbility: 0.0015
Next Token : (, Posbility: 0.0015
Next Token : match, Posbility: 0.0015
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  new, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0003
Next Token : x, Posbility: 0.0085
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : divide, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0013
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.0012
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0050
Next Token : (, Posbility: 0.0065
Next Token : [, Posbility: 0.0065
Next Token : x, Posbility: 0.0137
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  rest, Posbility: 0.0002
Next Token :  new, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : remainder, Posbility: 0.0003
Next Token : z, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ::, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0001
Next Token : [1:, Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : [1], Posbility: 0.0003
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : [, Posbility: 0.0010
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0007
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0010
Next Token :     , Posbility: 0.0010
Next Token :         , Posbility: 0.0013
Next Token :      , Posbility: 0.0124
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0222
Next Token : (, Posbility: 0.0469
Next Token : x, Posbility: 0.0532
Next Token : [, Posbility: 0.0603
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0059
Next Token :  result, Posbility: 0.0076
Next Token :  res, Posbility: 0.0110
Next Token :  rec, Posbility: 0.0723
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : r, Posbility: 0.0055
Next Token : (, Posbility: 0.0080
Next Token : y, Posbility: 0.0091
Next Token : z, Posbility: 0.0132
Next Token : x, Posbility: 0.9258
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0011
Next Token : ,, Posbility: 0.0011
Next Token : ', Posbility: 0.0015
Next Token : s, Posbility: 0.0157
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [], Posbility: 0.0003
Next Token :  match, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0027
Next Token : y, Posbility: 0.0031
Next Token : (, Posbility: 0.0058
Next Token : divide, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0008
Next Token :  , Posbility: 0.0019
Next Token :  +, Posbility: 0.0028
Next Token : ::, Posbility: 0.0066
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0002
Next Token : [-1], Posbility: 0.0003
Next Token : [1], Posbility: 0.0005
Next Token : [, Posbility: 0.0022
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :           , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : match, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : [, Posbility: 0.0008
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  mut, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0008
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : [, Posbility: 0.0051
Next Token : x, Posbility: 0.0108
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  new, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0008
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0008
Next Token :     , Posbility: 0.0010
Next Token :         , Posbility: 0.0011
Next Token :      , Posbility: 0.0159
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0183
Next Token : (, Posbility: 0.0388
Next Token : x, Posbility: 0.0439
Next Token : [, Posbility: 0.0498
Next Token : let, Posbility: 0.7773
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0038
Next Token :  result, Posbility: 0.0043
Next Token :  res, Posbility: 0.0056
Next Token :  rec, Posbility: 0.0364
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : r, Posbility: 0.0034
Next Token : (, Posbility: 0.0050
Next Token : y, Posbility: 0.0057
Next Token : z, Posbility: 0.0082
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token : ', Posbility: 0.0007
Next Token : s, Posbility: 0.0067
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0013
Next Token : y, Posbility: 0.0015
Next Token : (, Posbility: 0.0028
Next Token : divide, Posbility: 0.0028
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token :  +, Posbility: 0.0013
Next Token : ::, Posbility: 0.0036
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token : [-1], Posbility: 0.0002
Next Token : [1], Posbility: 0.0003
Next Token : [, Posbility: 0.0013
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : match, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : [, Posbility: 0.0006
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0017
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : divide, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0017
Next Token : (, Posbility: 0.0031
Next Token : [, Posbility: 0.0040
Next Token : x, Posbility: 0.0085
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  new, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  remove, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0004
Next Token : [, Posbility: 0.0008
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :     , Posbility: 0.0008
Next Token :         , Posbility: 0.0009
Next Token :      , Posbility: 0.0140
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0152
Next Token : (, Posbility: 0.0283
Next Token : x, Posbility: 0.0364
Next Token : [, Posbility: 0.0364
Next Token : let, Posbility: 0.8281
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0027
Next Token :  a, Posbility: 0.0031
Next Token :  res, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0226
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : r, Posbility: 0.0019
Next Token : (, Posbility: 0.0035
Next Token : y, Posbility: 0.0040
Next Token : z, Posbility: 0.0051
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : ', Posbility: 0.0005
Next Token : s, Posbility: 0.0036
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0008
Next Token : y, Posbility: 0.0009
Next Token : divide, Posbility: 0.0015
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  +, Posbility: 0.0006
Next Token : ::, Posbility: 0.0013
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0001
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0002
Next Token : [, Posbility: 0.0008
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : match, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0005
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0017
Next Token : (, Posbility: 0.0035
Next Token : [, Posbility: 0.0040
Next Token : x, Posbility: 0.0085
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  new, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  remove, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0007
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :     , Posbility: 0.0006
Next Token :         , Posbility: 0.0007
Next Token :      , Posbility: 0.0124
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0109
Next Token : (, Posbility: 0.0260
Next Token : x, Posbility: 0.0294
Next Token : [, Posbility: 0.0294
Next Token : let, Posbility: 0.8633
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0019
Next Token :  a, Posbility: 0.0021
Next Token :  res, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0012
Next Token : (, Posbility: 0.0022
Next Token : y, Posbility: 0.0028
Next Token : z, Posbility: 0.0028
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token : s, Posbility: 0.0025
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0005
Next Token : List, Posbility: 0.0005
Next Token : divide, Posbility: 0.0009
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0], Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  +, Posbility: 0.0005
Next Token : ::, Posbility: 0.0006
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0006
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0007
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0017
Next Token : (, Posbility: 0.0028
Next Token : [, Posbility: 0.0035
Next Token : x, Posbility: 0.0075
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  new, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  remove, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0005
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : yy, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 0.0006
Next Token :      , Posbility: 0.0124
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0087
Next Token : (, Posbility: 0.0183
Next Token : [, Posbility: 0.0266
Next Token : x, Posbility: 0.0302
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0010
Next Token :  res, Posbility: 0.0012
Next Token :  a, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0010
Next Token : (, Posbility: 0.0017
Next Token : y, Posbility: 0.0017
Next Token : z, Posbility: 0.0022
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token : s, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : divide, Posbility: 0.0008
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ::, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0004
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  result, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0007
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0010
Next Token : (, Posbility: 0.0031
Next Token : [, Posbility: 0.0040
Next Token : x, Posbility: 0.0085
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  new, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0005
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :      , Posbility: 0.0097
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0069
Next Token : (, Posbility: 0.0187
Next Token : [, Posbility: 0.0187
Next Token : x, Posbility: 0.0272
Next Token : let, Posbility: 0.8984
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  result, Posbility: 0.0006
Next Token :  a, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : y, Posbility: 0.0013
Next Token : (, Posbility: 0.0013
Next Token : z, Posbility: 0.0013
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0002
Next Token : divide, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0001
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0004
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0008
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0010
Next Token : (, Posbility: 0.0024
Next Token : [, Posbility: 0.0035
Next Token : x, Posbility: 0.0075
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  new, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : divide, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:], Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0004
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : yy, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0061
Next Token : (, Posbility: 0.0147
Next Token : [, Posbility: 0.0167
Next Token : x, Posbility: 0.0276
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0004
Next Token :  result, Posbility: 0.0004
Next Token :  a, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0007
Next Token : (, Posbility: 0.0010
Next Token : z, Posbility: 0.0010
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : divide, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : [0], Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0008
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0012
Next Token : (, Posbility: 0.0024
Next Token : [, Posbility: 0.0031
Next Token : x, Posbility: 0.0059
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  new, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:], Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : yy, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [2:, Posbility: 0.0000
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0001
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :      , Posbility: 0.0110
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0055
Next Token : (, Posbility: 0.0117
Next Token : [, Posbility: 0.0170
Next Token : x, Posbility: 0.0193
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  result, Posbility: 0.0003
Next Token :  a, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : z, Posbility: 0.0007
Next Token : y, Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : divide, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : [0], Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0002
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : yy, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0007
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : match, Posbility: 0.0010
Next Token : (, Posbility: 0.0024
Next Token : [, Posbility: 0.0031
Next Token : x, Posbility: 0.0066
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  res, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [1:, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [:-1], Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : [1:], Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to divide two lists element wise. *)
let rec divide x y =
  match x, y with
  | [], [] -> []
  | x::xs, y::ys ->
      let x = x::xs in
      let y = y::ys in
      let xs = x::xs in
      let ys = y::ys in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let ys = ys[1:] in
      let x = xs[0] in
      let y = ys[0] in
      let xs = xs[1:] in
      let 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>