code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0111
Next Token :  sum, Posbility: 0.0723
Next Token :  get, Posbility: 0.1738
Next Token :  , Posbility: 0.2227
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0173
Next Token :  loop, Posbility: 0.0325
Next Token :  get, Posbility: 0.0879
Next Token :  sum, Posbility: 0.2109
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0293
Next Token : helper, Posbility: 0.0547
Next Token : add, Posbility: 0.1689
Next Token : digit, Posbility: 0.1914
Next Token : digits, Posbility: 0.2773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0078
Next Token : -, Posbility: 0.0078
Next Token :  , Posbility: 0.2285
Next Token : _, Posbility: 0.2598
Next Token :  =, Posbility: 0.4258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fn, Posbility: 0.0190
Next Token :  , Posbility: 0.0457
Next Token :  fun, Posbility: 0.0457
Next Token : 
, Posbility: 0.1592
Next Token :  function, Posbility: 0.7109
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0054
Next Token :  [], Posbility: 0.0070
Next Token : (, Posbility: 0.0148
Next Token :  , Posbility: 0.2969
Next Token : 
, Posbility: 0.6250
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0117
Next Token :         , Posbility: 0.0132
Next Token : |, Posbility: 0.0762
Next Token :     , Posbility: 0.1260
Next Token :   , Posbility: 0.7227
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0039
Next Token : let, Posbility: 0.0044
Next Token : n, Posbility: 0.0044
Next Token : (, Posbility: 0.0120
Next Token : |, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0053
Next Token :  1, Posbility: 0.0088
Next Token :  , Posbility: 0.1768
Next Token :  [], Posbility: 0.2910
Next Token :  0, Posbility: 0.4785
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0075
Next Token :   , Posbility: 0.0179
Next Token :  |, Posbility: 0.0261
Next Token :  =>, Posbility: 0.0295
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0007
Next Token : _, Posbility: 0.0017
Next Token : :, Posbility: 0.0096
Next Token : ::, Posbility: 0.2197
Next Token : ->, Posbility: 0.7656
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0115
Next Token :  1, Posbility: 0.0312
Next Token :  , Posbility: 0.0850
Next Token :  [], Posbility: 0.2314
Next Token :  0, Posbility: 0.6289
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0013
Next Token :   , Posbility: 0.0039
Next Token :  |, Posbility: 0.0074
Next Token :  , Posbility: 0.0095
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token : |, Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : let, Posbility: 0.0006
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0052
Next Token :  k, Posbility: 0.0141
Next Token :  i, Posbility: 0.0630
Next Token :  1, Posbility: 0.1040
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0222
Next Token : _, Posbility: 0.0879
Next Token : x, Posbility: 0.1455
Next Token : d, Posbility: 0.2715
Next Token : n, Posbility: 0.3945
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0085
Next Token :  +, Posbility: 0.0096
Next Token : ::, Posbility: 0.0159
Next Token :  when, Posbility: 0.0625
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : :, Posbility: 0.0005
Next Token : if, Posbility: 0.0155
Next Token : ::, Posbility: 0.0226
Next Token : ->, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0081
Next Token :  (1, Posbility: 0.0221
Next Token : 
, Posbility: 0.0601
Next Token :  1, Posbility: 0.4453
Next Token :  , Posbility: 0.4453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0124
Next Token : if, Posbility: 0.0554
Next Token : digits, Posbility: 0.0806
Next Token : (, Posbility: 0.1177
Next Token : n, Posbility: 0.6758
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0879
Next Token :  , Posbility: 0.0879
Next Token :  %, Posbility: 0.0879
Next Token :  *, Posbility: 0.1855
Next Token :  +, Posbility: 0.4453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0038
Next Token :  ((, Posbility: 0.0063
Next Token : 
, Posbility: 0.0081
Next Token :  1, Posbility: 0.0220
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0035
Next Token : digit, Posbility: 0.0073
Next Token : Digit, Posbility: 0.0094
Next Token : (, Posbility: 0.1143
Next Token : digits, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0033
Next Token :  (1, Posbility: 0.0132
Next Token : (, Posbility: 0.0150
Next Token :  ((, Posbility: 0.0248
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits 
 score:False
Error type: noerr
---------------------------
Next Token : floor, Posbility: 0.0005
Next Token : digits, Posbility: 0.0008
Next Token : div, Posbility: 0.0021
Next Token : n, Posbility: 0.0228
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Div, Posbility: 0.0208
Next Token : div, Posbility: 0.0388
Next Token : Int, Posbility: 0.0388
Next Token : int, Posbility: 0.0439
Next Token : n, Posbility: 0.7812
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0038
Next Token : -1), Posbility: 0.0071
Next Token :  %, Posbility: 0.0193
Next Token : /, Posbility: 0.0317
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : DIV, Posbility: 0.0037
Next Token : //, Posbility: 0.0273
Next Token : -, Posbility: 0.0654
Next Token : div, Posbility: 0.0957
Next Token : /, Posbility: 0.8008
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0023
Next Token :  , Posbility: 0.0038
Next Token :  10, Posbility: 0.0282
Next Token :  100), Posbility: 0.0282
Next Token :  10), Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0096
Next Token :  , Posbility: 0.0157
Next Token :  %, Posbility: 0.0334
Next Token : 

, Posbility: 0.4062
Next Token : 
, Posbility: 0.5234
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)

 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0248
Next Token : %, Posbility: 0.0361
Next Token : end, Posbility: 0.0811
Next Token :   , Posbility: 0.1514
Next Token : let, Posbility: 0.2080
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0228
Next Token :  acc, Posbility: 0.0332
Next Token :  sum, Posbility: 0.1157
Next Token :  , Posbility: 0.2773
Next Token :  rec, Posbility: 0.4043
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0299
Next Token :  get, Posbility: 0.0383
Next Token :  loop, Posbility: 0.0383
Next Token :  sum, Posbility: 0.2500
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dig, Posbility: 0.0184
Next Token : helper, Posbility: 0.0237
Next Token : digit, Posbility: 0.0938
Next Token : add, Posbility: 0.1201
Next Token : digits, Posbility: 0.4766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0315
Next Token : 0, Posbility: 0.0403
Next Token :  , Posbility: 0.0518
Next Token : 2, Posbility: 0.1240
Next Token : _, Posbility: 0.6289
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0505
Next Token : sum, Posbility: 0.0571
Next Token : opt, Posbility: 0.0649
Next Token : iter, Posbility: 0.0732
Next Token : of, Posbility: 0.1211
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0009
Next Token :  int, Posbility: 0.0009
Next Token :  , Posbility: 0.0173
Next Token :  =, Posbility: 0.0286
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nat, Posbility: 0.0376
Next Token : number, Posbility: 0.0483
Next Token : sum, Posbility: 0.0903
Next Token : n, Posbility: 0.1680
Next Token : int, Posbility: 0.2773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0183
Next Token : _, Posbility: 0.0302
Next Token :  i, Posbility: 0.0386
Next Token :  , Posbility: 0.3672
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0021
Next Token :  fun, Posbility: 0.0201
Next Token : 
, Posbility: 0.0547
Next Token :  , Posbility: 0.2451
Next Token :  function, Posbility: 0.6680
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  num, Posbility: 0.0046
Next Token : (, Posbility: 0.0059
Next Token :  int, Posbility: 0.0630
Next Token :  , Posbility: 0.2197
Next Token : 
, Posbility: 0.6797
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : let, Posbility: 0.0006
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0003
Next Token : {, Posbility: 0.0008
Next Token : (, Posbility: 0.0015
Next Token : let, Posbility: 0.0041
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0084
Next Token :  [], Posbility: 0.0137
Next Token :  i, Posbility: 0.0137
Next Token :  , Posbility: 0.1680
Next Token :  0, Posbility: 0.7500
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0021
Next Token :  =>, Posbility: 0.0024
Next Token :  |, Posbility: 0.0040
Next Token : n, Posbility: 0.0074
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : :, Posbility: 0.0005
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0050
Next Token :  1, Posbility: 0.0136
Next Token :  , Posbility: 0.1006
Next Token :  [], Posbility: 0.1006
Next Token :  0, Posbility: 0.7422
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  (*, Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0022
Next Token :  k, Posbility: 0.0061
Next Token :  1, Posbility: 0.0165
Next Token :  i, Posbility: 0.0449
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0089
Next Token : d, Posbility: 0.0147
Next Token : _, Posbility: 0.0189
Next Token : x, Posbility: 0.0243
Next Token : n, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  |, Posbility: 0.0008
Next Token :  >=, Posbility: 0.0008
Next Token :  when, Posbility: 0.0201
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : ::, Posbility: 0.0006
Next Token : if, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0036
Next Token :  (1, Posbility: 0.0036
Next Token : 
, Posbility: 0.0439
Next Token :  1, Posbility: 0.0439
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0055
Next Token : (, Posbility: 0.0245
Next Token : if, Posbility: 0.0277
Next Token : n, Posbility: 0.2051
Next Token : digits, Posbility: 0.7148
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0034
Next Token : (, Posbility: 0.0072
Next Token :  ((, Posbility: 0.0251
Next Token : _, Posbility: 0.1128
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits 
 score:False
Error type: noerr
---------------------------
Next Token : abs, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : floor, Posbility: 0.0002
Next Token : n, Posbility: 0.4375
Next Token : (, Posbility: 0.5625
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : rem, Posbility: 0.0084
Next Token : abs, Posbility: 0.0156
Next Token : int, Posbility: 0.0330
Next Token : Int, Posbility: 0.0425
Next Token : n, Posbility: 0.8516
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0139
Next Token :  as, Posbility: 0.0178
Next Token : ), Posbility: 0.0332
Next Token :  , Posbility: 0.2451
Next Token :  %, Posbility: 0.6680
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1000), Posbility: 0.0039
Next Token :  , Posbility: 0.0105
Next Token :  10, Posbility: 0.0173
Next Token :  100), Posbility: 0.0173
Next Token :  10), Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0337
Next Token :  , Posbility: 0.0383
Next Token :  +, Posbility: 0.1177
Next Token : 

, Posbility: 0.3203
Next Token : 
, Posbility: 0.4668
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0075
Next Token : val, Posbility: 0.0096
Next Token : (, Posbility: 0.0217
Next Token : in, Posbility: 0.0261
Next Token : let, Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0189
Next Token :  int, Posbility: 0.0515
Next Token :  sum, Posbility: 0.0664
Next Token :  , Posbility: 0.2041
Next Token :  rec, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0283
Next Token :  get, Posbility: 0.0466
Next Token :  int, Posbility: 0.0598
Next Token :  sum, Posbility: 0.2090
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0067
Next Token : dig, Posbility: 0.0087
Next Token : digit, Posbility: 0.0388
Next Token : add, Posbility: 0.0498
Next Token : digits, Posbility: 0.7773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0008
Next Token :  =, Posbility: 0.0013
Next Token : 2, Posbility: 0.0022
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0023
Next Token : list, Posbility: 0.0030
Next Token : rec, Posbility: 0.0034
Next Token : sum, Posbility: 0.0151
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  =, Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : float, Posbility: 0.0332
Next Token : positive, Posbility: 0.0332
Next Token : string, Posbility: 0.0903
Next Token : nat, Posbility: 0.1025
Next Token : int, Posbility: 0.4062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0167
Next Token :  , Posbility: 0.0275
Next Token : s, Posbility: 0.0747
Next Token : 2, Posbility: 0.0962
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0369
Next Token : 2, Posbility: 0.0474
Next Token : opt, Posbility: 0.0688
Next Token : rec, Posbility: 0.0688
Next Token : list, Posbility: 0.0889
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0008
Next Token :  l, Posbility: 0.0011
Next Token : _, Posbility: 0.0101
Next Token :  , Posbility: 0.0742
Next Token :  =, Posbility: 0.9062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0028
Next Token :  fun, Posbility: 0.0162
Next Token :  , Posbility: 0.0344
Next Token : 
, Posbility: 0.0566
Next Token :  function, Posbility: 0.8867
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0023
Next Token :  int, Posbility: 0.0029
Next Token :  list, Posbility: 0.0061
Next Token :  , Posbility: 0.0659
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : let, Posbility: 0.0004
Next Token :    , Posbility: 0.0007
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0005
Next Token : match, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : let, Posbility: 0.0179
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0038
Next Token :  [, Posbility: 0.0062
Next Token :  0, Posbility: 0.0103
Next Token :  , Posbility: 0.0461
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  as, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.0065
Next Token :  [], Posbility: 0.0178
Next Token :  0, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0003
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0076
Next Token :  rest, Posbility: 0.0076
Next Token :  i, Posbility: 0.0206
Next Token :  [, Posbility: 0.0437
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0396
Next Token : hd, Posbility: 0.0952
Next Token : h, Posbility: 0.1572
Next Token : x, Posbility: 0.1777
Next Token : n, Posbility: 0.4258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0031
Next Token : 1, Posbility: 0.0045
Next Token : 0, Posbility: 0.0058
Next Token : ::, Posbility: 0.1162
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : :, Posbility: 0.0011
Next Token : ->, Posbility: 0.0330
Next Token : ::, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0034
Next Token :  list, Posbility: 0.0151
Next Token :  l, Posbility: 0.0248
Next Token :  rest, Posbility: 0.1113
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0220
Next Token : nl, Posbility: 0.0220
Next Token : x, Posbility: 0.0986
Next Token : n, Posbility: 0.2090
Next Token : ns, Posbility: 0.5664
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0010
Next Token :  =, Posbility: 0.0012
Next Token :   , Posbility: 0.0012
Next Token :  =>, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : ::, Posbility: 0.0010
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0023
Next Token :  (1, Posbility: 0.0023
Next Token :  1, Posbility: 0.0170
Next Token : 
, Posbility: 0.0459
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0044
Next Token : let, Posbility: 0.0057
Next Token : (, Posbility: 0.0198
Next Token : n, Posbility: 0.1143
Next Token : digits, Posbility: 0.8438
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0008
Next Token :  (*, Posbility: 0.0023
Next Token :  ((, Posbility: 0.0048
Next Token :  , Posbility: 0.4316
Next Token : _, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : list, Posbility: 0.0002
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : all, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : first, Posbility: 0.0000
Next Token : list, Posbility: 0.0010
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0021
Next Token :  (*, Posbility: 0.0058
Next Token :  ((, Posbility: 0.0058
Next Token : _, Posbility: 0.1167
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : ls, Posbility: 0.0001
Next Token : ns, Posbility: 0.0014
Next Token : n, Posbility: 0.1475
Next Token : (, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : head, Posbility: 0.0179
Next Token : int, Posbility: 0.0204
Next Token : Int, Posbility: 0.0552
Next Token : List, Posbility: 0.0913
Next Token : n, Posbility: 0.6719
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0693
Next Token : ), Posbility: 0.1143
Next Token :  +, Posbility: 0.1885
Next Token :  , Posbility: 0.2412
Next Token :  %, Posbility: 0.3105
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0014
Next Token :  , Posbility: 0.0039
Next Token :  100), Posbility: 0.0050
Next Token :  10, Posbility: 0.0369
Next Token :  10), Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10)
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0033
Next Token :  ++, Posbility: 0.0042
Next Token :  *, Posbility: 0.0273
Next Token :  , Posbility: 0.3320
Next Token :  +, Posbility: 0.6211
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0006
Next Token :  sum, Posbility: 0.0040
Next Token : 
, Posbility: 0.0045
Next Token :  10, Posbility: 0.0058
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : 5, Posbility: 0.0004
Next Token : n, Posbility: 0.0045
Next Token : (, Posbility: 0.0201
Next Token : digits, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0002
Next Token :  *, Posbility: 0.0005
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_
 score:False
Error type: noerr
---------------------------
Next Token : sum, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : list, Posbility: 0.0002
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : array, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : of, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list 
 score:False
Error type: noerr
---------------------------
Next Token : ks, Posbility: 0.0002
Next Token : ls, Posbility: 0.0003
Next Token : n, Posbility: 0.0033
Next Token : (, Posbility: 0.1816
Next Token : ns, Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0027
Next Token :  , Posbility: 0.0119
Next Token : ), Posbility: 0.0153
Next Token : 

, Posbility: 0.3066
Next Token : 
, Posbility: 0.6523
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0080
Next Token : end, Posbility: 0.0097
Next Token :   , Posbility: 0.0117
Next Token : (, Posbility: 0.0337
Next Token : let, Posbility: 0.7695
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0284
Next Token :  int, Posbility: 0.0322
Next Token :  sum, Posbility: 0.0413
Next Token :  , Posbility: 0.1631
Next Token :  rec, Posbility: 0.6484
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0154
Next Token :  int, Posbility: 0.0288
Next Token :  get, Posbility: 0.0371
Next Token :  sum, Posbility: 0.1660
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0040
Next Token : dig, Posbility: 0.0040
Next Token : digit, Posbility: 0.0201
Next Token : add, Posbility: 0.0332
Next Token : digits, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0007
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0014
Next Token : from, Posbility: 0.0018
Next Token : sum, Posbility: 0.0064
Next Token : list, Posbility: 0.0106
Next Token : of, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : float, Posbility: 0.0130
Next Token : nat, Posbility: 0.0214
Next Token : list, Posbility: 0.0513
Next Token : string, Posbility: 0.0747
Next Token : int, Posbility: 0.7070
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0044
Next Token : 64, Posbility: 0.0050
Next Token :  =, Posbility: 0.0064
Next Token : s, Posbility: 0.0222
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sum, Posbility: 0.0193
Next Token : array, Posbility: 0.0361
Next Token : opt, Posbility: 0.0464
Next Token : string, Posbility: 0.0674
Next Token : list, Posbility: 0.4980
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0096
Next Token :  , Posbility: 0.0109
Next Token : ', Posbility: 0.0232
Next Token : 2, Posbility: 0.0713
Next Token : _, Posbility: 0.8672
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0337
Next Token : sum, Posbility: 0.0491
Next Token : rec, Posbility: 0.0491
Next Token : of, Posbility: 0.0557
Next Token : opt, Posbility: 0.1514
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0016
Next Token : s, Posbility: 0.0023
Next Token : _, Posbility: 0.0172
Next Token :  , Posbility: 0.0283
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  fun, Posbility: 0.0051
Next Token :  , Posbility: 0.0084
Next Token : 
, Posbility: 0.0177
Next Token :  function, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0002
Next Token : match, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : let, Posbility: 0.0032
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0023
Next Token :  [, Posbility: 0.0064
Next Token :  , Posbility: 0.0173
Next Token :  None, Posbility: 0.0173
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  as, Posbility: 0.0024
Next Token :  |, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  error, Posbility: 0.0233
Next Token :  -1, Posbility: 0.0635
Next Token :  , Posbility: 0.1729
Next Token :  0, Posbility: 0.1729
Next Token :  None, Posbility: 0.4688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  (*, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0014
Next Token :  None, Posbility: 0.0031
Next Token :  0, Posbility: 0.0084
Next Token :  Some, Posbility: 0.0138
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ns, Posbility: 0.0008
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0066
Next Token : _, Posbility: 0.0074
Next Token : n, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : 1, Posbility: 0.0004
Next Token : 0, Posbility: 0.0004
Next Token : ::, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : :, Posbility: 0.0004
Next Token : ->, Posbility: 0.0015
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  rest, Posbility: 0.0007
Next Token :  [], Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : nl, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : n, Posbility: 0.0005
Next Token : _, Posbility: 0.0041
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0042
Next Token :  match, Posbility: 0.0068
Next Token : 
, Posbility: 0.1377
Next Token :  , Posbility: 0.2266
Next Token :  Some, Posbility: 0.6172
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0030
Next Token :  (((, Posbility: 0.0063
Next Token : (, Posbility: 0.0151
Next Token :  ((, Posbility: 0.0410
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ([, Posbility: 0.0003
Next Token : n, Posbility: 0.0059
Next Token : digits, Posbility: 0.1182
Next Token : (, Posbility: 0.8750
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Digit, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0017
Next Token : n, Posbility: 0.0140
Next Token : digits, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token :  +, Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : from, Posbility: 0.0000
Next Token : to, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token : it, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token :  +, Posbility: 0.0008
Next Token : _, Posbility: 0.0757
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : 10000, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : n, Posbility: 0.0046
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token : %, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  100), Posbility: 0.0001
Next Token :  10, Posbility: 0.0293
Next Token :  10), Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : ,, Posbility: 0.0052
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : from, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.1191
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ls, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ))), Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : )), Posbility: 0.0028
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token :  (*, Posbility: 0.0020
Next Token : 

, Posbility: 0.2910
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0054
Next Token : in, Posbility: 0.0084
Next Token : val, Posbility: 0.0089
Next Token : (, Posbility: 0.0156
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0058
Next Token :  sum, Posbility: 0.0084
Next Token :  int, Posbility: 0.0156
Next Token :  , Posbility: 0.0796
Next Token :  rec, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0141
Next Token :  get, Posbility: 0.0232
Next Token :  int, Posbility: 0.0264
Next Token :  sum, Posbility: 0.0918
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0041
Next Token : dig, Posbility: 0.0041
Next Token : digit, Posbility: 0.0143
Next Token : add, Posbility: 0.0162
Next Token : digits, Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0008
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0024
Next Token : sum, Posbility: 0.0039
Next Token : list, Posbility: 0.0065
Next Token : opt, Posbility: 0.0065
Next Token : of, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : float, Posbility: 0.0153
Next Token : nat, Posbility: 0.0153
Next Token : list, Posbility: 0.0251
Next Token : string, Posbility: 0.0415
Next Token : int, Posbility: 0.8320
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0017
Next Token : 2, Posbility: 0.0017
Next Token :  =, Posbility: 0.0040
Next Token : s, Posbility: 0.0108
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0148
Next Token : option, Posbility: 0.0148
Next Token : seq, Posbility: 0.0167
Next Token : opt, Posbility: 0.1406
Next Token : list, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0008
Next Token :  , Posbility: 0.0073
Next Token : 2, Posbility: 0.0121
Next Token :  =, Posbility: 0.0137
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0222
Next Token : seq, Posbility: 0.0251
Next Token : all, Posbility: 0.0415
Next Token : list, Posbility: 0.0603
Next Token : opt, Posbility: 0.3477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0129
Next Token : ', Posbility: 0.0146
Next Token :  =, Posbility: 0.0352
Next Token : 2, Posbility: 0.2012
Next Token : _, Posbility: 0.7031
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0332
Next Token : rec, Posbility: 0.0427
Next Token : list, Posbility: 0.0703
Next Token : opt, Posbility: 0.0796
Next Token : ex, Posbility: 0.1318
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0027
Next Token : 1, Posbility: 0.0031
Next Token :  , Posbility: 0.0084
Next Token :  =, Posbility: 0.1157
Next Token : n, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  err, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token : _, Posbility: 0.0021
Next Token :  , Posbility: 0.0178
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  fun, Posbility: 0.0024
Next Token :  , Posbility: 0.0083
Next Token : 
, Posbility: 0.0256
Next Token :  function, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token : *, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : try, Posbility: 0.0007
Next Token : let, Posbility: 0.0028
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0015
Next Token :  [, Posbility: 0.0015
Next Token :  None, Posbility: 0.0040
Next Token :  , Posbility: 0.0109
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  as, Posbility: 0.0004
Next Token :  |, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  none, Posbility: 0.0023
Next Token :  Some, Posbility: 0.0168
Next Token :  , Posbility: 0.0459
Next Token :  None, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : Exception, Posbility: 0.0005
Next Token : ., Posbility: 0.0007
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0003
Next Token :  ex, Posbility: 0.0005
Next Token :  0, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0012
Next Token : _, Posbility: 0.0059
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  err, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  rest, Posbility: 0.0001
Next Token :  [], Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : es, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0019
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0054
Next Token :  match, Posbility: 0.1079
Next Token : 
, Posbility: 0.2930
Next Token :  , Posbility: 0.2930
Next Token :  Some, Posbility: 0.2930
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token : (, Posbility: 0.0045
Next Token :  ((, Posbility: 0.0050
Next Token : _, Posbility: 0.0199
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : try, Posbility: 0.0004
Next Token : n, Posbility: 0.0015
Next Token : digits, Posbility: 0.0041
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0017
Next Token : 
, Posbility: 0.0019
Next Token : match, Posbility: 0.0040
Next Token : try, Posbility: 0.0096
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0474
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Exception, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : (`, Posbility: 0.0000
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : Int, Posbility: 0.0001
Next Token : try, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  100), Posbility: 0.0001
Next Token :  10, Posbility: 0.0179
Next Token :  10), Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token : ,, Posbility: 0.0067
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0001
Next Token : try, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : exc, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : ex, Posbility: 0.0019
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ex, Posbility: 0.0003
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : exp, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_ex
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ls, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : )., Posbility: 0.0004
Next Token : ,, Posbility: 0.0022
Next Token : )), Posbility: 0.0041
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0027
Next Token :  (*, Posbility: 0.0051
Next Token :  in, Posbility: 0.0051
Next Token : 

, Posbility: 0.3145
Next Token : 
, Posbility: 0.6641
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0035
Next Token : ```, Posbility: 0.0057
Next Token : (, Posbility: 0.0095
Next Token : in, Posbility: 0.0188
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0036
Next Token :  sum, Posbility: 0.0046
Next Token :  int, Posbility: 0.0077
Next Token :  , Posbility: 0.0728
Next Token :  rec, Posbility: 0.8867
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0124
Next Token :  int, Posbility: 0.0159
Next Token :  get, Posbility: 0.0179
Next Token :  sum, Posbility: 0.0488
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0023
Next Token : opt, Posbility: 0.0038
Next Token : add, Posbility: 0.0080
Next Token : digit, Posbility: 0.0080
Next Token : digits, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0024
Next Token : sum, Posbility: 0.0024
Next Token : opt, Posbility: 0.0065
Next Token : list, Posbility: 0.0107
Next Token : of, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nat, Posbility: 0.0060
Next Token : float, Posbility: 0.0100
Next Token : list, Posbility: 0.0165
Next Token : string, Posbility: 0.0271
Next Token : int, Posbility: 0.8984
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.0046
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0094
Next Token : seq, Posbility: 0.0121
Next Token : ex, Posbility: 0.0176
Next Token : opt, Posbility: 0.1011
Next Token : list, Posbility: 0.7461
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0004
Next Token :  , Posbility: 0.0031
Next Token : 2, Posbility: 0.0040
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0097
Next Token : rec, Posbility: 0.0205
Next Token : list, Posbility: 0.0264
Next Token : opt, Posbility: 0.3203
Next Token : ex, Posbility: 0.3633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ns, Posbility: 0.0003
Next Token :  =, Posbility: 0.0010
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0107
Next Token : _, Posbility: 0.0177
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  fun, Posbility: 0.0008
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.0067
Next Token :  function, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : module, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  0, Posbility: 0.0005
Next Token :  , Posbility: 0.0032
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0193
Next Token :  Some, Posbility: 0.0193
Next Token :  , Posbility: 0.1426
Next Token :  None, Posbility: 0.3887
Next Token :  0, Posbility: 0.3887
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token : L, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  0, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : _, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : es, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  1, Posbility: 0.0014
Next Token :  match, Posbility: 0.0024
Next Token : 
, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : let, Posbility: 0.0040
Next Token : try, Posbility: 0.0040
Next Token : n, Posbility: 0.0066
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0757
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int 
 score:False
Error type: noerr
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (0), Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  mod, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  100), Posbility: 0.0001
Next Token :  10, Posbility: 0.0009
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :  *, Posbility: 0.0006
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : ex, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ex, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: noerr
---------------------------
Next Token : ext, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : exc, Posbility: 0.0001
Next Token : opt, Posbility: 0.0025
Next Token : ex, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_ex
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn 
 score:False
Error type: noerr
---------------------------
Next Token : ls, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token :  in, Posbility: 0.0062
Next Token : 

, Posbility: 0.1807
Next Token : 
, Posbility: 0.8086
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0033
Next Token : {, Posbility: 0.0089
Next Token : (, Posbility: 0.0156
Next Token : in, Posbility: 0.0654
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0029
Next Token :  main, Posbility: 0.0048
Next Token :  int, Posbility: 0.0069
Next Token :  , Posbility: 0.0581
Next Token :  rec, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0060
Next Token :  int, Posbility: 0.0077
Next Token :  get, Posbility: 0.0087
Next Token :  sum, Posbility: 0.0183
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0016
Next Token : opt, Posbility: 0.0030
Next Token : add, Posbility: 0.0039
Next Token : digit, Posbility: 0.0039
Next Token : digits, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0009
Next Token : int, Posbility: 0.0011
Next Token : list, Posbility: 0.0051
Next Token : opt, Posbility: 0.0051
Next Token : of, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nat, Posbility: 0.0038
Next Token : float, Posbility: 0.0063
Next Token : list, Posbility: 0.0103
Next Token : string, Posbility: 0.0171
Next Token : int, Posbility: 0.9297
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token : s, Posbility: 0.0025
Next Token :  =, Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0057
Next Token : seq, Posbility: 0.0057
Next Token : ex, Posbility: 0.0156
Next Token : opt, Posbility: 0.0698
Next Token : list, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token : 2, Posbility: 0.0036
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0046
Next Token : int, Posbility: 0.0052
Next Token : list, Posbility: 0.0183
Next Token : opt, Posbility: 0.2227
Next Token : ex, Posbility: 0.6055
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nd, Posbility: 0.0004
Next Token : ne, Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token : ns, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0022
Next Token :  , Posbility: 0.0162
Next Token :  =, Posbility: 0.0209
Next Token : 2, Posbility: 0.0640
Next Token : _, Posbility: 0.8867
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0054
Next Token : rec, Posbility: 0.0146
Next Token : ex, Posbility: 0.0242
Next Token : list, Posbility: 0.0398
Next Token : opt, Posbility: 0.7070
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.0159
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  fun, Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.0059
Next Token :  function, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : module, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : let, Posbility: 0.0006
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  None, Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  as, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Optional, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  0, Posbility: 0.0009
Next Token :  Some, Posbility: 0.0025
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : NS, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0003
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.0176
Next Token :  , Posbility: 0.0176
Next Token :  Some, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  (((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token :  ((, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0017
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : bits, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : integer, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (0), Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token :  10, Posbility: 0.0002
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dots, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : for, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :  ex, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ext, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : exc, Posbility: 0.0001
Next Token : opt, Posbility: 0.0110
Next Token : ex, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : н, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ps, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ))), Posbility: 0.0001
Next Token : )), Posbility: 0.0046
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0009
Next Token :  in, Posbility: 0.0015
Next Token : 

, Posbility: 0.3184
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0045
Next Token : module, Posbility: 0.0075
Next Token : in, Posbility: 0.0179
Next Token : (, Posbility: 0.0204
Next Token : let, Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0012
Next Token :  sum, Posbility: 0.0018
Next Token :  int, Posbility: 0.0044
Next Token :  , Posbility: 0.0413
Next Token :  rec, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0084
Next Token :  get, Posbility: 0.0084
Next Token :  int, Posbility: 0.0107
Next Token :  sum, Posbility: 0.0200
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0011
Next Token : dig, Posbility: 0.0013
Next Token : add, Posbility: 0.0035
Next Token : digit, Posbility: 0.0035
Next Token : digits, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0009
Next Token : int, Posbility: 0.0012
Next Token : list, Posbility: 0.0031
Next Token : opt, Posbility: 0.0031
Next Token : of, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0001
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nat, Posbility: 0.0061
Next Token : float, Posbility: 0.0101
Next Token : list, Posbility: 0.0101
Next Token : string, Posbility: 0.0275
Next Token : int, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 32_, Posbility: 0.0009
Next Token : 64_, Posbility: 0.0015
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.0046
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0087
Next Token : option, Posbility: 0.0087
Next Token : ex, Posbility: 0.0186
Next Token : opt, Posbility: 0.0830
Next Token : list, Posbility: 0.7891
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token : 2, Posbility: 0.0019
Next Token :  =, Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0056
Next Token : int, Posbility: 0.0081
Next Token : list, Posbility: 0.0104
Next Token : opt, Posbility: 0.1270
Next Token : ex, Posbility: 0.7344
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.0052
Next Token : 2, Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : or, Posbility: 0.0009
Next Token : optional, Posbility: 0.0024
Next Token : ex, Posbility: 0.0024
Next Token : list, Posbility: 0.0175
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0016
Next Token :  =, Posbility: 0.0176
Next Token : 2, Posbility: 0.0176
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fail, Posbility: 0.0026
Next Token : rec, Posbility: 0.0042
Next Token : list, Posbility: 0.0062
Next Token : opt, Posbility: 0.0102
Next Token : ex, Posbility: 0.9141
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  fun, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0124
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : module, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0003
Next Token :  0, Posbility: 0.0009
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : nos, Posbility: 0.0000
Next Token : NS, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0040
Next Token : 
, Posbility: 0.0179
Next Token :  Some, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  (((, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0019
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : digits, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : bits, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : OF, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : integer, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (0), Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : digits, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : degrees, Posbility: 0.0000
Next Token : dots, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : integer, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ex, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : ext, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : opt, Posbility: 0.0015
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : н, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  ex, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : ext, Posbility: 0.0000
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_ex
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : )), Posbility: 0.0019
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token : , Posbility: 0.0016
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0035
Next Token : module, Posbility: 0.0037
Next Token : in, Posbility: 0.0095
Next Token : (, Posbility: 0.0189
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0026
Next Token :  sum, Posbility: 0.0029
Next Token :  int, Posbility: 0.0061
Next Token :  , Posbility: 0.0583
Next Token :  rec, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0114
Next Token :  get, Posbility: 0.0129
Next Token :  int, Posbility: 0.0146
Next Token :  sum, Posbility: 0.0273
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0023
Next Token : f, Posbility: 0.0026
Next Token : add, Posbility: 0.0063
Next Token : digit, Posbility: 0.0063
Next Token : digits, Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  =, Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : from, Posbility: 0.0014
Next Token : int, Posbility: 0.0024
Next Token : list, Posbility: 0.0065
Next Token : opt, Posbility: 0.0065
Next Token : of, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _1_, Posbility: 0.0001
Next Token : _0_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nat, Posbility: 0.0095
Next Token : float, Posbility: 0.0201
Next Token : list, Posbility: 0.0201
Next Token : string, Posbility: 0.0332
Next Token : int, Posbility: 0.8594
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0011
Next Token : 64_, Posbility: 0.0019
Next Token : s, Posbility: 0.0045
Next Token :  =, Posbility: 0.0058
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0108
Next Token : seq, Posbility: 0.0108
Next Token : ex, Posbility: 0.0178
Next Token : opt, Posbility: 0.1025
Next Token : list, Posbility: 0.7578
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0005
Next Token :  , Posbility: 0.0024
Next Token : 2, Posbility: 0.0031
Next Token :  =, Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0133
Next Token : int, Posbility: 0.0249
Next Token : list, Posbility: 0.0464
Next Token : opt, Posbility: 0.1113
Next Token : ex, Posbility: 0.5000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : ns, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0020
Next Token :  , Posbility: 0.0034
Next Token :  =, Posbility: 0.0194
Next Token : 2, Posbility: 0.0283
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0057
Next Token : all, Posbility: 0.0057
Next Token : list, Posbility: 0.1309
Next Token : ex, Posbility: 0.2158
Next Token : opt, Posbility: 0.4570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token : 1, Posbility: 0.0009
Next Token : 2, Posbility: 0.0120
Next Token :  =, Posbility: 0.0288
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0072
Next Token : none, Posbility: 0.0082
Next Token : list, Posbility: 0.0222
Next Token : opt, Posbility: 0.0325
Next Token : ex, Posbility: 0.8359
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_ex
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0003
Next Token : ns, Posbility: 0.0003
Next Token : nan, Posbility: 0.0003
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0041
Next Token : 1, Posbility: 0.0068
Next Token :  =, Posbility: 0.0938
Next Token : 2, Posbility: 0.0938
Next Token : _, Posbility: 0.7852
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0184
Next Token : none, Posbility: 0.0184
Next Token : ex, Posbility: 0.1543
Next Token : opt, Posbility: 0.1973
Next Token : list, Posbility: 0.2539
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0011
Next Token :  , Posbility: 0.0011
Next Token : _, Posbility: 0.0371
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  fun, Posbility: 0.0008
Next Token :  , Posbility: 0.0040
Next Token : 
, Posbility: 0.0259
Next Token :  function, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : {, Posbility: 0.0001
Next Token : let, Posbility: 0.0012
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  |
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | []
 score:False
Error type: noerr
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0016
Next Token :  , Posbility: 0.0317
Next Token :  None, Posbility: 0.0859
Next Token :  [], Posbility: 0.2334
Next Token :  0, Posbility: 0.6367
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token : ::, Posbility: 0.0003
Next Token : L, Posbility: 0.0008
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ||, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  i, Posbility: 0.0005
Next Token :  a, Posbility: 0.0005
Next Token :  0, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : h, Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.0025
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0006
Next Token : ::, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n ::
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  0, Posbility: 0.0004
Next Token :  [], Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : nl, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : n, Posbility: 0.0013
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0012
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0010
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns ->
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0008
Next Token :  Some, Posbility: 0.0023
Next Token :  1, Posbility: 0.0037
Next Token : 
, Posbility: 0.0752
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0012
Next Token : 
, Posbility: 0.0015
Next Token : (, Posbility: 0.0031
Next Token : n, Posbility: 0.0040
Next Token : digits, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 0.0293
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : (0), Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n
 score:False
Error type: noerr
---------------------------
Next Token :  `, Posbility: 0.0000
Next Token :  mod, Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n %
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  100), Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0052
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) +
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits
 score:False
Error type: noerr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: noerr
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : ex, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: noerr
---------------------------
Next Token : ext, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : list, Posbility: 0.0003
Next Token : opt, Posbility: 0.0004
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_ex
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : option, Posbility: 0.0003
Next Token : list, Posbility: 0.0009
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : ext, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_ex
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_
 score:False
Error type: noerr
---------------------------
Next Token : lista, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0009
Next Token : ), Posbility: 0.0013
Next Token :  in, Posbility: 0.0046
Next Token : 

, Posbility: 0.1055
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0014
Next Token : {, Posbility: 0.0026
Next Token : (, Posbility: 0.0058
Next Token : in, Posbility: 0.0231
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0023
Next Token :  acc, Posbility: 0.0023
Next Token :  main, Posbility: 0.0101
Next Token :  , Posbility: 0.0581
Next Token :  rec, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  get, Posbility: 0.0043
Next Token :  is, Posbility: 0.0049
Next Token :  int, Posbility: 0.0049
Next Token :  sum, Posbility: 0.0080
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : map, Posbility: 0.0007
Next Token : f, Posbility: 0.0008
Next Token : digit, Posbility: 0.0010
Next Token : add, Posbility: 0.0013
Next Token : digits, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_
 score:False
Error type: noerr
---------------------------
Next Token : ex, Posbility: 0.0004
Next Token : int, Posbility: 0.0005
Next Token : opt, Posbility: 0.0008
Next Token : list, Posbility: 0.0015
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of
 score:False
Error type: noerr
---------------------------
Next Token : _0_, Posbility: 0.0000
Next Token : _1_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : nat, Posbility: 0.0024
Next Token : float, Posbility: 0.0082
Next Token : list, Posbility: 0.0082
Next Token : string, Posbility: 0.0106
Next Token : int, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : 32_, Posbility: 0.0005
Next Token : s, Posbility: 0.0008
Next Token : 64_, Posbility: 0.0008
Next Token :  =, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_
 score:False
Error type: noerr
---------------------------
Next Token : string, Posbility: 0.0011
Next Token : array, Posbility: 0.0014
Next Token : ex, Posbility: 0.0104
Next Token : opt, Posbility: 0.0282
Next Token : list, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0021
Next Token : string, Posbility: 0.0021
Next Token : list, Posbility: 0.0153
Next Token : opt, Posbility: 0.1133
Next Token : ex, Posbility: 0.8359
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_ex
 score:False
Error type: noerr
---------------------------
Next Token : cess, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 2, Posbility: 0.0006
Next Token :  =, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0003
Next Token : optional, Posbility: 0.0024
Next Token : ex, Posbility: 0.0024
Next Token : list, Posbility: 0.0178
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0002
Next Token : int, Posbility: 0.0004
Next Token : opt, Posbility: 0.0004
Next Token : list, Posbility: 0.0052
Next Token : ex, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_ex
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_
 score:False
Error type: noerr
---------------------------
Next Token : seq, Posbility: 0.0011
Next Token : lists, Posbility: 0.0011
Next Token : opt, Posbility: 0.0051
Next Token : ex, Posbility: 0.0051
Next Token : list, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token : 2, Posbility: 0.0046
Next Token :  =, Posbility: 0.0067
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0008
Next Token : of, Posbility: 0.0021
Next Token : list, Posbility: 0.0154
Next Token : ex, Posbility: 0.1138
Next Token : opt, Posbility: 0.8398
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 0.0076
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  fun, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0159
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : let, Posbility: 0.0006
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  None, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | []
 score:False
Error type: noerr
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 0.0003
Next Token :  Some, Posbility: 0.0003
Next Token :  0, Posbility: 0.0025
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n ::
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns ->
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0040
Next Token : 
, Posbility: 0.0179
Next Token :  Some, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  (((, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0017
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : digits, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (
 score:False
Error type: noerr
---------------------------
Next Token : bits, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : 
, Posbility: 0.0036
Next Token : digits, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_
 score:False
Error type: noerr
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : OF, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (0), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : %, Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
 score:False
Error type: noerr
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
 score:False
Error type: noerr
---------------------------
Next Token : +, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0005
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
 score:False
Error type: noerr
---------------------------
Next Token : dots, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : float, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
 score:False
Error type: noerr
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : ex, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
 score:False
Error type: noerr
---------------------------
Next Token :  ex, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : opt, Posbility: 0.0004
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_ex
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : N, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_
 score:False
Error type: noerr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : ext, Posbility: 0.0000
Next Token : exc, Posbility: 0.0000
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_ex
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : ns, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0952
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt_exn ns)
let rec digits_of_int_list_exn = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn ns
let rec digits_of_int_list_exn_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt ns)
let rec digits_of_int_list_exn_opt_exn = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn ns)
let rec digits_of_int_list_exn_opt_exn_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list ns
let rec digits_of_int_list_exn_opt_exn_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_exn_opt_exn_list_opt 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>