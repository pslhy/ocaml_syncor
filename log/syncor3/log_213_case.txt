code:
 (* Write a function to count the number of sublists containing a particular element. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0054
Next Token :  sub, Posbility: 0.0659
Next Token :  , Posbility: 0.0845
Next Token :  count, Posbility: 0.1396
Next Token :  rec, Posbility: 0.6250
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0190
Next Token :  find, Posbility: 0.0244
Next Token :  sub, Posbility: 0.0967
Next Token :  , Posbility: 0.1807
Next Token :  count, Posbility: 0.5547
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0051
Next Token : Sub, Posbility: 0.0074
Next Token :  , Posbility: 0.0898
Next Token :  =, Posbility: 0.1021
Next Token : _, Posbility: 0.7539
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0166
Next Token : of, Posbility: 0.0273
Next Token : lists, Posbility: 0.0352
Next Token : list, Posbility: 0.0510
Next Token : sub, Posbility: 0.6211
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sub
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0047
Next Token : _, Posbility: 0.0128
Next Token : s, Posbility: 0.0128
Next Token : list, Posbility: 0.2578
Next Token : lists, Posbility: 0.6992
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0148
Next Token : (, Posbility: 0.0189
Next Token : _, Posbility: 0.1582
Next Token :  =, Posbility: 0.1582
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0654
Next Token : s, Posbility: 0.0952
Next Token : n, Posbility: 0.0952
Next Token : (, Posbility: 0.1572
Next Token : x, Posbility: 0.1777
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0344
Next Token :  i, Posbility: 0.0391
Next Token : s, Posbility: 0.1748
Next Token :  =, Posbility: 0.1982
Next Token :  , Posbility: 0.3711
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0496
Next Token : s, Posbility: 0.1187
Next Token : n, Posbility: 0.1187
Next Token : x, Posbility: 0.1348
Next Token : y, Posbility: 0.1729
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0217
Next Token :  sub, Posbility: 0.0247
Next Token : s, Posbility: 0.0405
Next Token :  , Posbility: 0.2061
Next Token :  =, Posbility: 0.5586
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0031
Next Token :  function, Posbility: 0.0226
Next Token :  match, Posbility: 0.0479
Next Token :  , Posbility: 0.0693
Next Token : 
, Posbility: 0.8477
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0073
Next Token :    , Posbility: 0.0083
Next Token : 	, Posbility: 0.0094
Next Token :     , Posbility: 0.1143
Next Token :   , Posbility: 0.8438
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0079
Next Token : List, Posbility: 0.0101
Next Token : let, Posbility: 0.0850
Next Token : if, Posbility: 0.3809
Next Token : match, Posbility: 0.4883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token :  {, Posbility: 0.0017
Next Token :  !, Posbility: 0.0027
Next Token :  [, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0004
Next Token : List, Posbility: 0.0226
Next Token : (, Posbility: 0.0613
Next Token : y, Posbility: 0.4531
Next Token : x, Posbility: 0.4531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0037
Next Token :  =, Posbility: 0.0061
Next Token :  , Posbility: 0.0747
Next Token : ,, Posbility: 0.3359
Next Token :  with, Posbility: 0.5547
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0057
Next Token :  [, Posbility: 0.0093
Next Token :  {, Posbility: 0.0106
Next Token :  [], Posbility: 0.0120
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0020
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0947
Next Token :   , Posbility: 0.8984
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : None, Posbility: 0.0007
Next Token : 0, Posbility: 0.0015
Next Token : [, Posbility: 0.0074
Next Token : [], Posbility: 0.0109
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0138
Next Token :  [, Posbility: 0.0374
Next Token :  None, Posbility: 0.0374
Next Token :  , Posbility: 0.1021
Next Token :  [], Posbility: 0.7539
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0062
Next Token :  =>, Posbility: 0.0062
Next Token :  |, Posbility: 0.0131
Next Token :  when, Posbility: 0.0276
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : â†’, Posbility: 0.0006
Next Token : -, Posbility: 0.0007
Next Token : if, Posbility: 0.0041
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0640
Next Token :  1, Posbility: 0.0640
Next Token :  , Posbility: 0.1738
Next Token :  [], Posbility: 0.1738
Next Token :  0, Posbility: 0.4727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0023
Next Token :   , Posbility: 0.0049
Next Token :  , Posbility: 0.0171
Next Token :  |, Posbility: 0.0248
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : when, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0059
Next Token :  a, Posbility: 0.0124
Next Token :  [], Posbility: 0.0204
Next Token :  [, Posbility: 0.2490
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0371
Next Token : hd, Posbility: 0.0371
Next Token : y, Posbility: 0.0479
Next Token : _, Posbility: 0.1895
Next Token : x, Posbility: 0.5820
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0229
Next Token : :, Posbility: 0.0334
Next Token : s, Posbility: 0.0708
Next Token : ::, Posbility: 0.3594
Next Token :  , Posbility: 0.4609
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : :, Posbility: 0.0020
Next Token : if, Posbility: 0.0103
Next Token : ->, Posbility: 0.0593
Next Token : ::, Posbility: 0.9258
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0032
Next Token :  [, Posbility: 0.0053
Next Token :  [], Posbility: 0.0391
Next Token :  rest, Posbility: 0.0442
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0229
Next Token : t, Posbility: 0.0378
Next Token : _, Posbility: 0.1494
Next Token : y, Posbility: 0.2178
Next Token : x, Posbility: 0.5234
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0029
Next Token : _, Posbility: 0.0048
Next Token : 1, Posbility: 0.0048
Next Token : ', Posbility: 0.0583
Next Token : s, Posbility: 0.9141
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0013
Next Token : 1, Posbility: 0.0013
Next Token :  =>, Posbility: 0.0058
Next Token :  when, Posbility: 0.1172
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0002
Next Token : if, Posbility: 0.0075
Next Token : ::, Posbility: 0.0123
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0128
Next Token :  count, Posbility: 0.0574
Next Token :  1, Posbility: 0.0574
Next Token :  , Posbility: 0.1562
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0037
Next Token :   , Posbility: 0.0079
Next Token :      , Posbility: 0.0101
Next Token :     , Posbility: 0.4863
Next Token :       , Posbility: 0.4863
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0349
Next Token : count, Posbility: 0.0508
Next Token : match, Posbility: 0.1777
Next Token : if, Posbility: 0.2930
Next Token : let, Posbility: 0.3750
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0175
Next Token :  sub, Posbility: 0.0371
Next Token :  count, Posbility: 0.1660
Next Token :  rec, Posbility: 0.1660
Next Token :  , Posbility: 0.4512
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0315
Next Token : z, Posbility: 0.0518
Next Token : n, Posbility: 0.0854
Next Token : x, Posbility: 0.1406
Next Token : y, Posbility: 0.3828
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0374
Next Token : ', Posbility: 0.0615
Next Token : _, Posbility: 0.1670
Next Token :  =, Posbility: 0.2148
Next Token : s, Posbility: 0.3535
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0030
Next Token : ,, Posbility: 0.0050
Next Token : ', Posbility: 0.0050
Next Token : _, Posbility: 0.0175
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0267
Next Token : 
, Posbility: 0.0344
Next Token :  [, Posbility: 0.0442
Next Token :  count, Posbility: 0.1543
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0116
Next Token : Array, Posbility: 0.0168
Next Token : x, Posbility: 0.1816
Next Token : List, Posbility: 0.3379
Next Token : y, Posbility: 0.3379
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0287
Next Token : ::, Posbility: 0.0417
Next Token :  |, Posbility: 0.0884
Next Token :  in, Posbility: 0.1455
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0024
Next Token : x, Posbility: 0.0057
Next Token : :, Posbility: 0.0121
Next Token : -, Posbility: 0.0137
Next Token : ::, Posbility: 0.9648
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0011
Next Token :  [, Posbility: 0.0072
Next Token :  [];, Posbility: 0.0118
Next Token :  [], Posbility: 0.1436
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0014
Next Token : (, Posbility: 0.0029
Next Token : List, Posbility: 0.0037
Next Token : y, Posbility: 0.0747
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 0.0013
Next Token :  in, Posbility: 0.0124
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0015
Next Token :  |, Posbility: 0.0019
Next Token : ;, Posbility: 0.0024
Next Token : 
, Posbility: 0.0109
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : 

, Posbility: 0.0007
Next Token :  count, Posbility: 0.0040
Next Token :  , Posbility: 0.0075
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0006
Next Token :         , Posbility: 0.0019
Next Token :     , Posbility: 0.0019
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0552
Next Token : match, Posbility: 0.1328
Next Token : if, Posbility: 0.1504
Next Token : count, Posbility: 0.1504
Next Token : let, Posbility: 0.3594
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0177
Next Token :  sub, Posbility: 0.0615
Next Token :  count, Posbility: 0.1309
Next Token :  rec, Posbility: 0.1670
Next Token :  , Posbility: 0.4551
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0393
Next Token : z, Posbility: 0.0574
Next Token : x, Posbility: 0.1562
Next Token : n, Posbility: 0.2002
Next Token : y, Posbility: 0.2266
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0175
Next Token : 0, Posbility: 0.0327
Next Token :  =, Posbility: 0.1289
Next Token : _, Posbility: 0.1660
Next Token : s, Posbility: 0.5117
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0383
Next Token : ', Posbility: 0.0557
Next Token : 2, Posbility: 0.0630
Next Token : _, Posbility: 0.3633
Next Token :  =, Posbility: 0.3633
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0240
Next Token : 
, Posbility: 0.0309
Next Token :  [, Posbility: 0.0654
Next Token :  count, Posbility: 0.1777
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0176
Next Token : Array, Posbility: 0.0289
Next Token : x, Posbility: 0.0693
Next Token : y, Posbility: 0.2422
Next Token : List, Posbility: 0.4531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Utils, Posbility: 0.0008
Next Token : s, Posbility: 0.0009
Next Token : (, Posbility: 0.0012
Next Token : _, Posbility: 0.0031
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0303
Next Token : fold, Posbility: 0.0344
Next Token : map, Posbility: 0.1196
Next Token : filter, Posbility: 0.2871
Next Token : rev, Posbility: 0.4180
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token :  ~, Posbility: 0.0011
Next Token : ., Posbility: 0.0035
Next Token : _, Posbility: 0.0123
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token : ;, Posbility: 0.0085
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0006
Next Token : 

, Posbility: 0.0025
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0004
Next Token :   , Posbility: 0.0007
Next Token :      , Posbility: 0.0067
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0598
Next Token : 1, Posbility: 0.0767
Next Token : match, Posbility: 0.0869
Next Token : count, Posbility: 0.1118
Next Token : let, Posbility: 0.5000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0170
Next Token :  sub, Posbility: 0.0461
Next Token :  count, Posbility: 0.0762
Next Token :  rec, Posbility: 0.1611
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0214
Next Token : z, Posbility: 0.0400
Next Token : n, Posbility: 0.1230
Next Token : x, Posbility: 0.1582
Next Token : y, Posbility: 0.3789
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0049
Next Token : 0, Posbility: 0.0091
Next Token : _, Posbility: 0.0361
Next Token :  =, Posbility: 0.0864
Next Token : s, Posbility: 0.8203
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0073
Next Token : s, Posbility: 0.0083
Next Token : 2, Posbility: 0.0083
Next Token : _, Posbility: 0.0894
Next Token :  =, Posbility: 0.8477
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0072
Next Token : 
, Posbility: 0.0251
Next Token :  [, Posbility: 0.0413
Next Token :  count, Posbility: 0.0532
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0057
Next Token : ref, Posbility: 0.0093
Next Token : x, Posbility: 0.0420
Next Token : y, Posbility: 0.0540
Next Token : List, Posbility: 0.8438
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0215
Next Token : fold, Posbility: 0.0515
Next Token : map, Posbility: 0.1094
Next Token : filter, Posbility: 0.2969
Next Token : rev, Posbility: 0.3359
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0014
Next Token : ', Posbility: 0.0016
Next Token : ., Posbility: 0.0038
Next Token : _, Posbility: 0.1611
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : List, Posbility: 0.0063
Next Token : (, Posbility: 0.0170
Next Token : x, Posbility: 0.0461
Next Token : y, Posbility: 0.9297
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  in, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token : ;, Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token : 

, Posbility: 0.0019
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0010
Next Token :      , Posbility: 0.0076
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0476
Next Token : List, Posbility: 0.0693
Next Token : count, Posbility: 0.1006
Next Token : match, Posbility: 0.1143
Next Token : let, Posbility: 0.5117
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0123
Next Token :  sub, Posbility: 0.0334
Next Token :  count, Posbility: 0.0552
Next Token :  rec, Posbility: 0.1167
Next Token :  , Posbility: 0.6719
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0132
Next Token : z, Posbility: 0.0361
Next Token : n, Posbility: 0.0596
Next Token : x, Posbility: 0.1426
Next Token : y, Posbility: 0.5625
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0022
Next Token : 0, Posbility: 0.0029
Next Token : _, Posbility: 0.0129
Next Token :  =, Posbility: 0.0579
Next Token : s, Posbility: 0.9023
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0034
Next Token : 1, Posbility: 0.0034
Next Token : s, Posbility: 0.0056
Next Token : _, Posbility: 0.0197
Next Token :  =, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0046
Next Token : 
, Posbility: 0.0161
Next Token :  count, Posbility: 0.0266
Next Token :  [, Posbility: 0.0439
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0031
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.0481
Next Token : y, Posbility: 0.0547
Next Token : List, Posbility: 0.8555
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0151
Next Token : fold, Posbility: 0.0283
Next Token : map, Posbility: 0.0869
Next Token : filter, Posbility: 0.2090
Next Token : rev, Posbility: 0.5000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : ', Posbility: 0.0010
Next Token : ., Posbility: 0.0013
Next Token : _, Posbility: 0.0203
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0024
Next Token : List, Posbility: 0.0024
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  count, Posbility: 0.0004
Next Token : 

, Posbility: 0.0022
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 0.0012
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0410
Next Token : List, Posbility: 0.0679
Next Token : count, Posbility: 0.0767
Next Token : match, Posbility: 0.1118
Next Token : let, Posbility: 0.5664
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0110
Next Token :  sub, Posbility: 0.0232
Next Token :  count, Posbility: 0.0383
Next Token :  rec, Posbility: 0.0811
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0073
Next Token : z, Posbility: 0.0223
Next Token : n, Posbility: 0.0325
Next Token : x, Posbility: 0.1001
Next Token : y, Posbility: 0.7422
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0007
Next Token : 0, Posbility: 0.0010
Next Token : _, Posbility: 0.0039
Next Token :  =, Posbility: 0.0289
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0015
Next Token : 1, Posbility: 0.0015
Next Token : s, Posbility: 0.0027
Next Token : _, Posbility: 0.0066
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0023
Next Token :  count, Posbility: 0.0063
Next Token : 
, Posbility: 0.0170
Next Token :  [, Posbility: 0.0281
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0015
Next Token : (, Posbility: 0.0037
Next Token : x, Posbility: 0.0352
Next Token : y, Posbility: 0.0352
Next Token : List, Posbility: 0.9062
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0090
Next Token : reverse, Posbility: 0.0115
Next Token : map, Posbility: 0.0315
Next Token : filter, Posbility: 0.0518
Next Token : rev, Posbility: 0.8086
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : ., Posbility: 0.0004
Next Token : _, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token : 

, Posbility: 0.0025
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 0.0013
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0359
Next Token : count, Posbility: 0.0520
Next Token : List, Posbility: 0.0591
Next Token : match, Posbility: 0.0972
Next Token : let, Posbility: 0.6367
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0074
Next Token :  sub, Posbility: 0.0156
Next Token :  count, Posbility: 0.0258
Next Token :  rec, Posbility: 0.0425
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0044
Next Token : n, Posbility: 0.0154
Next Token : z, Posbility: 0.0154
Next Token : x, Posbility: 0.0688
Next Token : y, Posbility: 0.8398
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : 0, Posbility: 0.0005
Next Token : _, Posbility: 0.0017
Next Token :  =, Posbility: 0.0178
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0012
Next Token : 1, Posbility: 0.0012
Next Token : s, Posbility: 0.0022
Next Token : _, Posbility: 0.0045
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0014
Next Token :  count, Posbility: 0.0024
Next Token : 
, Posbility: 0.0083
Next Token :  [, Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0007
Next Token : (, Posbility: 0.0018
Next Token : x, Posbility: 0.0173
Next Token : y, Posbility: 0.0223
Next Token : List, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0038
Next Token : map, Posbility: 0.0103
Next Token : reverse, Posbility: 0.0103
Next Token : filter, Posbility: 0.0170
Next Token : rev, Posbility: 0.9258
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0006
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0010
Next Token :      , Posbility: 0.0076
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0312
Next Token : count, Posbility: 0.0354
Next Token : List, Posbility: 0.0400
Next Token : match, Posbility: 0.0850
Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0061
Next Token :  sub, Posbility: 0.0100
Next Token :  count, Posbility: 0.0165
Next Token :  rec, Posbility: 0.0272
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0028
Next Token : n, Posbility: 0.0098
Next Token : z, Posbility: 0.0098
Next Token : x, Posbility: 0.0562
Next Token : y, Posbility: 0.8789
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0009
Next Token :  =, Posbility: 0.0124
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token : s, Posbility: 0.0012
Next Token : _, Posbility: 0.0022
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0009
Next Token :  count, Posbility: 0.0011
Next Token : 
, Posbility: 0.0040
Next Token :  [, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0004
Next Token : (, Posbility: 0.0014
Next Token : x, Posbility: 0.0107
Next Token : y, Posbility: 0.0177
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0024
Next Token : map, Posbility: 0.0064
Next Token : filter, Posbility: 0.0064
Next Token : reverse, Posbility: 0.0106
Next Token : rev, Posbility: 0.9570
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0009
Next Token :      , Posbility: 0.0067
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0261
Next Token : (, Posbility: 0.0295
Next Token : List, Posbility: 0.0378
Next Token : match, Posbility: 0.0625
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0048
Next Token :  sub, Posbility: 0.0079
Next Token :  count, Posbility: 0.0167
Next Token :  rec, Posbility: 0.0215
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : n, Posbility: 0.0062
Next Token : z, Posbility: 0.0062
Next Token : x, Posbility: 0.0356
Next Token : y, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 0.0008
Next Token : _, Posbility: 0.0017
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0006
Next Token :  count, Posbility: 0.0008
Next Token : 
, Posbility: 0.0024
Next Token :  [, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0003
Next Token : (, Posbility: 0.0011
Next Token : x, Posbility: 0.0084
Next Token : y, Posbility: 0.0139
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0015
Next Token : map, Posbility: 0.0024
Next Token : filter, Posbility: 0.0024
Next Token : reverse, Posbility: 0.0108
Next Token : rev, Posbility: 0.9727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0008
Next Token :      , Posbility: 0.0059
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0211
Next Token : (, Posbility: 0.0272
Next Token : List, Posbility: 0.0308
Next Token : match, Posbility: 0.0576
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0034
Next Token :  sub, Posbility: 0.0056
Next Token :  count, Posbility: 0.0093
Next Token :  rec, Posbility: 0.0135
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : n, Posbility: 0.0062
Next Token : z, Posbility: 0.0080
Next Token : x, Posbility: 0.0356
Next Token : y, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 0.0005
Next Token : _, Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0005
Next Token :  count, Posbility: 0.0005
Next Token : 
, Posbility: 0.0019
Next Token :  [, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0045
Next Token : y, Posbility: 0.0085
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0009
Next Token : map, Posbility: 0.0015
Next Token : filter, Posbility: 0.0015
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token :      , Posbility: 0.0052
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0215
Next Token : (, Posbility: 0.0244
Next Token : List, Posbility: 0.0312
Next Token : match, Posbility: 0.0518
Next Token : let, Posbility: 0.8086
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0024
Next Token :  sub, Posbility: 0.0035
Next Token :  count, Posbility: 0.0065
Next Token :  rec, Posbility: 0.0095
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : n, Posbility: 0.0039
Next Token : z, Posbility: 0.0039
Next Token : x, Posbility: 0.0286
Next Token : y, Posbility: 0.9453
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 0.0005
Next Token : _, Posbility: 0.0006
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token : 
, Posbility: 0.0010
Next Token :  [, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0036
Next Token : y, Posbility: 0.0085
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0009
Next Token : sort, Posbility: 0.0009
Next Token : map, Posbility: 0.0015
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0173
Next Token : (, Posbility: 0.0222
Next Token : List, Posbility: 0.0286
Next Token : match, Posbility: 0.0415
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0021
Next Token :  sub, Posbility: 0.0031
Next Token :  count, Posbility: 0.0051
Next Token :  rec, Posbility: 0.0074
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : n, Posbility: 0.0039
Next Token : z, Posbility: 0.0050
Next Token : x, Posbility: 0.0223
Next Token : y, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0028
Next Token : y, Posbility: 0.0067
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0005
Next Token : sort, Posbility: 0.0009
Next Token : map, Posbility: 0.0015
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :      , Posbility: 0.0052
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0199
Next Token : (, Posbility: 0.0226
Next Token : List, Posbility: 0.0256
Next Token : match, Posbility: 0.0374
Next Token : let, Posbility: 0.8477
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0015
Next Token :  sub, Posbility: 0.0021
Next Token :  count, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : n, Posbility: 0.0031
Next Token : z, Posbility: 0.0039
Next Token : x, Posbility: 0.0176
Next Token : y, Posbility: 0.9609
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0019
Next Token : y, Posbility: 0.0046
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0005
Next Token : filter, Posbility: 0.0005
Next Token : map, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0178
Next Token : (, Posbility: 0.0201
Next Token : List, Posbility: 0.0228
Next Token : match, Posbility: 0.0376
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0015
Next Token :  sub, Posbility: 0.0021
Next Token :  count, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0045
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : n, Posbility: 0.0024
Next Token : z, Posbility: 0.0031
Next Token : x, Posbility: 0.0177
Next Token : y, Posbility: 0.9648
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0017
Next Token : y, Posbility: 0.0041
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : sort, Posbility: 0.0004
Next Token : map, Posbility: 0.0005
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0179
Next Token : (, Posbility: 0.0203
Next Token : List, Posbility: 0.0231
Next Token : match, Posbility: 0.0334
Next Token : let, Posbility: 0.8633
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0013
Next Token :  sub, Posbility: 0.0019
Next Token :  count, Posbility: 0.0031
Next Token :  rec, Posbility: 0.0045
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : n, Posbility: 0.0024
Next Token : z, Posbility: 0.0031
Next Token : x, Posbility: 0.0139
Next Token : y, Posbility: 0.9688
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0013
Next Token : y, Posbility: 0.0036
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : sort, Posbility: 0.0004
Next Token : map, Posbility: 0.0005
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0161
Next Token : (, Posbility: 0.0182
Next Token : List, Posbility: 0.0234
Next Token : match, Posbility: 0.0265
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0010
Next Token :  sub, Posbility: 0.0015
Next Token :  count, Posbility: 0.0024
Next Token :  rec, Posbility: 0.0036
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : n, Posbility: 0.0019
Next Token : z, Posbility: 0.0031
Next Token : x, Posbility: 0.0139
Next Token : y, Posbility: 0.9727
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0010
Next Token : y, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : sort, Posbility: 0.0003
Next Token : map, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0182
Next Token : List, Posbility: 0.0182
Next Token : (, Posbility: 0.0206
Next Token : match, Posbility: 0.0265
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0012
Next Token :  sub, Posbility: 0.0017
Next Token :  count, Posbility: 0.0024
Next Token :  rec, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : n, Posbility: 0.0019
Next Token : z, Posbility: 0.0024
Next Token : x, Posbility: 0.0109
Next Token : y, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0164
Next Token : List, Posbility: 0.0164
Next Token : (, Posbility: 0.0186
Next Token : match, Posbility: 0.0210
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0010
Next Token :  sub, Posbility: 0.0015
Next Token :  count, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : n, Posbility: 0.0019
Next Token : z, Posbility: 0.0024
Next Token : x, Posbility: 0.0109
Next Token : y, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0046
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0146
Next Token : y, Posbility: 0.0166
Next Token : (, Posbility: 0.0166
Next Token : match, Posbility: 0.0166
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0009
Next Token :  sub, Posbility: 0.0013
Next Token :  count, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : n, Posbility: 0.0019
Next Token : z, Posbility: 0.0024
Next Token : x, Posbility: 0.0109
Next Token : y, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0007
Next Token : y, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : sort, Posbility: 0.0003
Next Token : map, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0146
Next Token : List, Posbility: 0.0146
Next Token : (, Posbility: 0.0188
Next Token : match, Posbility: 0.0188
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0007
Next Token :  sub, Posbility: 0.0010
Next Token :  count, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0022
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : n, Posbility: 0.0015
Next Token : z, Posbility: 0.0024
Next Token : x, Posbility: 0.0109
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0129
Next Token : match, Posbility: 0.0147
Next Token : y, Posbility: 0.0166
Next Token : (, Posbility: 0.0189
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0006
Next Token :  sub, Posbility: 0.0009
Next Token :  count, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : n, Posbility: 0.0012
Next Token : z, Posbility: 0.0019
Next Token : x, Posbility: 0.0085
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0006
Next Token : y, Posbility: 0.0019
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0130
Next Token : match, Posbility: 0.0148
Next Token : (, Posbility: 0.0167
Next Token : y, Posbility: 0.0167
Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0007
Next Token :  sub, Posbility: 0.0010
Next Token :  count, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : n, Posbility: 0.0012
Next Token : z, Posbility: 0.0017
Next Token : x, Posbility: 0.0085
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 0.0019
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0116
Next Token : y, Posbility: 0.0131
Next Token : match, Posbility: 0.0131
Next Token : (, Posbility: 0.0168
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  sub, Posbility: 0.0008
Next Token :  count, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : n, Posbility: 0.0013
Next Token : z, Posbility: 0.0019
Next Token : x, Posbility: 0.0085
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 0.0017
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0130
Next Token : List, Posbility: 0.0147
Next Token : (, Posbility: 0.0166
Next Token : y, Posbility: 0.0189
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  sub, Posbility: 0.0007
Next Token :  count, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0010
Next Token : z, Posbility: 0.0015
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0017
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 0.0012
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0131
Next Token : match, Posbility: 0.0131
Next Token : y, Posbility: 0.0148
Next Token : (, Posbility: 0.0168
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  sub, Posbility: 0.0007
Next Token :  count, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : n, Posbility: 0.0012
Next Token : z, Posbility: 0.0017
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 0.0013
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0116
Next Token : match, Posbility: 0.0116
Next Token : y, Posbility: 0.0149
Next Token : (, Posbility: 0.0168
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0004
Next Token :  sub, Posbility: 0.0006
Next Token :  count, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0009
Next Token : z, Posbility: 0.0015
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0017
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0104
Next Token : List, Posbility: 0.0117
Next Token : (, Posbility: 0.0133
Next Token : y, Posbility: 0.0133
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  sub, Posbility: 0.0006
Next Token :  count, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0008
Next Token : z, Posbility: 0.0013
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : y, Posbility: 0.0013
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0103
Next Token : List, Posbility: 0.0117
Next Token : (, Posbility: 0.0132
Next Token : y, Posbility: 0.0150
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0004
Next Token :  sub, Posbility: 0.0006
Next Token :  count, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : n, Posbility: 0.0009
Next Token : z, Posbility: 0.0015
Next Token : x, Posbility: 0.0067
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0081
Next Token : List, Posbility: 0.0118
Next Token : (, Posbility: 0.0133
Next Token : y, Posbility: 0.0133
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  sub, Posbility: 0.0004
Next Token :  count, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0009
Next Token : z, Posbility: 0.0013
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0081
Next Token : List, Posbility: 0.0092
Next Token : (, Posbility: 0.0133
Next Token : y, Posbility: 0.0171
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  sub, Posbility: 0.0004
Next Token :  count, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0010
Next Token : z, Posbility: 0.0017
Next Token : x, Posbility: 0.0052
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0072
Next Token : List, Posbility: 0.0082
Next Token : (, Posbility: 0.0119
Next Token : y, Posbility: 0.0119
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  sub, Posbility: 0.0004
Next Token :  count, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0006
Next Token : z, Posbility: 0.0010
Next Token : x, Posbility: 0.0046
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0012
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0063
Next Token : List, Posbility: 0.0105
Next Token : (, Posbility: 0.0118
Next Token : y, Posbility: 0.0118
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  sub, Posbility: 0.0004
Next Token :  count, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0006
Next Token : z, Posbility: 0.0008
Next Token : x, Posbility: 0.0046
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : concat, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0056
Next Token : List, Posbility: 0.0104
Next Token : (, Posbility: 0.0118
Next Token : y, Posbility: 0.0134
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  sub, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0006
Next Token :  count, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0006
Next Token : z, Posbility: 0.0010
Next Token : x, Posbility: 0.0041
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0008
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : concat, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0056
Next Token : (, Posbility: 0.0105
Next Token : List, Posbility: 0.0105
Next Token : y, Posbility: 0.0135
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  sub, Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0006
Next Token : z, Posbility: 0.0010
Next Token : x, Posbility: 0.0036
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0007
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0056
Next Token : List, Posbility: 0.0082
Next Token : y, Posbility: 0.0106
Next Token : (, Posbility: 0.0120
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  sub, Posbility: 0.0002
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : z, Posbility: 0.0009
Next Token : x, Posbility: 0.0036
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0056
Next Token : (, Posbility: 0.0093
Next Token : List, Posbility: 0.0093
Next Token : y, Posbility: 0.0106
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  sub, Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0006
Next Token : z, Posbility: 0.0010
Next Token : x, Posbility: 0.0036
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0007
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0044
Next Token : List, Posbility: 0.0057
Next Token : (, Posbility: 0.0106
Next Token : y, Posbility: 0.0106
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  sub, Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : z, Posbility: 0.0009
Next Token : x, Posbility: 0.0028
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0007
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : rot, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0025
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev y
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0036
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0056
Next Token : List, Posbility: 0.0082
Next Token : (, Posbility: 0.0106
Next Token : y, Posbility: 0.0120
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  sub, Posbility: 0.0002
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0007
Next Token : z, Posbility: 0.0012
Next Token : x, Posbility: 0.0046
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let y
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0007
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count the number of sublists containing a particular element. *)
let rec count_sublists x y =
  match x with
  | [] -> 0
  | x :: xs ->
      let ys = y :: xs in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev ys in
      let ys = List.rev 
 score:False
Error type: noerr
---------------------------


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>