code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0070
Next Token :  partition, Posbility: 0.0102
Next Token :  list, Posbility: 0.0149
Next Token :  , Posbility: 0.2637
Next Token :  rec, Posbility: 0.6328
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0150
Next Token :  make, Posbility: 0.0192
Next Token :  list, Posbility: 0.0247
Next Token :  loop, Posbility: 0.0315
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0068
Next Token : divide, Posbility: 0.0127
Next Token : n, Posbility: 0.0162
Next Token : nth, Posbility: 0.0645
Next Token : split, Posbility: 0.7852
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ter, Posbility: 0.0211
Next Token :  =, Posbility: 0.0449
Next Token : s, Posbility: 0.0449
Next Token :  , Posbility: 0.2012
Next Token : _, Posbility: 0.5469
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0400
Next Token : n, Posbility: 0.0452
Next Token : nth, Posbility: 0.0659
Next Token : at, Posbility: 0.1230
Next Token : list, Posbility: 0.4297
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0199
Next Token :  ~, Posbility: 0.0199
Next Token :  =, Posbility: 0.0889
Next Token : _, Posbility: 0.1465
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0364
Next Token : x, Posbility: 0.0991
Next Token : (, Posbility: 0.1270
Next Token : lst, Posbility: 0.2695
Next Token : n, Posbility: 0.2695
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0366
Next Token :  =, Posbility: 0.1865
Next Token :  l, Posbility: 0.1865
Next Token :  list, Posbility: 0.2109
Next Token :  , Posbility: 0.2715
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ll, Posbility: 0.0267
Next Token : (, Posbility: 0.0640
Next Token : ls, Posbility: 0.1201
Next Token : x, Posbility: 0.2539
Next Token : lst, Posbility: 0.3262
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0048
Next Token :  l, Posbility: 0.0079
Next Token :  acc, Posbility: 0.0167
Next Token :  , Posbility: 0.0214
Next Token :  =, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0027
Next Token :  {, Posbility: 0.0031
Next Token :  match, Posbility: 0.0544
Next Token :  , Posbility: 0.0791
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0049
Next Token :    , Posbility: 0.0072
Next Token : 	, Posbility: 0.0152
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0053
Next Token : List, Posbility: 0.0391
Next Token : let, Posbility: 0.1060
Next Token : if, Posbility: 0.2871
Next Token : match, Posbility: 0.5391
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : 
, Posbility: 0.0013
Next Token :  !, Posbility: 0.0021
Next Token :  String, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : nth, Posbility: 0.0056
Next Token : n, Posbility: 0.0688
Next Token : List, Posbility: 0.0688
Next Token : lst, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : ,, Posbility: 0.0009
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0027
Next Token :  , Posbility: 0.0045
Next Token :  [, Posbility: 0.0051
Next Token :  [], Posbility: 0.0177
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0006
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0020
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0095
Next Token : [], Posbility: 0.0201
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0014
Next Token :  [, Posbility: 0.0135
Next Token :  nil, Posbility: 0.0135
Next Token :  , Posbility: 0.0173
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0034
Next Token :   , Posbility: 0.0039
Next Token :    , Posbility: 0.0050
Next Token :  |, Posbility: 0.0073
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0032
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [[, Posbility: 0.0088
Next Token : 
, Posbility: 0.0145
Next Token :  [, Posbility: 0.0649
Next Token :  , Posbility: 0.1069
Next Token :  [], Posbility: 0.7891
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0018
Next Token :   , Posbility: 0.0044
Next Token :  |, Posbility: 0.0057
Next Token :  , Posbility: 0.0176
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0053
Next Token :  [], Posbility: 0.0113
Next Token :  l, Posbility: 0.0186
Next Token :  [, Posbility: 0.1377
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0459
Next Token : _, Posbility: 0.0757
Next Token : h, Posbility: 0.0972
Next Token : hd, Posbility: 0.3398
Next Token : x, Posbility: 0.3398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0012
Next Token : :, Posbility: 0.0205
Next Token : s, Posbility: 0.0264
Next Token : ::, Posbility: 0.4121
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : :, Posbility: 0.0015
Next Token : ->, Posbility: 0.0036
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0022
Next Token :  [], Posbility: 0.0087
Next Token :  l, Posbility: 0.0111
Next Token :  rest, Posbility: 0.0820
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ls, Posbility: 0.0118
Next Token : lst, Posbility: 0.0134
Next Token : tail, Posbility: 0.0251
Next Token : _, Posbility: 0.0684
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token : _, Posbility: 0.0019
Next Token : ', Posbility: 0.0109
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0015
Next Token :  =>, Posbility: 0.0022
Next Token :   , Posbility: 0.0024
Next Token :  when, Posbility: 0.1172
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0031
Next Token : ::, Posbility: 0.0229
Next Token : ->, Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0044
Next Token :  match, Posbility: 0.0093
Next Token :  [, Posbility: 0.0688
Next Token :  , Posbility: 0.3965
Next Token : 
, Posbility: 0.5078
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0070
Next Token :   , Posbility: 0.0101
Next Token :      , Posbility: 0.0115
Next Token :     , Posbility: 0.3359
Next Token :       , Posbility: 0.6250
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0347
Next Token : List, Posbility: 0.0571
Next Token : match, Posbility: 0.0830
Next Token : if, Posbility: 0.2559
Next Token : let, Posbility: 0.4785
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0255
Next Token :  l, Posbility: 0.0255
Next Token :  i, Posbility: 0.0327
Next Token :  rec, Posbility: 0.1885
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0459
Next Token : lst, Posbility: 0.0459
Next Token : split, Posbility: 0.1104
Next Token : n, Posbility: 0.1602
Next Token : x, Posbility: 0.2637
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0403
Next Token : n, Posbility: 0.0403
Next Token :  =, Posbility: 0.0850
Next Token : _, Posbility: 0.1240
Next Token : s, Posbility: 0.5547
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0449
Next Token : 2, Posbility: 0.0742
Next Token :  =, Posbility: 0.2012
Next Token : ', Posbility: 0.2598
Next Token : _, Posbility: 0.3320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0432
Next Token : 1, Posbility: 0.0432
Next Token : new, Posbility: 0.0488
Next Token : n, Posbility: 0.0554
Next Token : split, Posbility: 0.2188
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0059
Next Token : ed, Posbility: 0.0059
Next Token : _, Posbility: 0.0337
Next Token : ted, Posbility: 0.0713
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0014
Next Token :  list, Posbility: 0.0014
Next Token :  [, Posbility: 0.0039
Next Token : 
, Posbility: 0.0415
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0111
Next Token : Array, Posbility: 0.0111
Next Token : x, Posbility: 0.0820
Next Token : List, Posbility: 0.0820
Next Token : split, Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ter, Posbility: 0.0001
Next Token :  list, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : by, Posbility: 0.0001
Next Token : at, Posbility: 0.0001
Next Token : nth, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token :  (1, Posbility: 0.0015
Next Token : (, Posbility: 0.0025
Next Token :  ~, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token : nth, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0374
Next Token : n, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0007
Next Token :  ~, Posbility: 0.0012
Next Token :  (1, Posbility: 0.0015
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : lst, Posbility: 0.0009
Next Token : (, Posbility: 0.0179
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : ;, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0179
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0008
Next Token :     , Posbility: 0.0010
Next Token :         , Posbility: 0.0024
Next Token :      , Posbility: 0.0159
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.1270
Next Token : if, Posbility: 0.1445
Next Token : x, Posbility: 0.1445
Next Token : List, Posbility: 0.1445
Next Token : let, Posbility: 0.3066
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0270
Next Token :  len, Posbility: 0.0270
Next Token :  new, Posbility: 0.0444
Next Token :  rec, Posbility: 0.1553
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0361
Next Token : y, Posbility: 0.0408
Next Token : n, Posbility: 0.0674
Next Token : split, Posbility: 0.1836
Next Token : x, Posbility: 0.4395
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0023
Next Token :  , Posbility: 0.0038
Next Token :  =, Posbility: 0.0757
Next Token : s, Posbility: 0.3398
Next Token : _, Posbility: 0.5586
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : new, Posbility: 0.0090
Next Token : first, Posbility: 0.0090
Next Token : head, Posbility: 0.0090
Next Token : list, Posbility: 0.0312
Next Token : split, Posbility: 0.8047
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0055
Next Token :  , Posbility: 0.0055
Next Token : _, Posbility: 0.0408
Next Token : s, Posbility: 0.1108
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0037
Next Token :  fun, Posbility: 0.0054
Next Token : 
, Posbility: 0.0272
Next Token :  [, Posbility: 0.0349
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nth, Posbility: 0.0251
Next Token : (, Posbility: 0.0286
Next Token : List, Posbility: 0.1445
Next Token : split, Posbility: 0.1865
Next Token : x, Posbility: 0.4473
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0388
Next Token : _, Posbility: 0.0825
Next Token : ::, Posbility: 0.1055
Next Token : s, Posbility: 0.3691
Next Token :  , Posbility: 0.3691
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0005
Next Token : @@, Posbility: 0.0010
Next Token : ^, Posbility: 0.0066
Next Token : :, Posbility: 0.0139
Next Token : ::, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0009
Next Token :  [], Posbility: 0.0010
Next Token : 
, Posbility: 0.0013
Next Token :  [, Posbility: 0.0096
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0024
Next Token : List, Posbility: 0.0030
Next Token : (, Posbility: 0.0136
Next Token : split, Posbility: 0.0175
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : ', Posbility: 0.0028
Next Token : _, Posbility: 0.0140
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  |, Posbility: 0.0007
Next Token :  in, Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cut, Posbility: 0.0000
Next Token : parts, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : part, Posbility: 0.0000
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0024
Next Token : ;, Posbility: 0.0031
Next Token : 
, Posbility: 0.0045
Next Token :  |, Posbility: 0.0226
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  [, Posbility: 0.0007
Next Token : 

, Posbility: 0.0010
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :         , Posbility: 0.0007
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0483
Next Token : if, Posbility: 0.0483
Next Token : [, Posbility: 0.1025
Next Token : let, Posbility: 0.1914
Next Token : x, Posbility: 0.5195
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0003
Next Token : s, Posbility: 0.0354
Next Token :  , Posbility: 0.0513
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_
 score:False
Error type: noerr
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0176
Next Token :  ++, Posbility: 0.0422
Next Token : 

, Posbility: 0.2139
Next Token :  , Posbility: 0.2139
Next Token : 
, Posbility: 0.4531
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0171
Next Token : 

, Posbility: 0.0383
Next Token :     , Posbility: 0.0435
Next Token : in, Posbility: 0.1338
Next Token :   , Posbility: 0.6406
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0009
Next Token : (, Posbility: 0.0039
Next Token : 
, Posbility: 0.0047
Next Token : ;, Posbility: 0.1455
Next Token : |, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0028
Next Token :  acc, Posbility: 0.0028
Next Token :  [, Posbility: 0.0204
Next Token :  [], Posbility: 0.0806
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0066
Next Token : y, Posbility: 0.0085
Next Token : (, Posbility: 0.0109
Next Token : x, Posbility: 0.4648
Next Token : _, Posbility: 0.4648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0031
Next Token :  as, Posbility: 0.0031
Next Token : x, Posbility: 0.0051
Next Token : ::, Posbility: 0.0074
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0010
Next Token : x, Posbility: 0.0026
Next Token : if, Posbility: 0.0026
Next Token : ::, Posbility: 0.2656
Next Token : ->, Posbility: 0.7266
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  error, Posbility: 0.0342
Next Token :  [], Posbility: 0.0342
Next Token :  fail, Posbility: 0.1533
Next Token : 
, Posbility: 0.1973
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0505
Next Token : panic, Posbility: 0.0732
Next Token : raise, Posbility: 0.1553
Next Token : split, Posbility: 0.1758
Next Token : assert, Posbility: 0.2910
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0061
Next Token :  False, Posbility: 0.0129
Next Token : _, Posbility: 0.0166
Next Token :  !, Posbility: 0.0352
Next Token :  false, Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> assert false
 score:False
Error type: noerr
---------------------------
Next Token :  ", Posbility: 0.0281
Next Token : ;, Posbility: 0.0410
Next Token : ), Posbility: 0.0767
Next Token : 
, Posbility: 0.2080
Next Token : 

, Posbility: 0.5664
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> assert false


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :38.12034630775452

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>