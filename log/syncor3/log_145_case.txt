code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0204
Next Token :  tuple, Posbility: 0.0204
Next Token :  get, Posbility: 0.0488
Next Token :  , Posbility: 0.3184
Next Token :  rec, Posbility: 0.4629
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0295
Next Token :  find, Posbility: 0.0295
Next Token :  loop, Posbility: 0.0295
Next Token :  get, Posbility: 0.0552
Next Token :  , Posbility: 0.5234
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0388
Next Token : f, Posbility: 0.0566
Next Token : rev, Posbility: 0.0566
Next Token : rear, Posbility: 0.1055
Next Token : map, Posbility: 0.1196
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0186
Next Token : 2, Posbility: 0.0306
Next Token :  =, Posbility: 0.0306
Next Token :  , Posbility: 0.2002
Next Token : _, Posbility: 0.6172
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : car, Posbility: 0.0386
Next Token : to, Posbility: 0.0437
Next Token : list, Posbility: 0.0815
Next Token : rear, Posbility: 0.1187
Next Token : tuple, Posbility: 0.1187
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0083
Next Token :  =, Posbility: 0.0615
Next Token : _, Posbility: 0.1670
Next Token :  , Posbility: 0.2754
Next Token : s, Posbility: 0.4551
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0167
Next Token :  ~, Posbility: 0.0403
Next Token : _, Posbility: 0.0850
Next Token :  =, Posbility: 0.1406
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0410
Next Token : (, Posbility: 0.0596
Next Token : lst, Posbility: 0.0767
Next Token : x, Posbility: 0.0869
Next Token : f, Posbility: 0.4980
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0464
Next Token :  l, Posbility: 0.0679
Next Token :  tuple, Posbility: 0.1436
Next Token :  =, Posbility: 0.2363
Next Token :  , Posbility: 0.3887
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0674
Next Token : ts, Posbility: 0.0767
Next Token : lst, Posbility: 0.0869
Next Token : t, Posbility: 0.1621
Next Token : x, Posbility: 0.3438
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0005
Next Token : _, Posbility: 0.0015
Next Token :  , Posbility: 0.0095
Next Token :  =, Posbility: 0.3145
Next Token : s, Posbility: 0.6680
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : _, Posbility: 0.0013
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.0075
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0014
Next Token :  fun, Posbility: 0.0014
Next Token :  match, Posbility: 0.0608
Next Token :  , Posbility: 0.0884
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0044
Next Token :    , Posbility: 0.0072
Next Token : 	, Posbility: 0.0120
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8359
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0047
Next Token : List, Posbility: 0.0649
Next Token : if, Posbility: 0.0947
Next Token : let, Posbility: 0.1074
Next Token : match, Posbility: 0.6992
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0003
Next Token :  !, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  String, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0016
Next Token : Seq, Posbility: 0.0029
Next Token : (, Posbility: 0.0033
Next Token : List, Posbility: 0.0664
Next Token : x, Posbility: 0.9180
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  @, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0018
Next Token :  , Posbility: 0.0039
Next Token :  [, Posbility: 0.0056
Next Token :  [], Posbility: 0.0325
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :       , Posbility: 0.0012
Next Token :    , Posbility: 0.0018
Next Token :     , Posbility: 0.0757
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |[, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0154
Next Token : [], Posbility: 0.0288
Next Token : |, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0014
Next Token :  nil, Posbility: 0.0064
Next Token :  [, Posbility: 0.0137
Next Token :  , Posbility: 0.0176
Next Token :  [], Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0024
Next Token :  |, Posbility: 0.0027
Next Token :    , Posbility: 0.0035
Next Token :  =>, Posbility: 0.0051
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [];, Posbility: 0.0005
Next Token :  [, Posbility: 0.0007
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0178
Next Token :  [], Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0011
Next Token :   , Posbility: 0.0027
Next Token :  , Posbility: 0.0095
Next Token :  |, Posbility: 0.0156
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0039
Next Token :  tuple, Posbility: 0.0039
Next Token :  [{, Posbility: 0.0045
Next Token :  [, Posbility: 0.2148
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0302
Next Token : h, Posbility: 0.0342
Next Token : _, Posbility: 0.0640
Next Token : (, Posbility: 0.3672
Next Token : x, Posbility: 0.4180
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0056
Next Token : 1, Posbility: 0.0056
Next Token : s, Posbility: 0.0251
Next Token : ::, Posbility: 0.2109
Next Token :  , Posbility: 0.7344
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : :, Posbility: 0.0011
Next Token : ->, Posbility: 0.0532
Next Token : ::, Posbility: 0.9453
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0008
Next Token :  l, Posbility: 0.0010
Next Token :  [], Posbility: 0.0018
Next Token :  rest, Posbility: 0.0530
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0063
Next Token : tail, Posbility: 0.0063
Next Token : y, Posbility: 0.0117
Next Token : _, Posbility: 0.0317
Next Token : x, Posbility: 0.9297
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : ts, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : ', Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0070
Next Token : 1, Posbility: 0.0116
Next Token : _, Posbility: 0.0132
Next Token : ', Posbility: 0.0247
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : ::, Posbility: 0.0009
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0023
Next Token :   , Posbility: 0.0029
Next Token : 
, Posbility: 0.0747
Next Token :  [, Posbility: 0.2031
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0226
Next Token : let, Posbility: 0.0615
Next Token : x, Posbility: 0.1016
Next Token : (, Posbility: 0.1147
Next Token : f, Posbility: 0.6602
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0005
Next Token :  {, Posbility: 0.0008
Next Token : (, Posbility: 0.0013
Next Token :  [, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f 
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0002
Next Token : :, Posbility: 0.0003
Next Token : f, Posbility: 0.0012
Next Token : (, Posbility: 0.1816
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0041
Next Token : 

, Posbility: 0.0209
Next Token : 
, Posbility: 0.0237
Next Token :  |, Posbility: 0.0391
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0017
Next Token : @@, Posbility: 0.0031
Next Token : ^, Posbility: 0.0045
Next Token : :, Posbility: 0.0058
Next Token : ::, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : >, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 0.0025
Next Token : (, Posbility: 0.0067
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  tuple, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_
 score:False
Error type: noerr
---------------------------
Next Token : tup, Posbility: 0.0000
Next Token : rest, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : tuple, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuple
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0003
Next Token : (, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.0067
Next Token : f, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f 
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0012
Next Token :  , Posbility: 0.0054
Next Token : ), Posbility: 0.0090
Next Token : 

, Posbility: 0.4883
Next Token : 
, Posbility: 0.4883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0155
Next Token : (, Posbility: 0.0211
Next Token :   , Posbility: 0.0559
Next Token : end, Posbility: 0.0630
Next Token : let, Posbility: 0.3633
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0181
Next Token :  tuple, Posbility: 0.0337
Next Token :  main, Posbility: 0.0630
Next Token :  , Posbility: 0.2832
Next Token :  rec, Posbility: 0.4668
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0198
Next Token :  get, Posbility: 0.0223
Next Token :  tuple, Posbility: 0.0287
Next Token :  list, Posbility: 0.0325
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0175
Next Token : flatten, Posbility: 0.0175
Next Token : append, Posbility: 0.0225
Next Token : f, Posbility: 0.0369
Next Token : map, Posbility: 0.6562
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0025
Next Token : 2, Posbility: 0.0112
Next Token : i, Posbility: 0.0209
Next Token :  , Posbility: 0.0569
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0079
Next Token : pairs, Posbility: 0.0090
Next Token : lists, Posbility: 0.0115
Next Token : list, Posbility: 0.0664
Next Token : tuple, Posbility: 0.7148
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuple
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0021
Next Token : 2, Posbility: 0.0035
Next Token :  , Posbility: 0.0693
Next Token : _, Posbility: 0.0693
Next Token : s, Posbility: 0.8477
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0066
Next Token : ', Posbility: 0.0801
Next Token : 2, Posbility: 0.0908
Next Token :  , Posbility: 0.1162
Next Token : _, Posbility: 0.6680
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0400
Next Token : opt, Posbility: 0.0513
Next Token : rev, Posbility: 0.0513
Next Token : rec, Posbility: 0.0659
Next Token : list, Posbility: 0.0747
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0024
Next Token :  l, Posbility: 0.0024
Next Token :  =, Posbility: 0.0205
Next Token : _, Posbility: 0.0811
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : func, Posbility: 0.0014
Next Token : lst, Posbility: 0.0018
Next Token : (, Posbility: 0.0039
Next Token : x, Posbility: 0.0288
Next Token : f, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0017
Next Token :  l, Posbility: 0.0114
Next Token :  list, Posbility: 0.0146
Next Token :  =, Posbility: 0.0576
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ts, Posbility: 0.0062
Next Token : lst, Posbility: 0.0090
Next Token : ls, Posbility: 0.0101
Next Token : (, Posbility: 0.0215
Next Token : x, Posbility: 0.9141
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token : list, Posbility: 0.0014
Next Token : sl, Posbility: 0.0024
Next Token :  =, Posbility: 0.0291
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0040
Next Token :  list, Posbility: 0.0040
Next Token :  , Posbility: 0.0051
Next Token : _, Posbility: 0.0051
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0022
Next Token :  list, Posbility: 0.0022
Next Token :  match, Posbility: 0.0036
Next Token :  , Posbility: 0.1055
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0004
Next Token :    , Posbility: 0.0009
Next Token : let, Posbility: 0.0017
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0181
Next Token : map, Posbility: 0.0557
Next Token : List, Posbility: 0.0713
Next Token : let, Posbility: 0.1338
Next Token : match, Posbility: 0.6758
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  list, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : f, Posbility: 0.0017
Next Token : map, Posbility: 0.0022
Next Token : List, Posbility: 0.0067
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  nil, Posbility: 0.0015
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0004
Next Token :  as, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  [, Posbility: 0.0023
Next Token :  nil, Posbility: 0.0023
Next Token :  , Posbility: 0.0469
Next Token :  [], Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0018
Next Token :  tuple, Posbility: 0.0018
Next Token :  [], Posbility: 0.0063
Next Token :  [, Posbility: 0.0464
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0071
Next Token : h, Posbility: 0.0103
Next Token : _, Posbility: 0.0171
Next Token : (, Posbility: 0.1113
Next Token : x, Posbility: 0.8203
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : :, Posbility: 0.0014
Next Token : ::, Posbility: 0.0354
Next Token : s, Posbility: 0.0454
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0004
Next Token : :, Posbility: 0.0032
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0008
Next Token :  rest, Posbility: 0.0013
Next Token :  [, Posbility: 0.0015
Next Token :  [], Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0012
Next Token : _, Posbility: 0.0067
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : ,, Posbility: 0.0005
Next Token : ', Posbility: 0.0006
Next Token :  when, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ::, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0045
Next Token :  list, Posbility: 0.0045
Next Token : 
, Posbility: 0.0554
Next Token :  [, Posbility: 0.2480
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cons, Posbility: 0.0605
Next Token : x, Posbility: 0.0884
Next Token : List, Posbility: 0.1133
Next Token : Cons, Posbility: 0.1133
Next Token : f, Posbility: 0.5078
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0016
Next Token :  {, Posbility: 0.0038
Next Token : :, Posbility: 0.0043
Next Token :  [, Posbility: 0.0522
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0009
Next Token : f, Posbility: 0.0013
Next Token : :, Posbility: 0.0015
Next Token : (, Posbility: 0.2207
Next Token : x, Posbility: 0.7695
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0017
Next Token :  [, Posbility: 0.0017
Next Token :  |, Posbility: 0.0024
Next Token : ::, Posbility: 0.0045
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : ^, Posbility: 0.0007
Next Token : :, Posbility: 0.0067
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  !, Posbility: 0.0005
Next Token :  list, Posbility: 0.0012
Next Token :  [, Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0011
Next Token : cons, Posbility: 0.0016
Next Token : (, Posbility: 0.0057
Next Token : x, Posbility: 0.0227
Next Token : map, Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  tuple, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_
 score:False
Error type: noerr
---------------------------
Next Token : tree, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : tup, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : tuple, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuple
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  list, Posbility: 0.0005
Next Token :  , Posbility: 0.0159
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list 
 score:False
Error type: noerr
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0012
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list f
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list f 
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list f x
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list f xs
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0013
Next Token : , Posbility: 0.0018
Next Token :  , Posbility: 0.0064
Next Token : 
, Posbility: 0.3984
Next Token : 

, Posbility: 0.5820
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. *)
let rec map_tuples f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples f xs
let rec map_tuples_list f xs =
  match xs with
  | [] -> []
  | x :: xs -> f x :: map_tuples_list f xs


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :49.780710220336914

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>