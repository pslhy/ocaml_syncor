code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.1104
Next Token :  check, Posbility: 0.1250
Next Token :  contains, Posbility: 0.1250
Next Token :  , Posbility: 0.1416
Next Token :  rec, Posbility: 0.2988
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0447
Next Token :  contains, Posbility: 0.0835
Next Token :  check, Posbility: 0.1377
Next Token :  , Posbility: 0.2275
Next Token :  is, Posbility: 0.2275
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0026
Next Token : Unique, Posbility: 0.0056
Next Token : Dist, Posbility: 0.0081
Next Token : One, Posbility: 0.0220
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dis, Posbility: 0.0356
Next Token : single, Posbility: 0.0457
Next Token : unique, Posbility: 0.1592
Next Token : distinct, Posbility: 0.1807
Next Token : one, Posbility: 0.2988
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0013
Next Token : (, Posbility: 0.0060
Next Token :  =, Posbility: 0.0164
Next Token :  , Posbility: 0.0732
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0128
Next Token : number, Posbility: 0.0347
Next Token : unique, Posbility: 0.0347
Next Token : element, Posbility: 0.0942
Next Token : distinct, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0103
Next Token : (, Posbility: 0.1108
Next Token :  =, Posbility: 0.1260
Next Token :  , Posbility: 0.3418
Next Token : _, Posbility: 0.3418
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : num, Posbility: 0.0170
Next Token : list, Posbility: 0.0405
Next Token : number, Posbility: 0.0591
Next Token : elem, Posbility: 0.0757
Next Token : element, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0239
Next Token : (, Posbility: 0.0271
Next Token : _, Posbility: 0.0947
Next Token :  =, Posbility: 0.1074
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0625
Next Token : lst, Posbility: 0.1167
Next Token : n, Posbility: 0.1167
Next Token : (, Posbility: 0.1318
Next Token : x, Posbility: 0.3184
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0085
Next Token :  acc, Posbility: 0.0109
Next Token :  , Posbility: 0.1172
Next Token : s, Posbility: 0.3594
Next Token :  =, Posbility: 0.4629
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0022
Next Token :  function, Posbility: 0.0067
Next Token :  match, Posbility: 0.0435
Next Token :  , Posbility: 0.0630
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0077
Next Token :    , Posbility: 0.0144
Next Token : 	, Posbility: 0.0164
Next Token :     , Posbility: 0.1543
Next Token :   , Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0098
Next Token : List, Posbility: 0.0206
Next Token : if, Posbility: 0.1729
Next Token : let, Posbility: 0.2217
Next Token : match, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0010
Next Token :  !, Posbility: 0.0010
Next Token :  count, Posbility: 0.0011
Next Token :  String, Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0026
Next Token : (, Posbility: 0.0090
Next Token : Seq, Posbility: 0.0103
Next Token : List, Posbility: 0.2334
Next Token : x, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0012
Next Token :  =, Posbility: 0.0015
Next Token :  , Posbility: 0.0024
Next Token :  @, Posbility: 0.0031
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token :  , Posbility: 0.0060
Next Token :  [, Posbility: 0.0087
Next Token :  [], Posbility: 0.0830
Next Token : 
, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :       , Posbility: 0.0016
Next Token :    , Posbility: 0.0026
Next Token :     , Posbility: 0.0752
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0192
Next Token : [], Posbility: 0.0522
Next Token : |, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0018
Next Token :  nil, Posbility: 0.0131
Next Token :  [, Posbility: 0.0277
Next Token :  , Posbility: 0.0356
Next Token :  [], Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0062
Next Token :   , Posbility: 0.0062
Next Token :  =>, Posbility: 0.0132
Next Token :  |, Posbility: 0.0217
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token : -, Posbility: 0.0004
Next Token : â†’, Posbility: 0.0008
Next Token : ::, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0205
Next Token :  , Posbility: 0.0557
Next Token :  False, Posbility: 0.0557
Next Token :  false, Posbility: 0.4102
Next Token :  true, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0024
Next Token :   , Posbility: 0.0035
Next Token :  |, Posbility: 0.0065
Next Token :  , Posbility: 0.0084
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0063
Next Token :  a, Posbility: 0.0118
Next Token :  [], Posbility: 0.0133
Next Token :  [, Posbility: 0.2080
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0229
Next Token : head, Posbility: 0.0260
Next Token : hd, Posbility: 0.0625
Next Token : _, Posbility: 0.2793
Next Token : x, Posbility: 0.5234
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0104
Next Token : s, Posbility: 0.0283
Next Token : :, Posbility: 0.0466
Next Token : ::, Posbility: 0.4434
Next Token :  , Posbility: 0.4434
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : if, Posbility: 0.0009
Next Token : ->, Posbility: 0.0046
Next Token : :, Posbility: 0.0052
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0040
Next Token :  [, Posbility: 0.0052
Next Token :  [], Posbility: 0.0435
Next Token :  rest, Posbility: 0.0559
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0236
Next Token : t, Posbility: 0.0342
Next Token : _, Posbility: 0.1533
Next Token : y, Posbility: 0.1533
Next Token : x, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0037
Next Token : _, Posbility: 0.0037
Next Token : 1, Posbility: 0.0037
Next Token : ', Posbility: 0.0742
Next Token : s, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0017
Next Token :   , Posbility: 0.0035
Next Token :  =>, Posbility: 0.0045
Next Token :  when, Posbility: 0.1167
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0005
Next Token : if, Posbility: 0.0065
Next Token : ::, Posbility: 0.0228
Next Token : ->, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0469
Next Token :  false, Posbility: 0.0771
Next Token :  , Posbility: 0.1279
Next Token :  is, Posbility: 0.1279
Next Token : 
, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0063
Next Token :    , Posbility: 0.0596
Next Token :      , Posbility: 0.0864
Next Token :     , Posbility: 0.3418
Next Token :       , Posbility: 0.4980
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0442
Next Token : x, Posbility: 0.0500
Next Token : match, Posbility: 0.0938
Next Token : if, Posbility: 0.1982
Next Token : let, Posbility: 0.5391
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0337
Next Token :  first, Posbility: 0.0337
Next Token :  v, Posbility: 0.0381
Next Token :  rec, Posbility: 0.1504
Next Token :  , Posbility: 0.4629
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0286
Next Token : f, Posbility: 0.0366
Next Token : distinct, Posbility: 0.0471
Next Token : y, Posbility: 0.2393
Next Token : x, Posbility: 0.3066
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0923
Next Token : 0, Posbility: 0.1050
Next Token : _, Posbility: 0.1348
Next Token : s, Posbility: 0.1348
Next Token :  =, Posbility: 0.3223
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0014
Next Token :  Car, Posbility: 0.0079
Next Token :  First, Posbility: 0.0131
Next Token :  first, Posbility: 0.0356
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0078
Next Token : Head, Posbility: 0.0100
Next Token : head, Posbility: 0.0654
Next Token : List, Posbility: 0.2275
Next Token : x, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0366
Next Token : s, Posbility: 0.0469
Next Token : [0], Posbility: 0.0469
Next Token :  , Posbility: 0.0776
Next Token :  in, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token : 

, Posbility: 0.0012
Next Token :  is, Posbility: 0.0028
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0016
Next Token :     , Posbility: 0.0033
Next Token :         , Posbility: 0.0037
Next Token :      , Posbility: 0.0747
Next Token :       , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0547
Next Token : x, Posbility: 0.1021
Next Token : match, Posbility: 0.1021
Next Token : if, Posbility: 0.1904
Next Token : let, Posbility: 0.4570
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0160
Next Token :  one, Posbility: 0.0232
Next Token :  is, Posbility: 0.0383
Next Token :  rec, Posbility: 0.0918
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0128
Next Token : f, Posbility: 0.0210
Next Token : distinct, Posbility: 0.0306
Next Token : y, Posbility: 0.1211
Next Token : x, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0038
Next Token : ', Posbility: 0.0103
Next Token : _, Posbility: 0.0132
Next Token :  =, Posbility: 0.0359
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0021
Next Token : 2, Posbility: 0.0024
Next Token : _, Posbility: 0.0107
Next Token : ', Posbility: 0.0107
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0008
Next Token :  is, Posbility: 0.0009
Next Token : 
, Posbility: 0.0010
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Array, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : List, Posbility: 0.0059
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  is, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0011
Next Token :     , Posbility: 0.0015
Next Token :         , Posbility: 0.0017
Next Token :      , Posbility: 0.1318
Next Token :       , Posbility: 0.8594
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0767
Next Token : match, Posbility: 0.0767
Next Token : x, Posbility: 0.0864
Next Token : if, Posbility: 0.1621
Next Token : let, Posbility: 0.4980
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0131
Next Token :  one, Posbility: 0.0168
Next Token :  is, Posbility: 0.0278
Next Token :  rec, Posbility: 0.2637
Next Token :  , Posbility: 0.4922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0168
Next Token : f, Posbility: 0.0315
Next Token : distinct, Posbility: 0.0588
Next Token : y, Posbility: 0.1602
Next Token : x, Posbility: 0.4941
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0209
Next Token : ', Posbility: 0.0237
Next Token : _, Posbility: 0.0645
Next Token :  =, Posbility: 0.3281
Next Token : s, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0342
Next Token : 2, Posbility: 0.0564
Next Token : ', Posbility: 0.0723
Next Token : _, Posbility: 0.1738
Next Token :  =, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0190
Next Token : 
, Posbility: 0.0403
Next Token :  [, Posbility: 0.0403
Next Token :  is, Posbility: 0.0967
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0079
Next Token : Map, Posbility: 0.0079
Next Token : Array, Posbility: 0.0148
Next Token : x, Posbility: 0.1797
Next Token : List, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0294
Next Token : sort, Posbility: 0.0332
Next Token : map, Posbility: 0.1318
Next Token : filter, Posbility: 0.2461
Next Token : rev, Posbility: 0.4062
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0006
Next Token : ., Posbility: 0.0022
Next Token : (, Posbility: 0.0028
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 0.0010
Next Token : ;, Posbility: 0.0015
Next Token : 
, Posbility: 0.0017
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0028
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0005
Next Token :     , Posbility: 0.0005
Next Token :    , Posbility: 0.0005
Next Token :      , Posbility: 0.1187
Next Token :       , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0757
Next Token : match, Posbility: 0.0854
Next Token : x, Posbility: 0.1099
Next Token : List, Posbility: 0.1406
Next Token : let, Posbility: 0.4922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  one, Posbility: 0.0143
Next Token :  first, Posbility: 0.0143
Next Token :  is, Posbility: 0.0183
Next Token :  rec, Posbility: 0.1055
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0082
Next Token : f, Posbility: 0.0120
Next Token : distinct, Posbility: 0.0327
Next Token : y, Posbility: 0.0786
Next Token : x, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0023
Next Token : 1, Posbility: 0.0027
Next Token : _, Posbility: 0.0153
Next Token :  =, Posbility: 0.3066
Next Token : s, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0038
Next Token : 2, Posbility: 0.0049
Next Token : ', Posbility: 0.0072
Next Token : _, Posbility: 0.0284
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0037
Next Token :  [, Posbility: 0.0101
Next Token : 
, Posbility: 0.0275
Next Token :  is, Posbility: 0.0275
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0032
Next Token : ref, Posbility: 0.0041
Next Token : (, Posbility: 0.0059
Next Token : x, Posbility: 0.0815
Next Token : List, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0304
Next Token : distinct, Posbility: 0.0442
Next Token : map, Posbility: 0.0825
Next Token : filter, Posbility: 0.2539
Next Token : rev, Posbility: 0.2871
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : map, Posbility: 0.0017
Next Token : ., Posbility: 0.0047
Next Token : _, Posbility: 0.0835
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : List, Posbility: 0.0066
Next Token : (, Posbility: 0.0178
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.1064
Next Token :       , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0737
Next Token : match, Posbility: 0.0737
Next Token : x, Posbility: 0.1069
Next Token : List, Posbility: 0.1768
Next Token : let, Posbility: 0.4785
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  one, Posbility: 0.0108
Next Token :  first, Posbility: 0.0122
Next Token :  is, Posbility: 0.0139
Next Token :  rec, Posbility: 0.0903
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0080
Next Token : (, Posbility: 0.0090
Next Token : distinct, Posbility: 0.0216
Next Token : y, Posbility: 0.0588
Next Token : x, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0015
Next Token : 1, Posbility: 0.0019
Next Token : _, Posbility: 0.0051
Next Token :  =, Posbility: 0.2178
Next Token : s, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0021
Next Token : 1, Posbility: 0.0024
Next Token : ', Posbility: 0.0035
Next Token : _, Posbility: 0.0095
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0030
Next Token :  is, Posbility: 0.0132
Next Token : 
, Posbility: 0.0170
Next Token :  [, Posbility: 0.0170
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0025
Next Token : Set, Posbility: 0.0025
Next Token : (, Posbility: 0.0060
Next Token : x, Posbility: 0.0732
Next Token : List, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0258
Next Token : sort, Posbility: 0.0330
Next Token : map, Posbility: 0.0544
Next Token : filter, Posbility: 0.1152
Next Token : rev, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token : ', Posbility: 0.0005
Next Token : ., Posbility: 0.0035
Next Token : _, Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0025
Next Token : List, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0017
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.1064
Next Token :       , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0640
Next Token : match, Posbility: 0.0723
Next Token : x, Posbility: 0.1191
Next Token : List, Posbility: 0.1973
Next Token : let, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0066
Next Token :  one, Posbility: 0.0084
Next Token :  is, Posbility: 0.0096
Next Token :  rec, Posbility: 0.0427
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0041
Next Token : (, Posbility: 0.0060
Next Token : distinct, Posbility: 0.0112
Next Token : y, Posbility: 0.0347
Next Token : x, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token :  in, Posbility: 0.0013
Next Token : _, Posbility: 0.0027
Next Token :  =, Posbility: 0.1465
Next Token : s, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0013
Next Token : ', Posbility: 0.0015
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0023
Next Token :  is, Posbility: 0.0039
Next Token : 
, Posbility: 0.0135
Next Token :  [, Posbility: 0.0135
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0012
Next Token : if, Posbility: 0.0020
Next Token : (, Posbility: 0.0043
Next Token : x, Posbility: 0.0522
Next Token : List, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0131
Next Token : sort, Posbility: 0.0168
Next Token : map, Posbility: 0.0190
Next Token : filter, Posbility: 0.0278
Next Token : rev, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : ., Posbility: 0.0010
Next Token : _, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : List, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0004
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :      , Posbility: 0.0952
Next Token :       , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0566
Next Token : match, Posbility: 0.0640
Next Token : x, Posbility: 0.1060
Next Token : List, Posbility: 0.1748
Next Token : let, Posbility: 0.5391
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0053
Next Token :  is, Posbility: 0.0077
Next Token :  one, Posbility: 0.0077
Next Token :  rec, Posbility: 0.0270
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0029
Next Token : (, Posbility: 0.0043
Next Token : distinct, Posbility: 0.0070
Next Token : y, Posbility: 0.0245
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :  in, Posbility: 0.0010
Next Token : _, Posbility: 0.0017
Next Token :  =, Posbility: 0.1182
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0008
Next Token : ', Posbility: 0.0009
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.0032
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0011
Next Token :  is, Posbility: 0.0015
Next Token : 
, Posbility: 0.0066
Next Token :  [, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0009
Next Token : if, Posbility: 0.0014
Next Token : (, Posbility: 0.0030
Next Token : x, Posbility: 0.0466
Next Token : List, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0100
Next Token : filter, Posbility: 0.0100
Next Token : sort, Posbility: 0.0100
Next Token : reverse, Posbility: 0.0128
Next Token : rev, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : ., Posbility: 0.0005
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : List, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0004
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.0757
Next Token :       , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0537
Next Token : match, Posbility: 0.0608
Next Token : x, Posbility: 0.0884
Next Token : List, Posbility: 0.1650
Next Token : let, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0034
Next Token :  is, Posbility: 0.0049
Next Token :  one, Posbility: 0.0055
Next Token :  rec, Posbility: 0.0171
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0021
Next Token : (, Posbility: 0.0034
Next Token : distinct, Posbility: 0.0050
Next Token : y, Posbility: 0.0153
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token :  in, Posbility: 0.0007
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.0757
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.0025
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0007
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.0051
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0006
Next Token : if, Posbility: 0.0010
Next Token : (, Posbility: 0.0023
Next Token : x, Posbility: 0.0415
Next Token : List, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0024
Next Token : map, Posbility: 0.0039
Next Token : sort, Posbility: 0.0039
Next Token : reverse, Posbility: 0.0106
Next Token : rev, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0757
Next Token :       , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0444
Next Token : match, Posbility: 0.0571
Next Token : x, Posbility: 0.0830
Next Token : List, Posbility: 0.1553
Next Token : let, Posbility: 0.6133
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0026
Next Token :  is, Posbility: 0.0038
Next Token :  one, Posbility: 0.0049
Next Token :  rec, Posbility: 0.0134
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0013
Next Token : (, Posbility: 0.0024
Next Token : distinct, Posbility: 0.0031
Next Token : y, Posbility: 0.0095
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token :  in, Posbility: 0.0005
Next Token : _, Posbility: 0.0006
Next Token :  =, Posbility: 0.0598
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0004
Next Token : 1, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0005
Next Token :  filter, Posbility: 0.0005
Next Token : 
, Posbility: 0.0036
Next Token :  [, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0004
Next Token : if, Posbility: 0.0005
Next Token : (, Posbility: 0.0016
Next Token : x, Posbility: 0.0291
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0014
Next Token : map, Posbility: 0.0024
Next Token : sort, Posbility: 0.0039
Next Token : reverse, Posbility: 0.0107
Next Token : rev, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0601
Next Token :       , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0425
Next Token : match, Posbility: 0.0481
Next Token : x, Posbility: 0.0703
Next Token : List, Posbility: 0.1309
Next Token : let, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0019
Next Token :  is, Posbility: 0.0024
Next Token :  one, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0083
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0019
Next Token : distinct, Posbility: 0.0021
Next Token : y, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 0.0474
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  filter, Posbility: 0.0003
Next Token : 
, Posbility: 0.0022
Next Token :  [, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0003
Next Token : if, Posbility: 0.0004
Next Token : (, Posbility: 0.0014
Next Token : x, Posbility: 0.0292
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0009
Next Token : map, Posbility: 0.0024
Next Token : sort, Posbility: 0.0024
Next Token : reverse, Posbility: 0.0108
Next Token : rev, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0601
Next Token :       , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0347
Next Token : match, Posbility: 0.0447
Next Token : x, Posbility: 0.0649
Next Token : List, Posbility: 0.1211
Next Token : let, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0016
Next Token :  is, Posbility: 0.0021
Next Token :  one, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0074
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0017
Next Token : distinct, Posbility: 0.0021
Next Token : y, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0374
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  filter, Posbility: 0.0003
Next Token : 
, Posbility: 0.0017
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.0228
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0005
Next Token : map, Posbility: 0.0009
Next Token : sort, Posbility: 0.0015
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0532
Next Token :       , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0317
Next Token : match, Posbility: 0.0461
Next Token : x, Posbility: 0.0522
Next Token : List, Posbility: 0.1108
Next Token : let, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0015
Next Token :  is, Posbility: 0.0019
Next Token :  one, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0058
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0008
Next Token : (, Posbility: 0.0013
Next Token : distinct, Posbility: 0.0017
Next Token : y, Posbility: 0.0052
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0293
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0010
Next Token :  [, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0229
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0005
Next Token : map, Posbility: 0.0015
Next Token : sort, Posbility: 0.0015
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0474
Next Token :       , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0359
Next Token : match, Posbility: 0.0408
Next Token : x, Posbility: 0.0522
Next Token : List, Posbility: 0.1108
Next Token : let, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0011
Next Token :  is, Posbility: 0.0015
Next Token :  one, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0013
Next Token : distinct, Posbility: 0.0015
Next Token : y, Posbility: 0.0045
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0293
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.0159
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0003
Next Token : map, Posbility: 0.0009
Next Token : sort, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0420
Next Token :       , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0289
Next Token : match, Posbility: 0.0420
Next Token : x, Posbility: 0.0476
Next Token : List, Posbility: 0.1006
Next Token : let, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0011
Next Token :  v, Posbility: 0.0011
Next Token :  one, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0013
Next Token : distinct, Posbility: 0.0017
Next Token : y, Posbility: 0.0040
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0008
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0159
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0005
Next Token : sort, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0474
Next Token :       , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0302
Next Token : match, Posbility: 0.0342
Next Token : x, Posbility: 0.0439
Next Token : List, Posbility: 0.0820
Next Token : let, Posbility: 0.7773
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0010
Next Token :  v, Posbility: 0.0010
Next Token :  one, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : distinct, Posbility: 0.0009
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0031
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0124
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0003
Next Token : map, Posbility: 0.0007
Next Token : sort, Posbility: 0.0012
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0420
Next Token :       , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0269
Next Token : match, Posbility: 0.0347
Next Token : x, Posbility: 0.0391
Next Token : List, Posbility: 0.0830
Next Token : let, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0006
Next Token :  v, Posbility: 0.0006
Next Token :  one, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0007
Next Token : distinct, Posbility: 0.0009
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0031
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0203
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0124
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0004
Next Token : sort, Posbility: 0.0007
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0474
Next Token :       , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0273
Next Token : match, Posbility: 0.0309
Next Token : x, Posbility: 0.0398
Next Token : List, Posbility: 0.0742
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0007
Next Token :  v, Posbility: 0.0007
Next Token :  one, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0024
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : distinct, Posbility: 0.0007
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0124
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0002
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0007
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0374
Next Token :       , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0275
Next Token : match, Posbility: 0.0311
Next Token : x, Posbility: 0.0352
Next Token : List, Posbility: 0.0747
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0005
Next Token :  v, Posbility: 0.0006
Next Token :  one, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : distinct, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0159
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0097
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0007
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0374
Next Token :       , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0220
Next Token : match, Posbility: 0.0248
Next Token : x, Posbility: 0.0361
Next Token : List, Posbility: 0.0674
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0005
Next Token :  v, Posbility: 0.0007
Next Token :  one, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : distinct, Posbility: 0.0006
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0159
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0110
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0005
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0250
Next Token : match, Posbility: 0.0250
Next Token : x, Posbility: 0.0322
Next Token : List, Posbility: 0.0601
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0006
Next Token :  v, Posbility: 0.0006
Next Token :  one, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : distinct, Posbility: 0.0006
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0085
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0222
Next Token : match, Posbility: 0.0222
Next Token : x, Posbility: 0.0325
Next Token : List, Posbility: 0.0605
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0004
Next Token :  v, Posbility: 0.0005
Next Token :  one, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : distinct, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0076
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0259
Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0222
Next Token : if, Posbility: 0.0251
Next Token : x, Posbility: 0.0322
Next Token : List, Posbility: 0.0603
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :  v, Posbility: 0.0005
Next Token :  one, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : distinct, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0159
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0076
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0293
Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0200
Next Token : match, Posbility: 0.0200
Next Token : x, Posbility: 0.0292
Next Token : List, Posbility: 0.0544
Next Token : let, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0004
Next Token :  v, Posbility: 0.0005
Next Token :  one, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0125
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0059
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0259
Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0179
Next Token : if, Posbility: 0.0203
Next Token : x, Posbility: 0.0260
Next Token : List, Posbility: 0.0486
Next Token : let, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :  v, Posbility: 0.0003
Next Token :  one, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0067
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0059
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0293
Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0179
Next Token : if, Posbility: 0.0203
Next Token : x, Posbility: 0.0260
Next Token : List, Posbility: 0.0486
Next Token : let, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0004
Next Token :  v, Posbility: 0.0004
Next Token :  one, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0259
Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0160
Next Token : if, Posbility: 0.0205
Next Token : x, Posbility: 0.0232
Next Token : List, Posbility: 0.0435
Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :  v, Posbility: 0.0004
Next Token :  one, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : distinct, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0229
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0142
Next Token : if, Posbility: 0.0206
Next Token : x, Posbility: 0.0233
Next Token : List, Posbility: 0.0437
Next Token : let, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :  v, Posbility: 0.0003
Next Token :  one, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0046
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0229
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0143
Next Token : x, Posbility: 0.0208
Next Token : if, Posbility: 0.0208
Next Token : List, Posbility: 0.0388
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  one, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : distinct, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0041
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0229
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0128
Next Token : if, Posbility: 0.0164
Next Token : x, Posbility: 0.0186
Next Token : List, Posbility: 0.0393
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : concat, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0203
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0145
Next Token : if, Posbility: 0.0164
Next Token : x, Posbility: 0.0186
Next Token : List, Posbility: 0.0347
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : distinct, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0125
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0203
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0114
Next Token : x, Posbility: 0.0146
Next Token : if, Posbility: 0.0166
Next Token : List, Posbility: 0.0349
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0125
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0203
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0129
Next Token : x, Posbility: 0.0147
Next Token : if, Posbility: 0.0147
Next Token : List, Posbility: 0.0311
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : distinct, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0036
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0041
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0179
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0101
Next Token : if, Posbility: 0.0130
Next Token : x, Posbility: 0.0147
Next Token : List, Posbility: 0.0354
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : distinct, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0159
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0102
Next Token : x, Posbility: 0.0131
Next Token : if, Posbility: 0.0148
Next Token : List, Posbility: 0.0277
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0125
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0102
Next Token : x, Posbility: 0.0131
Next Token : if, Posbility: 0.0131
Next Token : List, Posbility: 0.0277
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0025
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0140
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0102
Next Token : match, Posbility: 0.0102
Next Token : x, Posbility: 0.0131
Next Token : List, Posbility: 0.0315
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : rot, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0159
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0092
Next Token : x, Posbility: 0.0104
Next Token : if, Posbility: 0.0104
Next Token : List, Posbility: 0.0220
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : rot, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0025
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0125
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0092
Next Token : x, Posbility: 0.0103
Next Token : if, Posbility: 0.0103
Next Token : List, Posbility: 0.0248
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  one, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether a list of numbers contains only one distinct element or not. *)
let rec is_one_distinct_element x =
  match x with
  | [] -> true
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>