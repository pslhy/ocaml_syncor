code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0786
Next Token :  contains, Posbility: 0.1011
Next Token :  is, Posbility: 0.1299
Next Token :  check, Posbility: 0.1299
Next Token :  rec, Posbility: 0.4531
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  has, Posbility: 0.0344
Next Token :  contains, Posbility: 0.0566
Next Token :  , Posbility: 0.1748
Next Token :  check, Posbility: 0.2539
Next Token :  is, Posbility: 0.2539
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Con, Posbility: 0.0022
Next Token : Cont, Posbility: 0.0033
Next Token : cons, Posbility: 0.0054
Next Token : Cons, Posbility: 0.0654
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cont, Posbility: 0.0092
Next Token : continuous, Posbility: 0.0103
Next Token : seq, Posbility: 0.0117
Next Token : con, Posbility: 0.0281
Next Token : cons, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_cons
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0015
Next Token : (, Posbility: 0.0015
Next Token :  =, Posbility: 0.0024
Next Token : _, Posbility: 0.0109
Next Token : e, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_conse
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : quit, Posbility: 0.0003
Next Token : cu, Posbility: 0.0006
Next Token : _, Posbility: 0.0009
Next Token : quent, Posbility: 0.0013
Next Token : cut, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecut
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0003
Next Token : iv, Posbility: 0.0003
Next Token : ion, Posbility: 0.0005
Next Token : ively, Posbility: 0.0025
Next Token : ive, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0293
Next Token :  l, Posbility: 0.0293
Next Token :  =, Posbility: 0.1309
Next Token :  , Posbility: 0.3555
Next Token : _, Posbility: 0.3555
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : num, Posbility: 0.0221
Next Token : nums, Posbility: 0.0364
Next Token : number, Posbility: 0.0874
Next Token : numbers, Posbility: 0.3047
Next Token : list, Posbility: 0.3047
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0221
Next Token :  l, Posbility: 0.0322
Next Token : _, Posbility: 0.0530
Next Token :  =, Posbility: 0.1270
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0625
Next Token : n, Posbility: 0.1035
Next Token : lst, Posbility: 0.1504
Next Token : x, Posbility: 0.1934
Next Token : (, Posbility: 0.2188
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ls, Posbility: 0.0383
Next Token : lst, Posbility: 0.0493
Next Token : x, Posbility: 0.1182
Next Token : list, Posbility: 0.1514
Next Token : l, Posbility: 0.2207
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0244
Next Token : ,, Posbility: 0.0518
Next Token : 1, Posbility: 0.0518
Next Token : :, Posbility: 0.1807
Next Token :  , Posbility: 0.6328
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 0.0004
Next Token : ::, Posbility: 0.0374
Next Token : :, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  string, Posbility: 0.0211
Next Token :  ', Posbility: 0.1211
Next Token :  , Posbility: 0.2559
Next Token :  int, Posbility: 0.2559
Next Token :  list, Posbility: 0.2559
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0272
Next Token : (, Posbility: 0.0396
Next Token :  , Posbility: 0.1377
Next Token :  int, Posbility: 0.2930
Next Token : ), Posbility: 0.3750
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0067
Next Token :   , Posbility: 0.0097
Next Token :  l, Posbility: 0.0160
Next Token :  , Posbility: 0.3223
Next Token :  =, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0046
Next Token :  function, Posbility: 0.0087
Next Token :  match, Posbility: 0.0388
Next Token :  , Posbility: 0.0498
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token :    , Posbility: 0.0152
Next Token : 	, Posbility: 0.0152
Next Token :     , Posbility: 0.2100
Next Token :   , Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0079
Next Token : (, Posbility: 0.0101
Next Token : let, Posbility: 0.1226
Next Token : if, Posbility: 0.2021
Next Token : match, Posbility: 0.6250
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0029
Next Token :  !, Posbility: 0.0029
Next Token :  String, Posbility: 0.0216
Next Token :  , Posbility: 0.1406
Next Token :  l, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token : 
, Posbility: 0.0009
Next Token :  @, Posbility: 0.0009
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0024
Next Token :  [, Posbility: 0.0035
Next Token :  , Posbility: 0.0044
Next Token :  [], Posbility: 0.0255
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : [, Posbility: 0.0059
Next Token : [], Posbility: 0.0096
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0009
Next Token :  [, Posbility: 0.0106
Next Token :  nil, Posbility: 0.0106
Next Token :  , Posbility: 0.0176
Next Token :  [], Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0049
Next Token :   , Posbility: 0.0049
Next Token :  =>, Posbility: 0.0132
Next Token :  |, Posbility: 0.0280
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0003
Next Token : →, Posbility: 0.0005
Next Token :  =>, Posbility: 0.0006
Next Token : ::, Posbility: 0.0032
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0540
Next Token :  False, Posbility: 0.0540
Next Token :  True, Posbility: 0.0540
Next Token :  true, Posbility: 0.3984
Next Token :  false, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0014
Next Token :   , Posbility: 0.0027
Next Token :  , Posbility: 0.0083
Next Token :  |, Posbility: 0.0176
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0078
Next Token :  [], Posbility: 0.0165
Next Token :  l, Posbility: 0.0349
Next Token :  [, Posbility: 0.2012
Next Token :  , Posbility: 0.7031
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0312
Next Token : _, Posbility: 0.1235
Next Token : h, Posbility: 0.1235
Next Token : hd, Posbility: 0.1582
Next Token : x, Posbility: 0.4297
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0032
Next Token : :, Posbility: 0.0060
Next Token : s, Posbility: 0.0344
Next Token : ::, Posbility: 0.2539
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0010
Next Token : :, Posbility: 0.0031
Next Token : ->, Posbility: 0.0059
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0031
Next Token :  [], Posbility: 0.0259
Next Token :  l, Posbility: 0.0483
Next Token :  rest, Posbility: 0.0547
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0078
Next Token : tail, Posbility: 0.0129
Next Token : _, Posbility: 0.0508
Next Token : y, Posbility: 0.0952
Next Token : x, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0011
Next Token : _, Posbility: 0.0014
Next Token :  , Posbility: 0.0031
Next Token : ', Posbility: 0.0227
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0015
Next Token :  =>, Posbility: 0.0035
Next Token :   , Posbility: 0.0045
Next Token :  when, Posbility: 0.1167
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0004
Next Token : if, Posbility: 0.0084
Next Token : ::, Posbility: 0.0258
Next Token : ->, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0159
Next Token :  true, Posbility: 0.0337
Next Token :  , Posbility: 0.2490
Next Token :  is, Posbility: 0.2490
Next Token : 
, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0073
Next Token :    , Posbility: 0.0542
Next Token :      , Posbility: 0.1299
Next Token :     , Posbility: 0.2139
Next Token :       , Posbility: 0.5820
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0625
Next Token : x, Posbility: 0.0801
Next Token : match, Posbility: 0.1030
Next Token : if, Posbility: 0.3164
Next Token : let, Posbility: 0.3594
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0415
Next Token :  is, Posbility: 0.0532
Next Token :  l, Posbility: 0.0684
Next Token :  rec, Posbility: 0.1855
Next Token :  , Posbility: 0.3926
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0337
Next Token : (, Posbility: 0.0383
Next Token : y, Posbility: 0.0630
Next Token : n, Posbility: 0.0918
Next Token : x, Posbility: 0.3633
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0845
Next Token : 1, Posbility: 0.0845
Next Token : _, Posbility: 0.1387
Next Token : s, Posbility: 0.1387
Next Token :  =, Posbility: 0.2949
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0036
Next Token :  First, Posbility: 0.0059
Next Token :  first, Posbility: 0.0264
Next Token :  l, Posbility: 0.0718
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0137
Next Token : Int, Posbility: 0.0176
Next Token : head, Posbility: 0.0786
Next Token : List, Posbility: 0.1475
Next Token : x, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0067
Next Token :  +, Posbility: 0.0110
Next Token :  , Posbility: 0.0205
Next Token : ::, Posbility: 0.0493
Next Token :  in, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : 

, Posbility: 0.0013
Next Token :  is, Posbility: 0.0051
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0012
Next Token :     , Posbility: 0.0028
Next Token :         , Posbility: 0.0046
Next Token :      , Posbility: 0.1177
Next Token :       , Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0525
Next Token : x, Posbility: 0.1260
Next Token : match, Posbility: 0.1260
Next Token : if, Posbility: 0.2070
Next Token : let, Posbility: 0.4395
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  next, Posbility: 0.0118
Next Token :  l, Posbility: 0.0283
Next Token :  is, Posbility: 0.0469
Next Token :  rec, Posbility: 0.0771
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0077
Next Token : n, Posbility: 0.0127
Next Token : f, Posbility: 0.0164
Next Token : y, Posbility: 0.0942
Next Token : x, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0038
Next Token : ', Posbility: 0.0063
Next Token : _, Posbility: 0.0105
Next Token :  =, Posbility: 0.0222
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token : 1, Posbility: 0.0007
Next Token : _, Posbility: 0.0052
Next Token : ', Posbility: 0.0066
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0010
Next Token :  list, Posbility: 0.0010
Next Token :  l, Posbility: 0.0015
Next Token :  is, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : Array, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : List, Posbility: 0.0059
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  is, Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0008
Next Token :         , Posbility: 0.0010
Next Token :     , Posbility: 0.0011
Next Token :      , Posbility: 0.1816
Next Token :       , Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0854
Next Token : match, Posbility: 0.1245
Next Token : x, Posbility: 0.1602
Next Token : if, Posbility: 0.1816
Next Token : let, Posbility: 0.3848
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0165
Next Token :  is, Posbility: 0.0396
Next Token :  l, Posbility: 0.0654
Next Token :  rec, Posbility: 0.2285
Next Token :  , Posbility: 0.4824
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0173
Next Token : f, Posbility: 0.0369
Next Token : n, Posbility: 0.0369
Next Token : y, Posbility: 0.1455
Next Token : x, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0308
Next Token : 1, Posbility: 0.0308
Next Token : _, Posbility: 0.0508
Next Token :  =, Posbility: 0.3301
Next Token : s, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0347
Next Token : 2, Posbility: 0.0391
Next Token : ', Posbility: 0.0732
Next Token : _, Posbility: 0.1758
Next Token :  =, Posbility: 0.6133
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0136
Next Token :  [, Posbility: 0.0175
Next Token : 
, Posbility: 0.0225
Next Token :  is, Posbility: 0.1289
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0086
Next Token : if, Posbility: 0.0098
Next Token : (, Posbility: 0.0110
Next Token : x, Posbility: 0.2852
Next Token : List, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0008
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0282
Next Token : drop, Posbility: 0.0527
Next Token : map, Posbility: 0.0981
Next Token : filter, Posbility: 0.1260
Next Token : rev, Posbility: 0.5000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0015
Next Token : (, Posbility: 0.0027
Next Token : _, Posbility: 0.0058
Next Token :  l, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 0.0012
Next Token : 
, Posbility: 0.0015
Next Token : ;, Posbility: 0.0022
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token : 

, Posbility: 0.0032
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0006
Next Token :     , Posbility: 0.0007
Next Token :         , Posbility: 0.0008
Next Token :      , Posbility: 0.2012
Next Token :       , Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.1064
Next Token : match, Posbility: 0.1064
Next Token : x, Posbility: 0.1367
Next Token : List, Posbility: 0.1367
Next Token : let, Posbility: 0.4199
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0156
Next Token :  is, Posbility: 0.0258
Next Token :  l, Posbility: 0.0425
Next Token :  rec, Posbility: 0.1152
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0120
Next Token : (, Posbility: 0.0154
Next Token : n, Posbility: 0.0225
Next Token : y, Posbility: 0.0688
Next Token : x, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0029
Next Token : 0, Posbility: 0.0029
Next Token : _, Posbility: 0.0079
Next Token :  =, Posbility: 0.2598
Next Token : s, Posbility: 0.7070
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0039
Next Token : 2, Posbility: 0.0056
Next Token : ', Posbility: 0.0064
Next Token : _, Posbility: 0.0251
Next Token :  =, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0058
Next Token :  [, Posbility: 0.0095
Next Token : 
, Posbility: 0.0259
Next Token :  is, Posbility: 0.0703
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0031
Next Token : if, Posbility: 0.0045
Next Token : (, Posbility: 0.0074
Next Token : x, Posbility: 0.1021
Next Token : List, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : init, Posbility: 0.0388
Next Token : drop, Posbility: 0.0500
Next Token : map, Posbility: 0.1196
Next Token : filter, Posbility: 0.1357
Next Token : rev, Posbility: 0.3691
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : con, Posbility: 0.0009
Next Token : ., Posbility: 0.0026
Next Token :  l, Posbility: 0.0079
Next Token : _, Posbility: 0.0659
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0067
Next Token : List, Posbility: 0.0067
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ;, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  is, Posbility: 0.0004
Next Token : 

, Posbility: 0.0032
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0005
Next Token :     , Posbility: 0.0006
Next Token :         , Posbility: 0.0007
Next Token :      , Posbility: 0.1641
Next Token :       , Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0796
Next Token : if, Posbility: 0.0898
Next Token : x, Posbility: 0.1680
Next Token : List, Posbility: 0.1680
Next Token : let, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0118
Next Token :  is, Posbility: 0.0250
Next Token :  l, Posbility: 0.0322
Next Token :  rec, Posbility: 0.0874
Next Token :  , Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0081
Next Token : n, Posbility: 0.0117
Next Token : (, Posbility: 0.0132
Next Token : y, Posbility: 0.0525
Next Token : x, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0015
Next Token : 1, Posbility: 0.0015
Next Token : _, Posbility: 0.0033
Next Token :  =, Posbility: 0.1787
Next Token : s, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0021
Next Token : 1, Posbility: 0.0021
Next Token : ', Posbility: 0.0024
Next Token : _, Posbility: 0.0085
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0038
Next Token :  [, Posbility: 0.0103
Next Token : 
, Posbility: 0.0168
Next Token :  is, Posbility: 0.0278
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cons, Posbility: 0.0028
Next Token : if, Posbility: 0.0032
Next Token : (, Posbility: 0.0077
Next Token : x, Posbility: 0.0728
Next Token : List, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Util, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0228
Next Token : init, Posbility: 0.0332
Next Token : filter, Posbility: 0.0703
Next Token : map, Posbility: 0.0903
Next Token : rev, Posbility: 0.5195
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : con, Posbility: 0.0003
Next Token :  l, Posbility: 0.0008
Next Token : ., Posbility: 0.0027
Next Token : _, Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0019
Next Token : List, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  is, Posbility: 0.0003
Next Token :  , Posbility: 0.0028
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0005
Next Token :     , Posbility: 0.0007
Next Token :         , Posbility: 0.0008
Next Token :      , Posbility: 0.1641
Next Token :       , Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0811
Next Token : match, Posbility: 0.0811
Next Token : x, Posbility: 0.1514
Next Token : List, Posbility: 0.1943
Next Token : let, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0073
Next Token :  is, Posbility: 0.0175
Next Token :  l, Posbility: 0.0175
Next Token :  rec, Posbility: 0.0420
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0037
Next Token : n, Posbility: 0.0060
Next Token : (, Posbility: 0.0078
Next Token : y, Posbility: 0.0347
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : 0, Posbility: 0.0008
Next Token : _, Posbility: 0.0014
Next Token :  =, Posbility: 0.0947
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0012
Next Token : 1, Posbility: 0.0012
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.0040
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0024
Next Token :  is, Posbility: 0.0106
Next Token : 
, Posbility: 0.0106
Next Token :  [, Posbility: 0.0106
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0016
Next Token : if, Posbility: 0.0023
Next Token : (, Posbility: 0.0049
Next Token : x, Posbility: 0.0464
Next Token : List, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0102
Next Token : reverse, Posbility: 0.0168
Next Token : filter, Posbility: 0.0190
Next Token : map, Posbility: 0.0356
Next Token : rev, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token :  l, Posbility: 0.0002
Next Token : ., Posbility: 0.0013
Next Token : _, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0009
Next Token : List, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :         , Posbility: 0.0006
Next Token :      , Posbility: 0.1475
Next Token :       , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0728
Next Token : match, Posbility: 0.0728
Next Token : x, Posbility: 0.1357
Next Token : List, Posbility: 0.1748
Next Token : let, Posbility: 0.4746
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0047
Next Token :  is, Posbility: 0.0127
Next Token :  l, Posbility: 0.0144
Next Token :  rec, Posbility: 0.0237
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0018
Next Token : n, Posbility: 0.0038
Next Token : (, Posbility: 0.0049
Next Token : y, Posbility: 0.0221
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0005
Next Token : 1, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.0752
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0009
Next Token : 1, Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.0032
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0015
Next Token :  is, Posbility: 0.0065
Next Token : 
, Posbility: 0.0065
Next Token :  [, Posbility: 0.0065
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0014
Next Token : if, Posbility: 0.0018
Next Token : (, Posbility: 0.0049
Next Token : x, Posbility: 0.0464
Next Token : List, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0048
Next Token : filter, Posbility: 0.0061
Next Token : map, Posbility: 0.0130
Next Token : reverse, Posbility: 0.0130
Next Token : rev, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  l, Posbility: 0.0001
Next Token : ., Posbility: 0.0005
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : List, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.1328
Next Token :       , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0610
Next Token : match, Posbility: 0.0693
Next Token : x, Posbility: 0.1289
Next Token : List, Posbility: 0.1660
Next Token : let, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0033
Next Token :  is, Posbility: 0.0090
Next Token :  l, Posbility: 0.0102
Next Token :  rec, Posbility: 0.0168
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0011
Next Token : n, Posbility: 0.0024
Next Token : (, Posbility: 0.0031
Next Token : y, Posbility: 0.0137
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 0.0474
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 0.0019
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0011
Next Token :  is, Posbility: 0.0040
Next Token : 
, Posbility: 0.0051
Next Token :  [, Posbility: 0.0051
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0008
Next Token : if, Posbility: 0.0010
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0289
Next Token : List, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0023
Next Token : sort, Posbility: 0.0038
Next Token : map, Posbility: 0.0063
Next Token : reverse, Posbility: 0.0172
Next Token : rev, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : List, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token :         , Posbility: 0.0006
Next Token :      , Posbility: 0.1187
Next Token :       , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0483
Next Token : match, Posbility: 0.0620
Next Token : x, Posbility: 0.1021
Next Token : List, Posbility: 0.1484
Next Token : let, Posbility: 0.5859
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0021
Next Token :  is, Posbility: 0.0050
Next Token :  l, Posbility: 0.0057
Next Token :  rec, Posbility: 0.0082
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0008
Next Token : n, Posbility: 0.0017
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0108
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0293
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : 1, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0007
Next Token :  is, Posbility: 0.0024
Next Token : 
, Posbility: 0.0031
Next Token :  [, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0005
Next Token : if, Posbility: 0.0008
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.0291
Next Token : List, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0009
Next Token : sort, Posbility: 0.0015
Next Token : map, Posbility: 0.0024
Next Token : reverse, Posbility: 0.0108
Next Token : rev, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.1064
Next Token :       , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0459
Next Token : match, Posbility: 0.0588
Next Token : x, Posbility: 0.0859
Next Token : List, Posbility: 0.1250
Next Token : let, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0019
Next Token :  is, Posbility: 0.0045
Next Token :  l, Posbility: 0.0050
Next Token :  rec, Posbility: 0.0073
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0008
Next Token : n, Posbility: 0.0015
Next Token : (, Posbility: 0.0021
Next Token : y, Posbility: 0.0084
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0005
Next Token :  is, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0004
Next Token : if, Posbility: 0.0005
Next Token : (, Posbility: 0.0016
Next Token : x, Posbility: 0.0258
Next Token : List, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0009
Next Token : sort, Posbility: 0.0015
Next Token : map, Posbility: 0.0024
Next Token : reverse, Posbility: 0.0108
Next Token : rev, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.1064
Next Token :       , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0383
Next Token : match, Posbility: 0.0493
Next Token : x, Posbility: 0.0811
Next Token : List, Posbility: 0.1040
Next Token : let, Posbility: 0.6797
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0015
Next Token :  is, Posbility: 0.0031
Next Token :  l, Posbility: 0.0035
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : n, Posbility: 0.0010
Next Token : (, Posbility: 0.0017
Next Token : y, Posbility: 0.0066
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  is, Posbility: 0.0009
Next Token : 
, Posbility: 0.0015
Next Token :  [, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0003
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0011
Next Token : x, Posbility: 0.0179
Next Token : List, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : map, Posbility: 0.0009
Next Token : sort, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.0952
Next Token :       , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0388
Next Token : match, Posbility: 0.0500
Next Token : x, Posbility: 0.0728
Next Token : List, Posbility: 0.1055
Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0011
Next Token :  is, Posbility: 0.0021
Next Token :  l, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0035
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0007
Next Token : (, Posbility: 0.0012
Next Token : y, Posbility: 0.0046
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  is, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  [, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.0179
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : map, Posbility: 0.0009
Next Token : sort, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0952
Next Token :       , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0322
Next Token : match, Posbility: 0.0413
Next Token : x, Posbility: 0.0679
Next Token : List, Posbility: 0.0874
Next Token : let, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0008
Next Token :  is, Posbility: 0.0015
Next Token :  l, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : n, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0040
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  is, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0159
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : sort, Posbility: 0.0005
Next Token : map, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0850
Next Token :       , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0288
Next Token : match, Posbility: 0.0371
Next Token : x, Posbility: 0.0610
Next Token : List, Posbility: 0.0889
Next Token : let, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0007
Next Token :  is, Posbility: 0.0013
Next Token :  l, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0024
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : n, Posbility: 0.0005
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0036
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0125
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  is, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.0140
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0005
Next Token : sort, Posbility: 0.0005
Next Token : reverse, Posbility: 0.0109
Next Token : rev, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0002
Next Token :        , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0850
Next Token :       , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0334
Next Token : match, Posbility: 0.0334
Next Token : x, Posbility: 0.0552
Next Token : List, Posbility: 0.0801
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0007
Next Token :  is, Posbility: 0.0012
Next Token :  l, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0022
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : n, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0110
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : sort, Posbility: 0.0003
Next Token : map, Posbility: 0.0005
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0850
Next Token :       , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0267
Next Token : match, Posbility: 0.0342
Next Token : x, Posbility: 0.0498
Next Token : List, Posbility: 0.0728
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0005
Next Token :  is, Posbility: 0.0010
Next Token :  l, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0097
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0002
Next Token : map, Posbility: 0.0004
Next Token : sort, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0674
Next Token :       , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0267
Next Token : match, Posbility: 0.0344
Next Token : x, Posbility: 0.0500
Next Token : List, Posbility: 0.0728
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0005
Next Token :  is, Posbility: 0.0008
Next Token :  l, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0097
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0757
Next Token :       , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0267
Next Token : match, Posbility: 0.0342
Next Token : x, Posbility: 0.0498
Next Token : List, Posbility: 0.0728
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  is, Posbility: 0.0006
Next Token :  l, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0076
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0085
Next Token : rev, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0674
Next Token :       , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0219
Next Token : match, Posbility: 0.0247
Next Token : x, Posbility: 0.0461
Next Token : List, Posbility: 0.0593
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0004
Next Token :  is, Posbility: 0.0005
Next Token :  l, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0076
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0003
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :      , Posbility: 0.0674
Next Token :       , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0217
Next Token : match, Posbility: 0.0247
Next Token : x, Posbility: 0.0459
Next Token : List, Posbility: 0.0591
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  is, Posbility: 0.0007
Next Token :  l, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0059
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0601
Next Token :       , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0195
Next Token : if, Posbility: 0.0222
Next Token : x, Posbility: 0.0415
Next Token : List, Posbility: 0.0532
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  is, Posbility: 0.0004
Next Token :  l, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  is, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0076
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0535
Next Token :       , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0220
Next Token : if, Posbility: 0.0220
Next Token : x, Posbility: 0.0466
Next Token : List, Posbility: 0.0527
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  is, Posbility: 0.0004
Next Token :  l, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0046
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0002
Next Token : sort, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0067
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0535
Next Token :       , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0221
Next Token : match, Posbility: 0.0221
Next Token : x, Posbility: 0.0415
Next Token : List, Posbility: 0.0532
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  is, Posbility: 0.0004
Next Token :  l, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0052
Next Token : rev, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0601
Next Token :       , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0199
Next Token : match, Posbility: 0.0199
Next Token : x, Posbility: 0.0374
Next Token : List, Posbility: 0.0479
Next Token : let, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  is, Posbility: 0.0003
Next Token :  l, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0041
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0474
Next Token :       , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0156
Next Token : (, Posbility: 0.0178
Next Token : x, Posbility: 0.0332
Next Token : List, Posbility: 0.0547
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  l, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0046
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0001
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0041
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0420
Next Token :       , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0160
Next Token : (, Posbility: 0.0181
Next Token : x, Posbility: 0.0337
Next Token : List, Posbility: 0.0383
Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0041
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0374
Next Token :       , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0143
Next Token : if, Posbility: 0.0143
Next Token : x, Posbility: 0.0303
Next Token : List, Posbility: 0.0344
Next Token : let, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0036
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0046
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0161
Next Token : if, Posbility: 0.0161
Next Token : x, Posbility: 0.0266
Next Token : List, Posbility: 0.0388
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  is, Posbility: 0.0002
Next Token :  l, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0036
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0374
Next Token :       , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0128
Next Token : if, Posbility: 0.0128
Next Token : x, Posbility: 0.0239
Next Token : List, Posbility: 0.0349
Next Token : let, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0143
Next Token : (, Posbility: 0.0162
Next Token : x, Posbility: 0.0269
Next Token : List, Posbility: 0.0344
Next Token : let, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0001
Next Token :  v, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0004
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0129
Next Token : if, Posbility: 0.0129
Next Token : x, Posbility: 0.0240
Next Token : List, Posbility: 0.0309
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0004
Next Token :  l, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0036
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0101
Next Token : (, Posbility: 0.0130
Next Token : x, Posbility: 0.0214
Next Token : List, Posbility: 0.0275
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  is, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0330
Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0102
Next Token : (, Posbility: 0.0115
Next Token : x, Posbility: 0.0168
Next Token : List, Posbility: 0.0277
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0028
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0260
Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0103
Next Token : if, Posbility: 0.0103
Next Token : x, Posbility: 0.0150
Next Token : List, Posbility: 0.0247
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  l, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0028
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0025
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0229
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0102
Next Token : if, Posbility: 0.0102
Next Token : x, Posbility: 0.0168
Next Token : List, Posbility: 0.0315
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  l, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0032
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0203
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0103
Next Token : if, Posbility: 0.0103
Next Token : x, Posbility: 0.0170
Next Token : List, Posbility: 0.0247
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  l, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0017
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : rot, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0022
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0229
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0071
Next Token : (, Posbility: 0.0092
Next Token : x, Posbility: 0.0133
Next Token : List, Posbility: 0.0249
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  l, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : rot, Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0022
Next Token : rev, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0179
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the given list contains consecutive numbers or not. *)
let rec is_consecutive_list (l : list) =
  match l with
  | [] -> false
  | x :: xs ->
      let x = x in
      let xs = xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      let xs = List.rev xs in
      
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>