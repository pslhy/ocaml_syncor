code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0464
Next Token :  to, Posbility: 0.0598
Next Token :  string, Posbility: 0.1260
Next Token :  rec, Posbility: 0.1621
Next Token :  , Posbility: 0.3887
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0134
Next Token : tokenize, Posbility: 0.0195
Next Token : space, Posbility: 0.0413
Next Token : s, Posbility: 0.0530
Next Token : split, Posbility: 0.7305
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0193
Next Token : s, Posbility: 0.0248
Next Token :  =, Posbility: 0.0864
Next Token :  , Posbility: 0.1108
Next Token : _, Posbility: 0.6406
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0479
Next Token : str, Posbility: 0.0791
Next Token : space, Posbility: 0.1670
Next Token : string, Posbility: 0.1895
Next Token : on, Posbility: 0.2432
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0009
Next Token :  =, Posbility: 0.0024
Next Token : (, Posbility: 0.0024
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0009
Next Token : char, Posbility: 0.0023
Next Token : white, Posbility: 0.0023
Next Token : whitespace, Posbility: 0.0466
Next Token : space, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0289
Next Token : _, Posbility: 0.0371
Next Token :  =, Posbility: 0.1670
Next Token : s, Posbility: 0.2139
Next Token :  , Posbility: 0.4531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : txt, Posbility: 0.0034
Next Token : st, Posbility: 0.0038
Next Token : (, Posbility: 0.0103
Next Token : x, Posbility: 0.0408
Next Token : s, Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0007
Next Token : 
, Posbility: 0.0012
Next Token :  ~, Posbility: 0.0017
Next Token :  , Posbility: 0.0046
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0102
Next Token :  match, Posbility: 0.0168
Next Token :  String, Posbility: 0.0752
Next Token :  , Posbility: 0.1602
Next Token : 
, Posbility: 0.7148
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0058
Next Token : let, Posbility: 0.0058
Next Token :    , Posbility: 0.0109
Next Token :     , Posbility: 0.1030
Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0332
Next Token : String, Posbility: 0.0483
Next Token : match, Posbility: 0.0796
Next Token : List, Posbility: 0.1025
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  chars, Posbility: 0.0226
Next Token :  str, Posbility: 0.0330
Next Token :  open, Posbility: 0.0542
Next Token :  rec, Posbility: 0.2148
Next Token :  , Posbility: 0.4004
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0275
Next Token : space, Posbility: 0.0311
Next Token : r, Posbility: 0.0659
Next Token : split, Posbility: 0.1230
Next Token : s, Posbility: 0.2949
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0193
Next Token : 1, Posbility: 0.0361
Next Token : s, Posbility: 0.0981
Next Token : _, Posbility: 0.1108
Next Token :  =, Posbility: 0.6406
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  S, Posbility: 0.0025
Next Token : 
, Posbility: 0.0041
Next Token :  ", Posbility: 0.0067
Next Token :  , Posbility: 0.3652
Next Token :  String, Posbility: 0.6016
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.0015
Next Token : _, Posbility: 0.0022
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0430
Next Token : split, Posbility: 0.0430
Next Token : down, Posbility: 0.0488
Next Token : to, Posbility: 0.1328
Next Token : trim, Posbility: 0.4082
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0007
Next Token : Left, Posbility: 0.0012
Next Token : (, Posbility: 0.0016
Next Token : _, Posbility: 0.4336
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Str, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : (, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  0, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0010
Next Token : 

, Posbility: 0.0045
Next Token :   , Posbility: 0.0074
Next Token :  , Posbility: 0.0095
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :    , Posbility: 0.0005
Next Token :       , Posbility: 0.0006
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : String, Posbility: 0.0579
Next Token : match, Posbility: 0.0579
Next Token : if, Posbility: 0.0654
Next Token : List, Posbility: 0.0654
Next Token : let, Posbility: 0.7070
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0208
Next Token :  pos, Posbility: 0.0266
Next Token :  l, Posbility: 0.0302
Next Token :  rec, Posbility: 0.1533
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0253
Next Token : r, Posbility: 0.0417
Next Token : n, Posbility: 0.0471
Next Token : split, Posbility: 0.0884
Next Token : s, Posbility: 0.4473
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0114
Next Token : s, Posbility: 0.0212
Next Token : ,, Posbility: 0.0510
Next Token : _, Posbility: 0.0654
Next Token :  =, Posbility: 0.7969
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0008
Next Token :  ", Posbility: 0.0022
Next Token : 
, Posbility: 0.0059
Next Token :  , Posbility: 0.1177
Next Token :  String, Posbility: 0.8672
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : Split, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0547
Next Token : down, Posbility: 0.1157
Next Token : to, Posbility: 0.1309
Next Token : split, Posbility: 0.1914
Next Token : trim, Posbility: 0.2168
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : left, Posbility: 0.0015
Next Token : Left, Posbility: 0.0031
Next Token :  ", Posbility: 0.0031
Next Token :  , Posbility: 0.1040
Next Token : _, Posbility: 0.8711
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leading, Posbility: 0.0067
Next Token : end, Posbility: 0.0820
Next Token : right, Posbility: 0.1348
Next Token : start, Posbility: 0.3672
Next Token : left, Posbility: 0.3672
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '"', Posbility: 0.0018
Next Token :  ", Posbility: 0.0044
Next Token :  ', Posbility: 0.0092
Next Token : _, Posbility: 0.2373
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ",, Posbility: 0.0003
Next Token : (', Posbility: 0.0003
Next Token : (", Posbility: 0.0005
Next Token : (, Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0013
Next Token :  1, Posbility: 0.0013
Next Token :  , Posbility: 0.0035
Next Token :  ", Posbility: 0.0058
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0320
Next Token : String, Posbility: 0.0320
Next Token : match, Posbility: 0.0320
Next Token : List, Posbility: 0.0364
Next Token : let, Posbility: 0.8281
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0042
Next Token :  l, Posbility: 0.0061
Next Token :  pos, Posbility: 0.0061
Next Token :  rec, Posbility: 0.0212
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0038
Next Token : (, Posbility: 0.0043
Next Token : r, Posbility: 0.0049
Next Token : split, Posbility: 0.0133
Next Token : s, Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token : s, Posbility: 0.0021
Next Token : _, Posbility: 0.0031
Next Token : ,, Posbility: 0.0123
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0292
Next Token :  String, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0009
Next Token : replace, Posbility: 0.0009
Next Token : split, Posbility: 0.0025
Next Token : strip, Posbility: 0.0025
Next Token : trim, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : trail, Posbility: 0.0001
Next Token : start, Posbility: 0.0003
Next Token : end, Posbility: 0.0025
Next Token : left, Posbility: 0.0067
Next Token : right, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0009
Next Token :   , Posbility: 0.0011
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :       , Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0354
Next Token : match, Posbility: 0.0457
Next Token : List, Posbility: 0.0664
Next Token : String, Posbility: 0.0752
Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0131
Next Token :  pos, Posbility: 0.0167
Next Token :  l, Posbility: 0.0215
Next Token :  rec, Posbility: 0.0515
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0142
Next Token : n, Posbility: 0.0142
Next Token : r, Posbility: 0.0161
Next Token : split, Posbility: 0.0339
Next Token : s, Posbility: 0.7734
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0031
Next Token : s, Posbility: 0.0057
Next Token : ,, Posbility: 0.0065
Next Token : _, Posbility: 0.0107
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0021
Next Token : 
, Posbility: 0.0058
Next Token :  ", Posbility: 0.0058
Next Token :  , Posbility: 0.1162
Next Token :  String, Posbility: 0.8555
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : replace, Posbility: 0.0747
Next Token : to, Posbility: 0.0845
Next Token : split, Posbility: 0.1084
Next Token : down, Posbility: 0.1230
Next Token : trim, Posbility: 0.3340
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0004
Next Token :  l, Posbility: 0.0004
Next Token :  ", Posbility: 0.0031
Next Token :  , Posbility: 0.1465
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prefix, Posbility: 0.0244
Next Token : right, Posbility: 0.0312
Next Token : both, Posbility: 0.0850
Next Token : start, Posbility: 0.1094
Next Token : left, Posbility: 0.6289
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '"', Posbility: 0.0030
Next Token :  ", Posbility: 0.0175
Next Token :  ', Posbility: 0.0254
Next Token :  , Posbility: 0.1875
Next Token : _, Posbility: 0.7422
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0295
Next Token : n, Posbility: 0.0295
Next Token : space, Posbility: 0.0334
Next Token : char, Posbility: 0.1699
Next Token : and, Posbility: 0.2812
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  right, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : left, Posbility: 0.0009
Next Token : tail, Posbility: 0.0009
Next Token : trail, Posbility: 0.0009
Next Token : trim, Posbility: 0.0067
Next Token : right, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0004
Next Token : _, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (", Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0024
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.0327
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0005
Next Token :       , Posbility: 0.0007
Next Token :  , Posbility: 0.0013
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0339
Next Token : s, Posbility: 0.0383
Next Token : String, Posbility: 0.0918
Next Token : List, Posbility: 0.0918
Next Token : let, Posbility: 0.6797
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0138
Next Token :  open, Posbility: 0.0138
Next Token :  l, Posbility: 0.0200
Next Token :  rec, Posbility: 0.0258
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0113
Next Token : r, Posbility: 0.0128
Next Token : x, Posbility: 0.0165
Next Token : split, Posbility: 0.0306
Next Token : s, Posbility: 0.7930
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0027
Next Token : ,, Posbility: 0.0064
Next Token : s, Posbility: 0.0083
Next Token : _, Posbility: 0.0106
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0021
Next Token :  match, Posbility: 0.0021
Next Token : 
, Posbility: 0.0058
Next Token :  , Posbility: 0.1167
Next Token :  String, Posbility: 0.8633
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Extensions, Posbility: 0.0001
Next Token : Ext, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : down, Posbility: 0.0435
Next Token : replace, Posbility: 0.0493
Next Token : to, Posbility: 0.0559
Next Token : split, Posbility: 0.1182
Next Token : trim, Posbility: 0.5312
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0006
Next Token :  ", Posbility: 0.0022
Next Token :  , Posbility: 0.0947
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0161
Next Token : leading, Posbility: 0.0183
Next Token : start, Posbility: 0.0820
Next Token : right, Posbility: 0.1191
Next Token : left, Posbility: 0.6055
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0022
Next Token :  ', Posbility: 0.0127
Next Token :  ", Posbility: 0.0209
Next Token :  , Posbility: 0.2539
Next Token : _, Posbility: 0.6914
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : while, Posbility: 0.0103
Next Token : until, Posbility: 0.0150
Next Token : char, Posbility: 0.0317
Next Token : if, Posbility: 0.0669
Next Token : and, Posbility: 0.7227
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token :  right, Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0009
Next Token : space, Posbility: 0.0009
Next Token : left, Posbility: 0.0024
Next Token : tail, Posbility: 0.0024
Next Token : right, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0025
Next Token :  ', Posbility: 0.0037
Next Token :  ", Posbility: 0.0145
Next Token :  , Posbility: 0.4824
Next Token : _, Posbility: 0.4824
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0630
Next Token : all, Posbility: 0.0630
Next Token : char, Posbility: 0.0918
Next Token : ex, Posbility: 0.0918
Next Token : if, Posbility: 0.1328
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0052
Next Token :  !, Posbility: 0.0052
Next Token :  ", Posbility: 0.0059
Next Token : _, Posbility: 0.2500
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : space, Posbility: 0.0015
Next Token : (', Posbility: 0.0017
Next Token : (", Posbility: 0.0022
Next Token : (, Posbility: 0.1045
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0537
Next Token :  "#, Posbility: 0.0688
Next Token :  ", Posbility: 0.1455
Next Token :  , Posbility: 0.2402
Next Token :  ~, Posbility: 0.3086
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0352
Next Token : is, Posbility: 0.0510
Next Token :  , Posbility: 0.1226
Next Token : pred, Posbility: 0.1387
Next Token : f, Posbility: 0.2285
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0023
Next Token :  ~, Posbility: 0.0026
Next Token :  =, Posbility: 0.0104
Next Token :  , Posbility: 0.0364
Next Token : :, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0070
Next Token : ~, Posbility: 0.0080
Next Token : is, Posbility: 0.0103
Next Token : String, Posbility: 0.1816
Next Token : (, Posbility: 0.7188
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Char, Posbility: 0.0114
Next Token : Fun, Posbility: 0.0165
Next Token : function, Posbility: 0.0835
Next Token : String, Posbility: 0.1216
Next Token : fun, Posbility: 0.6172
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0056
Next Token :  char, Posbility: 0.0056
Next Token :  i, Posbility: 0.0118
Next Token :  a, Posbility: 0.0152
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0284
Next Token : _, Posbility: 0.0776
Next Token : ch, Posbility: 0.0776
Next Token : x, Posbility: 0.2109
Next Token : c, Posbility: 0.5703
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0007
Next Token :  when, Posbility: 0.0007
Next Token : 1, Posbility: 0.0008
Next Token : ->, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : →, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : _, Posbility: 0.0017
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0097
Next Token :  ', Posbility: 0.0097
Next Token :  not, Posbility: 0.0265
Next Token :  String, Posbility: 0.0265
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Character, Posbility: 0.0038
Next Token : (', Posbility: 0.0071
Next Token : (, Posbility: 0.0280
Next Token : Char, Posbility: 0.1108
Next Token : c, Posbility: 0.8164
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0086
Next Token :  !=, Posbility: 0.0342
Next Token :  ==, Posbility: 0.1348
Next Token :  , Posbility: 0.1738
Next Token :  =, Posbility: 0.6055
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0025
Next Token :  '\, Posbility: 0.0060
Next Token :  ", Posbility: 0.0164
Next Token :  , Posbility: 0.0732
Next Token :  ', Posbility: 0.8906
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (', Posbility: 0.0003
Next Token : a, Posbility: 0.0004
Next Token : _, Posbility: 0.0060
Next Token :  ', Posbility: 0.1055
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' '
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0400
Next Token :  |, Posbility: 0.1797
Next Token :  ||, Posbility: 0.1797
Next Token :  , Posbility: 0.2305
Next Token :  or, Posbility: 0.3340
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0027
Next Token :  not, Posbility: 0.0044
Next Token :  String, Posbility: 0.0050
Next Token :  ', Posbility: 0.0225
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (', Posbility: 0.0006
Next Token : Character, Posbility: 0.0007
Next Token : Char, Posbility: 0.0040
Next Token : (, Posbility: 0.0046
Next Token : c, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : =, Posbility: 0.0004
Next Token :  is, Posbility: 0.0009
Next Token :  , Posbility: 0.0040
Next Token :  ==, Posbility: 0.0052
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "\, Posbility: 0.0046
Next Token :  ''), Posbility: 0.0125
Next Token :  ', Posbility: 0.0718
Next Token :  , Posbility: 0.1953
Next Token :  '\, Posbility: 0.6797
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',', Posbility: 0.0369
Next Token : ';, Posbility: 0.0537
Next Token : '^, Posbility: 0.0537
Next Token : ',, Posbility: 0.1289
Next Token : '\0', Posbility: 0.5781
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0'
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ||, Posbility: 0.0009
Next Token : );, Posbility: 0.0027
Next Token :  or, Posbility: 0.0065
Next Token :  , Posbility: 0.0200
Next Token : ), Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  then, Posbility: 0.0010
Next Token :   , Posbility: 0.0011
Next Token :  , Posbility: 0.0058
Next Token : 
, Posbility: 0.0139
Next Token :  in, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0021
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0004
Next Token :       , Posbility: 0.0008
Next Token :  , Posbility: 0.0019
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0311
Next Token : s, Posbility: 0.0352
Next Token : String, Posbility: 0.0659
Next Token : List, Posbility: 0.0845
Next Token : let, Posbility: 0.7070
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  res, Posbility: 0.0181
Next Token :  open, Posbility: 0.0181
Next Token :  l, Posbility: 0.0262
Next Token :  rec, Posbility: 0.0557
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0175
Next Token : n, Posbility: 0.0175
Next Token : r, Posbility: 0.0198
Next Token : split, Posbility: 0.0325
Next Token : s, Posbility: 0.7383
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0043
Next Token : ,, Posbility: 0.0117
Next Token : s, Posbility: 0.0150
Next Token : _, Posbility: 0.0217
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0008
Next Token :  match, Posbility: 0.0022
Next Token : 
, Posbility: 0.0058
Next Token :  , Posbility: 0.1172
Next Token :  String, Posbility: 0.8672
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Extensions, Posbility: 0.0001
Next Token : Ext, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : replace, Posbility: 0.0256
Next Token : down, Posbility: 0.0256
Next Token : to, Posbility: 0.0698
Next Token : split, Posbility: 0.0894
Next Token : trim, Posbility: 0.5820
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  left, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0033
Next Token :  , Posbility: 0.0752
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0118
Next Token : if, Posbility: 0.0320
Next Token : start, Posbility: 0.0320
Next Token : right, Posbility: 0.2363
Next Token : left, Posbility: 0.6445
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0006
Next Token :  ', Posbility: 0.0012
Next Token :  ~, Posbility: 0.0033
Next Token :  , Posbility: 0.1807
Next Token : _, Posbility: 0.8086
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0020
Next Token : char, Posbility: 0.0033
Next Token : while, Posbility: 0.0053
Next Token : if, Posbility: 0.4824
Next Token : and, Posbility: 0.4824
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  right, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0001
Next Token : replace, Posbility: 0.0001
Next Token : remove, Posbility: 0.0002
Next Token : left, Posbility: 0.0005
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ?, Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  ~, Posbility: 0.0063
Next Token :  , Posbility: 0.0469
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : char, Posbility: 0.0023
Next Token : by, Posbility: 0.0023
Next Token : until, Posbility: 0.0023
Next Token : while, Posbility: 0.0175
Next Token : if, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  !, Posbility: 0.0016
Next Token : 
, Posbility: 0.0038
Next Token :  ~, Posbility: 0.0070
Next Token : _, Posbility: 0.0588
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  ', Posbility: 0.0005
Next Token : 
, Posbility: 0.0045
Next Token :  , Posbility: 0.0075
Next Token :  ~, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0002
Next Token : fun, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : pred, Posbility: 0.0010
Next Token : f, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : char, Posbility: 0.0030
Next Token : (__, Posbility: 0.0034
Next Token : Char, Posbility: 0.0038
Next Token : String, Posbility: 0.0250
Next Token : (, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0003
Next Token : String, Posbility: 0.0007
Next Token : not, Posbility: 0.0017
Next Token : function, Posbility: 0.0085
Next Token : fun, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  l, Posbility: 0.0004
Next Token :  i, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0007
Next Token : s, Posbility: 0.0019
Next Token : x, Posbility: 0.0040
Next Token : _, Posbility: 0.0052
Next Token : c, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  when, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  !, Posbility: 0.0039
Next Token :  char, Posbility: 0.0039
Next Token :  ', Posbility: 0.0064
Next Token :  not, Posbility: 0.0175
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Character, Posbility: 0.0009
Next Token : (', Posbility: 0.0024
Next Token : (, Posbility: 0.0066
Next Token : Char, Posbility: 0.0074
Next Token : c, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0078
Next Token :  ==, Posbility: 0.0165
Next Token :  !=, Posbility: 0.0239
Next Token :  , Posbility: 0.0396
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '.', Posbility: 0.0074
Next Token :  '"', Posbility: 0.0074
Next Token :  , Posbility: 0.1475
Next Token :  '\, Posbility: 0.4004
Next Token :  ', Posbility: 0.4004
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0062
Next Token : [', Posbility: 0.0070
Next Token : _, Posbility: 0.0669
Next Token :  ', Posbility: 0.4355
Next Token :  , Posbility: 0.4355
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : \\, Posbility: 0.0002
Next Token : ',, Posbility: 0.0004
Next Token : ';, Posbility: 0.0022
Next Token : \, Posbility: 0.0096
Next Token : '), Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :  then, Posbility: 0.0013
Next Token : 
, Posbility: 0.0025
Next Token :  and, Posbility: 0.0031
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0031
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :  , Posbility: 0.0025
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0253
Next Token : s, Posbility: 0.0286
Next Token : String, Posbility: 0.0688
Next Token : List, Posbility: 0.0776
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  str, Posbility: 0.0089
Next Token :  open, Posbility: 0.0129
Next Token :  l, Posbility: 0.0166
Next Token :  rec, Posbility: 0.0311
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0095
Next Token : r, Posbility: 0.0095
Next Token : x, Posbility: 0.0121
Next Token : split, Posbility: 0.0200
Next Token : s, Posbility: 0.8516
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1, Posbility: 0.0027
Next Token : s, Posbility: 0.0057
Next Token : _, Posbility: 0.0074
Next Token : ,, Posbility: 0.0095
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0009
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.0023
Next Token :  , Posbility: 0.0469
Next Token :  String, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : strip, Posbility: 0.0060
Next Token : replace, Posbility: 0.0098
Next Token : to, Posbility: 0.0162
Next Token : split, Posbility: 0.0267
Next Token : trim, Posbility: 0.8867
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  left, Posbility: 0.0003
Next Token :  l, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0020
Next Token :  , Posbility: 0.0757
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0021
Next Token : start, Posbility: 0.0057
Next Token : if, Posbility: 0.0154
Next Token : right, Posbility: 0.1143
Next Token : left, Posbility: 0.8438
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token :  ', Posbility: 0.0005
Next Token :  ~, Posbility: 0.0008
Next Token :  , Posbility: 0.1187
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0003
Next Token : char, Posbility: 0.0003
Next Token : while, Posbility: 0.0022
Next Token : if, Posbility: 0.1182
Next Token : and, Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token : replace, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0001
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token :  ~, Posbility: 0.0031
Next Token :  , Posbility: 0.0371
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : char, Posbility: 0.0003
Next Token : by, Posbility: 0.0003
Next Token : ignore, Posbility: 0.0003
Next Token : while, Posbility: 0.0025
Next Token : if, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  ~, Posbility: 0.0009
Next Token : _, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token :  ', Posbility: 0.0004
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0036
Next Token :  ~, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : is, Posbility: 0.0001
Next Token : fun, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : pred, Posbility: 0.0004
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Char, Posbility: 0.0009
Next Token : (__, Posbility: 0.0013
Next Token : not, Posbility: 0.0015
Next Token : String, Posbility: 0.0052
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : not, Posbility: 0.0008
Next Token : function, Posbility: 0.0046
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  l, Posbility: 0.0002
Next Token :  i, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0003
Next Token : s, Posbility: 0.0007
Next Token : x, Posbility: 0.0012
Next Token : _, Posbility: 0.0025
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  String, Posbility: 0.0015
Next Token :  char, Posbility: 0.0015
Next Token :  ', Posbility: 0.0040
Next Token :  not, Posbility: 0.0084
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Character, Posbility: 0.0004
Next Token : (', Posbility: 0.0013
Next Token : Char, Posbility: 0.0024
Next Token : (, Posbility: 0.0046
Next Token : c, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0027
Next Token :  !=, Posbility: 0.0083
Next Token :  , Posbility: 0.0121
Next Token :  ==, Posbility: 0.0121
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0073
Next Token :  '.', Posbility: 0.0073
Next Token :  , Posbility: 0.1465
Next Token :  '\, Posbility: 0.3984
Next Token :  ', Posbility: 0.3984
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 	, Posbility: 0.0175
Next Token :   , Posbility: 0.0199
Next Token : _, Posbility: 0.1006
Next Token :  ', Posbility: 0.2734
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ', Posbility: 0.0005
Next Token : ',, Posbility: 0.0013
Next Token : ';, Posbility: 0.0019
Next Token : \, Posbility: 0.0036
Next Token : '), Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :  or, Posbility: 0.0008
Next Token : 
, Posbility: 0.0022
Next Token :  and, Posbility: 0.0075
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0003
Next Token :       , Posbility: 0.0004
Next Token :     , Posbility: 0.0025
Next Token :  , Posbility: 0.0025
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0159
Next Token : s, Posbility: 0.0261
Next Token : String, Posbility: 0.0713
Next Token : List, Posbility: 0.0713
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  res, Posbility: 0.0074
Next Token :  open, Posbility: 0.0074
Next Token :  l, Posbility: 0.0139
Next Token :  rec, Posbility: 0.0178
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0060
Next Token : x, Posbility: 0.0069
Next Token : r, Posbility: 0.0069
Next Token : split, Posbility: 0.0165
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1, Posbility: 0.0019
Next Token : s, Posbility: 0.0035
Next Token : _, Posbility: 0.0040
Next Token : ,, Posbility: 0.0045
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0292
Next Token :  String, Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : strip, Posbility: 0.0023
Next Token : to, Posbility: 0.0064
Next Token : replace, Posbility: 0.0064
Next Token : split, Posbility: 0.0175
Next Token : trim, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0002
Next Token :  left, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0010
Next Token :  , Posbility: 0.0474
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0021
Next Token : if, Posbility: 0.0057
Next Token : start, Posbility: 0.0057
Next Token : right, Posbility: 0.1157
Next Token : left, Posbility: 0.8555
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  ', Posbility: 0.0002
Next Token :  ~, Posbility: 0.0004
Next Token :  , Posbility: 0.0952
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0003
Next Token : char, Posbility: 0.0003
Next Token : while, Posbility: 0.0022
Next Token : if, Posbility: 0.1187
Next Token : and, Posbility: 0.8750
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : rig, Posbility: 0.0000
Next Token : replace, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0001
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0001
Next Token :  ~, Posbility: 0.0011
Next Token :  , Posbility: 0.0293
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0001
Next Token : char, Posbility: 0.0001
Next Token : by, Posbility: 0.0001
Next Token : while, Posbility: 0.0025
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token : _, Posbility: 0.0076
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0001
Next Token :  ', Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token :  ~, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : is, Posbility: 0.0000
Next Token : fun, Posbility: 0.0001
Next Token : pred, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fun, Posbility: 0.0006
Next Token : (__, Posbility: 0.0008
Next Token : not, Posbility: 0.0009
Next Token : String, Posbility: 0.0046
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : not, Posbility: 0.0005
Next Token : function, Posbility: 0.0036
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  l, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0002
Next Token : s, Posbility: 0.0005
Next Token : x, Posbility: 0.0009
Next Token : _, Posbility: 0.0015
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  String, Posbility: 0.0012
Next Token :  false, Posbility: 0.0015
Next Token :  ', Posbility: 0.0040
Next Token :  not, Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Character, Posbility: 0.0002
Next Token : (', Posbility: 0.0009
Next Token : Char, Posbility: 0.0017
Next Token : (, Posbility: 0.0032
Next Token : c, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0017
Next Token :  !=, Posbility: 0.0051
Next Token :  , Posbility: 0.0074
Next Token :  ==, Posbility: 0.0084
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0051
Next Token :  '.', Posbility: 0.0051
Next Token :  , Posbility: 0.1030
Next Token :  '\, Posbility: 0.1030
Next Token :  ', Posbility: 0.7617
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0012
Next Token :   , Posbility: 0.0017
Next Token : _, Posbility: 0.0111
Next Token :  ', Posbility: 0.0933
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0001
Next Token : ';, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : \, Posbility: 0.0003
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0008
Next Token :  and, Posbility: 0.0008
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0019
Next Token :  , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0103
Next Token : s, Posbility: 0.0192
Next Token : String, Posbility: 0.0522
Next Token : List, Posbility: 0.0591
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  str, Posbility: 0.0033
Next Token :  res, Posbility: 0.0043
Next Token :  rec, Posbility: 0.0071
Next Token :  l, Posbility: 0.0080
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0034
Next Token : x, Posbility: 0.0038
Next Token : r, Posbility: 0.0038
Next Token : split, Posbility: 0.0104
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1, Posbility: 0.0012
Next Token : ,, Posbility: 0.0017
Next Token : s, Posbility: 0.0017
Next Token : _, Posbility: 0.0019
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0178
Next Token :  String, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0024
Next Token : replace, Posbility: 0.0064
Next Token : strip, Posbility: 0.0064
Next Token : split, Posbility: 0.0175
Next Token : trim, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  left, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0006
Next Token :  , Posbility: 0.0293
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0009
Next Token : leading, Posbility: 0.0009
Next Token : if, Posbility: 0.0024
Next Token : right, Posbility: 0.0178
Next Token : left, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0474
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0001
Next Token : all, Posbility: 0.0001
Next Token : while, Posbility: 0.0009
Next Token : if, Posbility: 0.0179
Next Token : and, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : replace, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  ~, Posbility: 0.0005
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : by, Posbility: 0.0001
Next Token : ignore, Posbility: 0.0001
Next Token : while, Posbility: 0.0009
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ', Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : is, Posbility: 0.0000
Next Token : pred, Posbility: 0.0001
Next Token : fun, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fun, Posbility: 0.0003
Next Token : not, Posbility: 0.0003
Next Token : (__, Posbility: 0.0004
Next Token : String, Posbility: 0.0028
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : not, Posbility: 0.0002
Next Token : function, Posbility: 0.0025
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0005
Next Token :  false, Posbility: 0.0007
Next Token :  ', Posbility: 0.0019
Next Token :  not, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Character, Posbility: 0.0001
Next Token : (', Posbility: 0.0005
Next Token : Char, Posbility: 0.0008
Next Token : (, Posbility: 0.0017
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0006
Next Token :  !=, Posbility: 0.0019
Next Token :  , Posbility: 0.0031
Next Token :  ==, Posbility: 0.0052
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0060
Next Token :  '.', Posbility: 0.0060
Next Token :  , Posbility: 0.0442
Next Token :  '\, Posbility: 0.0442
Next Token :  ', Posbility: 0.8867
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : =', Posbility: 0.0003
Next Token : _, Posbility: 0.0017
Next Token :  ', Posbility: 0.0259
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0019
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0082
Next Token : s, Posbility: 0.0154
Next Token : String, Posbility: 0.0417
Next Token : List, Posbility: 0.0537
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0024
Next Token :  res, Posbility: 0.0030
Next Token :  rec, Posbility: 0.0044
Next Token :  l, Posbility: 0.0056
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : n, Posbility: 0.0024
Next Token : r, Posbility: 0.0024
Next Token : split, Posbility: 0.0083
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1, Posbility: 0.0008
Next Token : ,, Posbility: 0.0010
Next Token : s, Posbility: 0.0012
Next Token : _, Posbility: 0.0013
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0140
Next Token :  String, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Extensions, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0009
Next Token : replace, Posbility: 0.0009
Next Token : split, Posbility: 0.0025
Next Token : strip, Posbility: 0.0025
Next Token : trim, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0004
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : leading, Posbility: 0.0009
Next Token : if, Posbility: 0.0024
Next Token : start, Posbility: 0.0024
Next Token : right, Posbility: 0.0178
Next Token : left, Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0374
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0003
Next Token : if, Posbility: 0.0067
Next Token : and, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  ~, Posbility: 0.0004
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : while, Posbility: 0.0006
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ', Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : not, Posbility: 0.0001
Next Token : fun, Posbility: 0.0002
Next Token : (__, Posbility: 0.0002
Next Token : String, Posbility: 0.0019
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : not, Posbility: 0.0001
Next Token : function, Posbility: 0.0019
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0003
Next Token :  false, Posbility: 0.0004
Next Token :  ', Posbility: 0.0012
Next Token :  not, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Character, Posbility: 0.0001
Next Token : (', Posbility: 0.0003
Next Token : Char, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0003
Next Token :  !=, Posbility: 0.0013
Next Token :  , Posbility: 0.0017
Next Token :  ==, Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0024
Next Token :  '.', Posbility: 0.0024
Next Token :  , Posbility: 0.0175
Next Token :  '\, Posbility: 0.0175
Next Token :  ', Posbility: 0.9570
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =', Posbility: 0.0002
Next Token : _, Posbility: 0.0008
Next Token :  ', Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0075
Next Token : s, Posbility: 0.0110
Next Token : String, Posbility: 0.0337
Next Token : List, Posbility: 0.0435
Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0015
Next Token :  res, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0024
Next Token :  l, Posbility: 0.0040
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0013
Next Token : r, Posbility: 0.0013
Next Token : n, Posbility: 0.0015
Next Token : split, Posbility: 0.0051
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0005
Next Token : 1, Posbility: 0.0005
Next Token : s, Posbility: 0.0006
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0109
Next Token :  String, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0009
Next Token : replace, Posbility: 0.0009
Next Token : split, Posbility: 0.0025
Next Token : strip, Posbility: 0.0025
Next Token : trim, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0097
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : leading, Posbility: 0.0003
Next Token : if, Posbility: 0.0005
Next Token : start, Posbility: 0.0005
Next Token : right, Posbility: 0.0067
Next Token : left, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0293
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0002
Next Token : if, Posbility: 0.0041
Next Token : and, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  ~, Posbility: 0.0003
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : by, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0006
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : not, Posbility: 0.0001
Next Token : fun, Posbility: 0.0001
Next Token : (__, Posbility: 0.0001
Next Token : String, Posbility: 0.0013
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : not, Posbility: 0.0001
Next Token : function, Posbility: 0.0013
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ch, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0003
Next Token :  false, Posbility: 0.0003
Next Token :  ', Posbility: 0.0007
Next Token :  not, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0002
Next Token : Char, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0002
Next Token :  !=, Posbility: 0.0008
Next Token :  , Posbility: 0.0012
Next Token :  ==, Posbility: 0.0032
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0024
Next Token :  '.', Posbility: 0.0024
Next Token :  '\, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =', Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token :  ', Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0124
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0068
Next Token : s, Posbility: 0.0088
Next Token : String, Posbility: 0.0271
Next Token : List, Posbility: 0.0347
Next Token : let, Posbility: 0.8984
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0011
Next Token :  rec, Posbility: 0.0015
Next Token :  res, Posbility: 0.0015
Next Token :  l, Posbility: 0.0031
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : n, Posbility: 0.0010
Next Token : r, Posbility: 0.0010
Next Token : split, Posbility: 0.0035
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0004
Next Token : 1, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : s, Posbility: 0.0005
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 0.0067
Next Token :  String, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0003
Next Token : replace, Posbility: 0.0009
Next Token : split, Posbility: 0.0009
Next Token : strip, Posbility: 0.0009
Next Token : trim, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : leading, Posbility: 0.0003
Next Token : if, Posbility: 0.0005
Next Token : start, Posbility: 0.0005
Next Token : right, Posbility: 0.0109
Next Token : left, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 0.0025
Next Token : and, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0076
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : fun, Posbility: 0.0001
Next Token : (__, Posbility: 0.0001
Next Token : String, Posbility: 0.0009
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : function, Posbility: 0.0010
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0002
Next Token :  false, Posbility: 0.0002
Next Token :  not, Posbility: 0.0004
Next Token :  ', Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0001
Next Token : Char, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0001
Next Token :  !=, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token :  ==, Posbility: 0.0022
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0009
Next Token :  '-', Posbility: 0.0009
Next Token :  '\, Posbility: 0.0065
Next Token :  , Posbility: 0.0178
Next Token :  ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  ', Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0017
Next Token :  , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0061
Next Token : s, Posbility: 0.0089
Next Token : String, Posbility: 0.0272
Next Token : List, Posbility: 0.0309
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0010
Next Token :  res, Posbility: 0.0010
Next Token :  l, Posbility: 0.0024
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0008
Next Token : n, Posbility: 0.0009
Next Token : split, Posbility: 0.0028
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0041
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0003
Next Token : split, Posbility: 0.0003
Next Token : replace, Posbility: 0.0003
Next Token : strip, Posbility: 0.0009
Next Token : trim, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : leading, Posbility: 0.0003
Next Token : if, Posbility: 0.0005
Next Token : start, Posbility: 0.0005
Next Token : right, Posbility: 0.0109
Next Token : left, Posbility: 0.9844
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0125
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 0.0013
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : RIGHT, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : String, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : not, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : function, Posbility: 0.0009
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :  false, Posbility: 0.0001
Next Token :  not, Posbility: 0.0003
Next Token :  ', Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0001
Next Token : Char, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0001
Next Token :  !=, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :  ==, Posbility: 0.0017
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0009
Next Token :  '-', Posbility: 0.0009
Next Token :  '\, Posbility: 0.0065
Next Token :  , Posbility: 0.0178
Next Token :  ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ', Posbility: 0.0052
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : ')., Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0013
Next Token :  , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0061
Next Token : s, Posbility: 0.0079
Next Token : String, Posbility: 0.0243
Next Token : List, Posbility: 0.0276
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  res, Posbility: 0.0007
Next Token :  l, Posbility: 0.0015
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : r, Posbility: 0.0007
Next Token : n, Posbility: 0.0008
Next Token : split, Posbility: 0.0025
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0036
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0003
Next Token : split, Posbility: 0.0003
Next Token : replace, Posbility: 0.0003
Next Token : strip, Posbility: 0.0009
Next Token : trim, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0003
Next Token : leading, Posbility: 0.0003
Next Token : if, Posbility: 0.0004
Next Token : right, Posbility: 0.0052
Next Token : left, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 0.0008
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : RIGHT, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : String, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : function, Posbility: 0.0007
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :  false, Posbility: 0.0001
Next Token :  ', Posbility: 0.0003
Next Token :  not, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0001
Next Token : Char, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  ==, Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0003
Next Token :  '.', Posbility: 0.0005
Next Token :  '\, Posbility: 0.0015
Next Token :  , Posbility: 0.0041
Next Token :  ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  ', Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0055
Next Token : s, Posbility: 0.0062
Next Token : String, Posbility: 0.0217
Next Token : List, Posbility: 0.0217
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0004
Next Token :  res, Posbility: 0.0005
Next Token :  l, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : r, Posbility: 0.0005
Next Token : n, Posbility: 0.0006
Next Token : split, Posbility: 0.0019
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0028
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : split, Posbility: 0.0003
Next Token : replace, Posbility: 0.0003
Next Token : strip, Posbility: 0.0009
Next Token : trim, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0002
Next Token : leading, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : right, Posbility: 0.0052
Next Token : left, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0076
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0000
Next Token : if, Posbility: 0.0006
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : RIGHT, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : unless, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token : pred, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : nil, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : String, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :  false, Posbility: 0.0001
Next Token :  ', Posbility: 0.0002
Next Token :  not, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0001
Next Token : Char, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  ==, Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0002
Next Token :  '.', Posbility: 0.0003
Next Token :  '\, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ', Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0055
Next Token : s, Posbility: 0.0063
Next Token : String, Posbility: 0.0193
Next Token : List, Posbility: 0.0219
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  list, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  res, Posbility: 0.0004
Next Token :  l, Posbility: 0.0010
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : r, Posbility: 0.0005
Next Token : n, Posbility: 0.0005
Next Token : split, Posbility: 0.0013
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0025
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : split, Posbility: 0.0001
Next Token : replace, Posbility: 0.0001
Next Token : strip, Posbility: 0.0003
Next Token : trim, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0001
Next Token : leading, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : right, Posbility: 0.0032
Next Token : left, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0000
Next Token : if, Posbility: 0.0004
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : pred, Posbility: 0.0000
Next Token : func, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : nil, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : String, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  false, Posbility: 0.0001
Next Token :  true, Posbility: 0.0001
Next Token :  ', Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (', Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  ==, Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0003
Next Token :  '.', Posbility: 0.0005
Next Token :  '\, Posbility: 0.0012
Next Token :  , Posbility: 0.0032
Next Token :  ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ', Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : s, Posbility: 0.0071
Next Token : String, Posbility: 0.0194
Next Token : List, Posbility: 0.0194
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  result, Posbility: 0.0002
Next Token :  len, Posbility: 0.0002
Next Token :  res, Posbility: 0.0003
Next Token :  l, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : r, Posbility: 0.0004
Next Token : n, Posbility: 0.0004
Next Token : split, Posbility: 0.0012
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token :  String, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : split, Posbility: 0.0001
Next Token : replace, Posbility: 0.0001
Next Token : strip, Posbility: 0.0003
Next Token : trim, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0001
Next Token : leading, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : right, Posbility: 0.0041
Next Token : left, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : right, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : unless, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : pred, Posbility: 0.0000
Next Token : func, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : String, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  false, Posbility: 0.0000
Next Token :  true, Posbility: 0.0001
Next Token :  ', Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (', Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  ==, Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0002
Next Token :  '.', Posbility: 0.0004
Next Token :  '\, Posbility: 0.0007
Next Token :  , Posbility: 0.0019
Next Token :  ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ', Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : s, Posbility: 0.0063
Next Token : List, Posbility: 0.0172
Next Token : String, Posbility: 0.0194
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  result, Posbility: 0.0002
Next Token :  len, Posbility: 0.0002
Next Token :  res, Posbility: 0.0002
Next Token :  l, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : r, Posbility: 0.0004
Next Token : n, Posbility: 0.0005
Next Token : split, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : split, Posbility: 0.0001
Next Token : replace, Posbility: 0.0001
Next Token : strip, Posbility: 0.0003
Next Token : trim, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  left, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : leading, Posbility: 0.0001
Next Token : right, Posbility: 0.0032
Next Token : left, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : RIGHT, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : pred, Posbility: 0.0000
Next Token : func, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : String, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ()->, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c ->
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  true, Posbility: 0.0001
Next Token :  ', Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (', Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  !=, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ==, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  '0', Posbility: 0.0002
Next Token :  '.', Posbility: 0.0003
Next Token :  '\, Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token :  ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = '
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ', Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ')., Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : ');, Posbility: 0.0000
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ')
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0008
Next Token :  , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0056
Next Token : s, Posbility: 0.0063
Next Token : List, Posbility: 0.0194
Next Token : String, Posbility: 0.0220
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  result, Posbility: 0.0002
Next Token :  res, Posbility: 0.0002
Next Token :  len, Posbility: 0.0002
Next Token :  l, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : split, Posbility: 0.0007
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  String, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : split, Posbility: 0.0001
Next Token : replace, Posbility: 0.0001
Next Token : strip, Posbility: 0.0003
Next Token : trim, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : start, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : leading, Posbility: 0.0001
Next Token : right, Posbility: 0.0022
Next Token : left, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : all, Posbility: 0.0000
Next Token : while, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0000
Next Token : remove, Posbility: 0.0000
Next Token : rig, Posbility: 0.0000
Next Token : left, Posbility: 0.0000
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : unless, Posbility: 0.0000
Next Token : ignore, Posbility: 0.0000
Next Token : while, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ~, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : func, Posbility: 0.0000
Next Token : fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : fun, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : String, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to convert a string to a list of strings split on the space character. *)
let split_on_space s =
  let s = String.trim s in
  let s = String.trim_left s in
  let s = String.trim_right s in
  let s = String.trim_left_and_right s in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ' or c = '\0') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun c -> c = ' ') in
  let s = String.trim_left_and_right_if s ~f:(fun 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>