code:
 (* Write a function to check if the given tuple has any none value or not. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  none, Posbility: 0.0879
Next Token :  is, Posbility: 0.1128
Next Token :  rec, Posbility: 0.1279
Next Token :  has, Posbility: 0.1855
Next Token :  , Posbility: 0.1855
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0422
Next Token : t, Posbility: 0.0422
Next Token : print, Posbility: 0.0615
Next Token : f, Posbility: 0.0693
Next Token : (, Posbility: 0.0786
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : is, Posbility: 0.0364
Next Token :  , Posbility: 0.0413
Next Token : x, Posbility: 0.0469
Next Token : None, Posbility: 0.0530
Next Token : check, Posbility: 0.0530
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0092
Next Token : -, Posbility: 0.0361
Next Token : ,, Posbility: 0.0464
Next Token :  , Posbility: 0.1436
Next Token : _, Posbility: 0.6406
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : for, Posbility: 0.0352
Next Token : if, Posbility: 0.0510
Next Token : all, Posbility: 0.0510
Next Token : tuple, Posbility: 0.1226
Next Token : none, Posbility: 0.3770
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ?, Posbility: 0.0243
Next Token :  v, Posbility: 0.1089
Next Token : _, Posbility: 0.1396
Next Token : ,, Posbility: 0.1396
Next Token :  , Posbility: 0.4297
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : tup, Posbility: 0.0315
Next Token : :, Posbility: 0.0757
Next Token : x, Posbility: 0.1602
Next Token : (, Posbility: 0.1816
Next Token : t, Posbility: 0.3379
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0052
Next Token : 1, Posbility: 0.0097
Next Token :  , Posbility: 0.0265
Next Token :  =, Posbility: 0.0559
Next Token : ), Posbility: 0.8750
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0029
Next Token : 
, Posbility: 0.0062
Next Token :  ?, Posbility: 0.0070
Next Token :  , Posbility: 0.1416
Next Token :  =, Posbility: 0.8125
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  for, Posbility: 0.0074
Next Token :  not, Posbility: 0.0122
Next Token :  match, Posbility: 0.0620
Next Token :  , Posbility: 0.1904
Next Token : 
, Posbility: 0.6641
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 	, Posbility: 0.0064
Next Token : let, Posbility: 0.0064
Next Token :    , Posbility: 0.0198
Next Token :     , Posbility: 0.1133
Next Token :   , Posbility: 0.8398
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0405
Next Token : for, Posbility: 0.0459
Next Token : List, Posbility: 0.0854
Next Token : match, Posbility: 0.1807
Next Token : let, Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0244
Next Token :  v, Posbility: 0.0277
Next Token :  open, Posbility: 0.0854
Next Token :  rec, Posbility: 0.2988
Next Token :  , Posbility: 0.2988
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0304
Next Token : x, Posbility: 0.0728
Next Token : f, Posbility: 0.0825
Next Token : (, Posbility: 0.0938
Next Token : t, Posbility: 0.1748
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0571
Next Token : 1, Posbility: 0.0830
Next Token : ', Posbility: 0.1553
Next Token : _, Posbility: 0.1758
Next Token :  =, Posbility: 0.4219
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0148
Next Token :  check, Posbility: 0.0148
Next Token :  match, Posbility: 0.0148
Next Token : 
, Posbility: 0.0244
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Array, Posbility: 0.0234
Next Token : (, Posbility: 0.0496
Next Token : Tuple, Posbility: 0.0635
Next Token : t, Posbility: 0.2852
Next Token : List, Posbility: 0.3223
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : Helpers, Posbility: 0.0006
Next Token : (, Posbility: 0.0017
Next Token : _, Posbility: 0.0032
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : of, Posbility: 0.0388
Next Token : fold, Posbility: 0.0498
Next Token : filter, Posbility: 0.1191
Next Token : map, Posbility: 0.1348
Next Token : rev, Posbility: 0.4707
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !, Posbility: 0.0009
Next Token : (, Posbility: 0.0019
Next Token :  ~, Posbility: 0.0027
Next Token : _, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : Array, Posbility: 0.0000
Next Token : List, Posbility: 0.0024
Next Token : (, Posbility: 0.0292
Next Token : t, Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 0.0009
Next Token : 
, Posbility: 0.0067
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token : 

, Posbility: 0.0096
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : for, Posbility: 0.0459
Next Token : if, Posbility: 0.0757
Next Token : match, Posbility: 0.1416
Next Token : List, Posbility: 0.1602
Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  iter, Posbility: 0.0147
Next Token :  v, Posbility: 0.0189
Next Token :  none, Posbility: 0.0354
Next Token :  , Posbility: 0.2949
Next Token :  rec, Posbility: 0.3789
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  go, Posbility: 0.0698
Next Token :  rec, Posbility: 0.0791
Next Token :  check, Posbility: 0.0898
Next Token :  loop, Posbility: 0.1680
Next Token :  , Posbility: 0.3555
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0422
Next Token : r, Posbility: 0.0542
Next Token : aux, Posbility: 0.0698
Next Token : helper, Posbility: 0.1016
Next Token : f, Posbility: 0.2754
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0312
Next Token :  i, Posbility: 0.0664
Next Token :  acc, Posbility: 0.0850
Next Token :  =, Posbility: 0.1797
Next Token :  , Posbility: 0.4902
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0239
Next Token : (, Posbility: 0.1074
Next Token : x, Posbility: 0.1074
Next Token : (), Posbility: 0.1377
Next Token : t, Posbility: 0.4805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0094
Next Token :  acc, Posbility: 0.0479
Next Token :  , Posbility: 0.0615
Next Token :  i, Posbility: 0.0698
Next Token :  =, Posbility: 0.7500
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  fun, Posbility: 0.0020
Next Token :  function, Posbility: 0.0212
Next Token :  match, Posbility: 0.0309
Next Token :  , Posbility: 0.0396
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0021
Next Token :    , Posbility: 0.0040
Next Token :       , Posbility: 0.0108
Next Token :   , Posbility: 0.0122
Next Token :     , Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0095
Next Token : case, Posbility: 0.0095
Next Token : let, Posbility: 0.0549
Next Token : if, Posbility: 0.3164
Next Token : match, Posbility: 0.5898
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0022
Next Token :  !, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : head, Posbility: 0.0023
Next Token : Head, Posbility: 0.0023
Next Token : (, Posbility: 0.0063
Next Token : List, Posbility: 0.0466
Next Token : t, Posbility: 0.9336
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token :  @, Posbility: 0.0006
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0008
Next Token :  , Posbility: 0.0039
Next Token :  [, Posbility: 0.0073
Next Token :  [], Posbility: 0.0256
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :    , Posbility: 0.0006
Next Token :   , Posbility: 0.0008
Next Token :       , Posbility: 0.0474
Next Token :     , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Nil, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0262
Next Token : [], Posbility: 0.1035
Next Token : |, Posbility: 0.8672
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0018
Next Token :  nil, Posbility: 0.0049
Next Token :  , Posbility: 0.0282
Next Token :  [, Posbility: 0.0282
Next Token :  [], Posbility: 0.9336
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | []
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0030
Next Token :    , Posbility: 0.0039
Next Token :  =>, Posbility: 0.0082
Next Token :  |, Posbility: 0.0223
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : -, Posbility: 0.0005
Next Token : →, Posbility: 0.0008
Next Token : ::, Posbility: 0.0036
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0625
Next Token :  True, Posbility: 0.0625
Next Token :  , Posbility: 0.1699
Next Token :  false, Posbility: 0.1699
Next Token :  true, Posbility: 0.4609
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0014
Next Token :  , Posbility: 0.0056
Next Token : ;, Posbility: 0.0093
Next Token :  |, Posbility: 0.0325
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :         , Posbility: 0.0003
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0041
Next Token :  a, Posbility: 0.0052
Next Token :  [], Posbility: 0.0142
Next Token :  [, Posbility: 0.1719
Next Token :  , Posbility: 0.7734
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : hd, Posbility: 0.0381
Next Token : (, Posbility: 0.0554
Next Token : h, Posbility: 0.0913
Next Token : x, Posbility: 0.1709
Next Token : _, Posbility: 0.5273
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :    , Posbility: 0.0060
Next Token :   , Posbility: 0.0111
Next Token :  when, Posbility: 0.0161
Next Token : ::, Posbility: 0.0564
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0005
Next Token : →, Posbility: 0.0007
Next Token : if, Posbility: 0.0613
Next Token : ::, Posbility: 0.2754
Next Token : ->, Posbility: 0.6602
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0054
Next Token :  !, Posbility: 0.0148
Next Token : 
, Posbility: 0.1797
Next Token :  , Posbility: 0.2969
Next Token :  false, Posbility: 0.4902
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0044
Next Token : ;, Posbility: 0.0049
Next Token :  , Posbility: 0.0082
Next Token : 

, Posbility: 0.0195
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0054
Next Token :       , Posbility: 0.0079
Next Token :    , Posbility: 0.0130
Next Token :     , Posbility: 0.0583
Next Token :   , Posbility: 0.9141
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : |, Posbility: 0.0014
Next Token : ::, Posbility: 0.0019
Next Token : end, Posbility: 0.0074
Next Token :  in, Posbility: 0.0084
Next Token : in, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :   , Posbility: 0.0013
Next Token : 

, Posbility: 0.0019
Next Token :  , Posbility: 0.0096
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :    , Posbility: 0.0006
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0209
Next Token : not, Posbility: 0.0269
Next Token : if, Posbility: 0.0344
Next Token : let, Posbility: 0.0728
Next Token : f, Posbility: 0.7852
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0045
Next Token : 

, Posbility: 0.0066
Next Token : 
, Posbility: 0.0201
Next Token :  [], Posbility: 0.1025
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0003
Next Token : []), Posbility: 0.0003
Next Token : List, Posbility: 0.0025
Next Token : (, Posbility: 0.0067
Next Token : t, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0139
Next Token :  =, Posbility: 0.0139
Next Token : ;, Posbility: 0.0228
Next Token : 

, Posbility: 0.4590
Next Token : 
, Posbility: 0.4590
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0289
Next Token : open, Posbility: 0.0349
Next Token :   , Posbility: 0.0396
Next Token : 

, Posbility: 0.1074
Next Token : ;, Posbility: 0.1768
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : , Posbility: 0.0003
Next Token : ;&, Posbility: 0.0009
Next Token : 

, Posbility: 0.0107
Next Token : 
, Posbility: 0.0156
Next Token : ;, Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  example, Posbility: 0.0036
Next Token :  , Posbility: 0.0085
Next Token : ;, Posbility: 0.0150
Next Token : 
, Posbility: 0.2500
Next Token : 

, Posbility: 0.6797
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;


 score:True
Error type: Syntaxerr.Unclosed_continue
---------------------------
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : open, Posbility: 0.0118
Next Token : *, Posbility: 0.0126
Next Token : include, Posbility: 0.0302
Next Token : (, Posbility: 0.1846
Next Token : let, Posbility: 0.5039
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  test, Posbility: 0.0104
Next Token :  check, Posbility: 0.0466
Next Token :  rec, Posbility: 0.0466
Next Token :  main, Posbility: 0.1631
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0147
Next Token : _, Posbility: 0.0452
Next Token : t, Posbility: 0.0452
Next Token : (, Posbility: 0.1787
Next Token : (), Posbility: 0.6250
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let ()
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0051
Next Token :  Check, Posbility: 0.0109
Next Token :  check, Posbility: 0.0913
Next Token :  , Posbility: 0.1924
Next Token : 
, Posbility: 0.6719
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :    , Posbility: 0.0023
Next Token : check, Posbility: 0.0030
Next Token :     , Posbility: 0.0092
Next Token : let, Posbility: 0.0283
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : print, Posbility: 0.0226
Next Token : open, Posbility: 0.0374
Next Token : Printf, Posbility: 0.0693
Next Token : assert, Posbility: 0.1299
Next Token : let, Posbility: 0.5820
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0244
Next Token :  a, Posbility: 0.0312
Next Token :  rec, Posbility: 0.0312
Next Token :  tuple, Posbility: 0.0664
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0238
Next Token : tup, Posbility: 0.0238
Next Token : (, Posbility: 0.0444
Next Token : x, Posbility: 0.1064
Next Token : t, Posbility: 0.6133
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0044
Next Token : _, Posbility: 0.0056
Next Token : 0, Posbility: 0.0322
Next Token : 1, Posbility: 0.1128
Next Token :  =, Posbility: 0.8320
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [], Posbility: 0.0400
Next Token : 
, Posbility: 0.1089
Next Token :  ', Posbility: 0.1089
Next Token :  [, Posbility: 0.2949
Next Token :  , Posbility: 0.2949
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (1,, Posbility: 0.0752
Next Token : [', Posbility: 0.0962
Next Token : List, Posbility: 0.1235
Next Token : (', Posbility: 0.1406
Next Token : (, Posbility: 0.2969
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0238
Next Token :  Some, Posbility: 0.0305
Next Token :  , Posbility: 0.0347
Next Token : Some, Posbility: 0.3281
Next Token : None, Posbility: 0.3281
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0016
Next Token : ;, Posbility: 0.0082
Next Token : ., Posbility: 0.0173
Next Token :  , Posbility: 0.0195
Next Token : ,, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0134
Next Token :  0,, Posbility: 0.0172
Next Token :  , Posbility: 0.1270
Next Token :  Some, Posbility: 0.2383
Next Token :  None, Posbility: 0.5039
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0007
Next Token :  , Posbility: 0.0018
Next Token : );, Posbility: 0.0131
Next Token : ), Posbility: 0.2637
Next Token : ,, Posbility: 0.7188
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0017
Next Token :  ", Posbility: 0.0046
Next Token :  , Posbility: 0.0342
Next Token :  Some, Posbility: 0.2520
Next Token :  None, Posbility: 0.6836
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : );, Posbility: 0.0090
Next Token : ), Posbility: 0.4941
Next Token : ,, Posbility: 0.4941
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0017
Next Token : ), Posbility: 0.0046
Next Token :  , Posbility: 0.0344
Next Token :  Some, Posbility: 0.2539
Next Token :  None, Posbility: 0.6914
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : );, Posbility: 0.0148
Next Token : ), Posbility: 0.4922
Next Token : ,, Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0008
Next Token : ), Posbility: 0.0057
Next Token :  , Posbility: 0.0156
Next Token :  Some, Posbility: 0.1157
Next Token :  None, Posbility: 0.8516
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : );, Posbility: 0.0148
Next Token : ), Posbility: 0.4922
Next Token : ,, Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  True, Posbility: 0.0008
Next Token : ), Posbility: 0.0021
Next Token :  , Posbility: 0.0157
Next Token :  Some, Posbility: 0.1162
Next Token :  None, Posbility: 0.8594
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : );, Posbility: 0.0112
Next Token : ), Posbility: 0.3730
Next Token : ,, Posbility: 0.6133
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : ), Posbility: 0.0023
Next Token :  , Posbility: 0.0063
Next Token :  Some, Posbility: 0.0469
Next Token :  None, Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : );, Posbility: 0.0083
Next Token : ), Posbility: 0.2432
Next Token : ,, Posbility: 0.7461
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : ), Posbility: 0.0003
Next Token :  , Posbility: 0.0023
Next Token :  Some, Posbility: 0.0471
Next Token :  None, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : );, Posbility: 0.0081
Next Token : ), Posbility: 0.2656
Next Token : ,, Posbility: 0.7227
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token : ), Posbility: 0.0008
Next Token :  , Posbility: 0.0059
Next Token :  Some, Posbility: 0.1182
Next Token :  None, Posbility: 0.8711
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : );, Posbility: 0.0184
Next Token : ), Posbility: 0.3691
Next Token : ,, Posbility: 0.6094
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token : 
, Posbility: 0.0023
Next Token :  , Posbility: 0.0023
Next Token :  Some, Posbility: 0.0471
Next Token :  None, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : );, Posbility: 0.0148
Next Token : ), Posbility: 0.4922
Next Token : ,, Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0023
Next Token : 
, Posbility: 0.0063
Next Token :  , Posbility: 0.0063
Next Token :  Some, Posbility: 0.0466
Next Token :  None, Posbility: 0.9375
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token : );, Posbility: 0.0148
Next Token : ,, Posbility: 0.4922
Next Token : ), Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0023
Next Token :  =, Posbility: 0.0214
Next Token : 
, Posbility: 0.0659
Next Token :  in, Posbility: 0.9102
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token :  check, Posbility: 0.0006
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0781
Next Token : assert, Posbility: 0.1289
Next Token : check, Posbility: 0.1289
Next Token : let, Posbility: 0.2129
Next Token : Printf, Posbility: 0.2412
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : e, Posbility: 0.0282
Next Token : write, Posbility: 0.0282
Next Token : sprintf, Posbility: 0.0410
Next Token : fprintf, Posbility: 0.0767
Next Token : printf, Posbility: 0.7305
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "\, Posbility: 0.0053
Next Token :  "$, Posbility: 0.0087
Next Token : 
, Posbility: 0.0144
Next Token :  "%, Posbility: 0.1758
Next Token :  ", Posbility: 0.7891
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Tuple, Posbility: 0.0500
Next Token : None, Posbility: 0.0645
Next Token : Check, Posbility: 0.0938
Next Token : check, Posbility: 0.1060
Next Token : t, Posbility: 0.1543
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0223
Next Token : :, Posbility: 0.0608
Next Token :  is, Posbility: 0.1001
Next Token :  has, Posbility: 0.2402
Next Token :  =, Posbility: 0.4492
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0027
Next Token :  [, Posbility: 0.0057
Next Token :  ~, Posbility: 0.0074
Next Token :  , Posbility: 0.1152
Next Token :  %, Posbility: 0.8516
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0221
Next Token : b, Posbility: 0.0684
Next Token : A, Posbility: 0.0991
Next Token : a, Posbility: 0.3047
Next Token : s, Posbility: 0.4453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0286
Next Token : %, Posbility: 0.0415
Next Token : ,, Posbility: 0.0532
Next Token : ", Posbility: 0.2109
Next Token : \, Posbility: 0.5742
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : nis, Posbility: 0.0001
Next Token : "%, Posbility: 0.0002
Next Token : t, Posbility: 0.0002
Next Token : r, Posbility: 0.0025
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : check, Posbility: 0.0018
Next Token : "%, Posbility: 0.0023
Next Token : \, Posbility: 0.0152
Next Token : %, Posbility: 0.0322
Next Token : ", Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0033
Next Token :  ((, Posbility: 0.0043
Next Token :  [, Posbility: 0.0071
Next Token : 
, Posbility: 0.0461
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token : Format, Posbility: 0.0045
Next Token : List, Posbility: 0.0045
Next Token : t, Posbility: 0.0137
Next Token : (, Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : String, Posbility: 0.0417
Next Token : Check, Posbility: 0.0535
Next Token : Format, Posbility: 0.0535
Next Token : List, Posbility: 0.1001
Next Token : check, Posbility: 0.3965
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :  check, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  , Posbility: 0.0259
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0002
Next Token : tuple, Posbility: 0.0003
Next Token : one, Posbility: 0.0008
Next Token : some, Posbility: 0.0022
Next Token : none, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0005
Next Token :  ?, Posbility: 0.0006
Next Token : _, Posbility: 0.0009
Next Token : ., Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0036
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0033
Next Token : ,, Posbility: 0.0033
Next Token :  ?, Posbility: 0.0033
Next Token : ), Posbility: 0.4922
Next Token : );, Posbility: 0.4922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0106
Next Token : 

, Posbility: 0.0287
Next Token :  (*, Posbility: 0.0287
Next Token : ;, Posbility: 0.2715
Next Token : 
, Posbility: 0.6523
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : end, Posbility: 0.0117
Next Token : (, Posbility: 0.0171
Next Token : let, Posbility: 0.0923
Next Token : ;, Posbility: 0.1045
Next Token :   , Posbility: 0.6406
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0130
Next Token : (), Posbility: 0.0148
Next Token : Printf, Posbility: 0.0312
Next Token : (, Posbility: 0.0354
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0034
Next Token :  v, Posbility: 0.0038
Next Token :  none, Posbility: 0.0044
Next Token :  rec, Posbility: 0.0172
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0095
Next Token : u, Posbility: 0.0121
Next Token : s, Posbility: 0.0200
Next Token : (), Posbility: 0.0544
Next Token : t, Posbility: 0.8516
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0030
Next Token : 1, Posbility: 0.0135
Next Token : ', Posbility: 0.0153
Next Token : 2, Posbility: 0.0197
Next Token :  =, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0063
Next Token :  [, Posbility: 0.0170
Next Token : 
, Posbility: 0.0170
Next Token :  ((, Posbility: 0.0170
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (', Posbility: 0.0090
Next Token : (", Posbility: 0.0090
Next Token : ([], Posbility: 0.0102
Next Token : List, Posbility: 0.0216
Next Token : (, Posbility: 0.9180
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  Some, Posbility: 0.0016
Next Token : 
, Posbility: 0.0031
Next Token : (),, Posbility: 0.0039
Next Token : None, Posbility: 0.4551
Next Token : Some, Posbility: 0.5156
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0369
Next Token :  0,, Posbility: 0.0474
Next Token : (1),, Posbility: 0.0608
Next Token :  ", Posbility: 0.1289
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3,, Posbility: 0.0369
Next Token : (),, Posbility: 0.0369
Next Token : (1),, Posbility: 0.0608
Next Token : (, Posbility: 0.1289
Next Token : 1,, Posbility: 0.5078
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0022
Next Token : None, Posbility: 0.0025
Next Token :  , Posbility: 0.0825
Next Token :  Some, Posbility: 0.2871
Next Token :  None, Posbility: 0.6094
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : );, Posbility: 0.0008
Next Token :  , Posbility: 0.0012
Next Token : ), Posbility: 0.0140
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  , Posbility: 0.0131
Next Token :  Some, Posbility: 0.2637
Next Token :  None, Posbility: 0.7188
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : );, Posbility: 0.0003
Next Token : ), Posbility: 0.0140
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0003
Next Token :  , Posbility: 0.0023
Next Token :  Some, Posbility: 0.0474
Next Token :  None, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : );, Posbility: 0.0003
Next Token : ), Posbility: 0.0097
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  Some, Posbility: 0.0179
Next Token :  None, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 0.0059
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0067
Next Token :  None, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 0.0032
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0110
Next Token :  None, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0110
Next Token :  None, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 0.0022
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  Some, Posbility: 0.0110
Next Token :  None, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 0.0036
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0067
Next Token :  None, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0003
Next Token : ), Posbility: 0.0179
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0179
Next Token :  None, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : );, Posbility: 0.0074
Next Token : ,, Posbility: 0.0157
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0293
Next Token :  in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : if, Posbility: 0.0017
Next Token : printf, Posbility: 0.0025
Next Token : let, Posbility: 0.0028
Next Token : Printf, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : pretty, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : println, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0001
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  "\, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  "%, Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Check, Posbility: 0.0000
Next Token : !, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  is, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  '%, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : a, Posbility: 0.0001
Next Token : b, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : ", Posbility: 0.0025
Next Token : \, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : b, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0001
Next Token : ";, Posbility: 0.0001
Next Token : \, Posbility: 0.0009
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (!, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  check, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : !(, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : Not, Posbility: 0.0000
Next Token :  check, Posbility: 0.0001
Next Token : not, Posbility: 0.0010
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  false, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : false, Posbility: 0.0000
Next Token : empty, Posbility: 0.0000
Next Token : some, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ));, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0001
Next Token : ), Posbility: 0.0757
Next Token : );, Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0046
Next Token : ;, Posbility: 0.0075
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0017
Next Token : end, Posbility: 0.0018
Next Token : let, Posbility: 0.0145
Next Token : ;, Posbility: 0.0198
Next Token :   , Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0008
Next Token : 
, Posbility: 0.0012
Next Token : Printf, Posbility: 0.0015
Next Token : (, Posbility: 0.0028
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  empty, Posbility: 0.0002
Next Token :  none, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : s, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : (), Posbility: 0.0085
Next Token : t, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token :  ((, Posbility: 0.0062
Next Token :  None, Posbility: 0.0170
Next Token : 
, Posbility: 0.0461
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (0,, Posbility: 0.0017
Next Token : ([], Posbility: 0.0017
Next Token : (", Posbility: 0.0022
Next Token : (1,, Posbility: 0.0059
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : One, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token : Some, Posbility: 0.2207
Next Token : None, Posbility: 0.7734
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0002
Next Token : ), Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : ;, Posbility: 0.0007
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0003
Next Token :  0,, Posbility: 0.0008
Next Token :  , Posbility: 0.0417
Next Token :  None, Posbility: 0.1138
Next Token :  Some, Posbility: 0.8398
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (1),, Posbility: 0.0030
Next Token :  "1", Posbility: 0.0030
Next Token :  0,, Posbility: 0.0106
Next Token :  ", Posbility: 0.0136
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 4,, Posbility: 0.0025
Next Token : 5,, Posbility: 0.0029
Next Token : 3,, Posbility: 0.0078
Next Token : 1,, Posbility: 0.4238
Next Token : 2,, Posbility: 0.5430
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  nil, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  Some, Posbility: 0.0179
Next Token :  None, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0008
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0003
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0004
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0007
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0004
Next Token : );, Posbility: 0.0006
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0059
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : printf, Posbility: 0.0002
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Printf, Posbility: 0.0000
Next Token : fprintf, Posbility: 0.0000
Next Token : println, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  "%, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : !, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  is, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token : ", Posbility: 0.0007
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0002
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !(, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : nil, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : some, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0086
Next Token : );, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0012
Next Token : ;, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0003
Next Token : end, Posbility: 0.0007
Next Token : let, Posbility: 0.0009
Next Token : ;, Posbility: 0.0052
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0003
Next Token : Printf, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : (), Posbility: 0.0019
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  Some, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0005
Next Token :  None, Posbility: 0.0024
Next Token : 
, Posbility: 0.0292
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ([], Posbility: 0.0002
Next Token : (1,, Posbility: 0.0003
Next Token : (", Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Null, Posbility: 0.0001
Next Token : Nil, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token : Some, Posbility: 0.0474
Next Token : None, Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : None, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  Some, Posbility: 0.0179
Next Token :  None, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  True, Posbility: 0.0000
Next Token : Some, Posbility: 0.0000
Next Token :  , Posbility: 0.0066
Next Token :  None, Posbility: 0.0178
Next Token :  Some, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0001
Next Token :  10,, Posbility: 0.0001
Next Token :  0,, Posbility: 0.0002
Next Token : (3), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0009
Next Token : (3,, Posbility: 0.0009
Next Token : 2,, Posbility: 0.0040
Next Token : 4,, Posbility: 0.0052
Next Token : 3,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token : );, Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0036
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0001
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : fprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : println, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  "%, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0004
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : b, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  check, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : never, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0036
Next Token : );, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0010
Next Token : ;, Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0002
Next Token : let, Posbility: 0.0005
Next Token : end, Posbility: 0.0010
Next Token : ;, Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : Printf, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0013
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  None, Posbility: 0.0007
Next Token : 
, Posbility: 0.0293
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0001
Next Token : (1,, Posbility: 0.0001
Next Token : ([], Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : Optional, Posbility: 0.0000
Next Token : 
, Posbility: 0.0015
Next Token : Some, Posbility: 0.0179
Next Token : None, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0015
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0009
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : Some, Posbility: 0.0000
Next Token :  , Posbility: 0.0067
Next Token :  None, Posbility: 0.0067
Next Token :  Some, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 4,, Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token :  4, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0003
Next Token : (4,, Posbility: 0.0003
Next Token : 3,, Posbility: 0.0007
Next Token : 5,, Posbility: 0.0009
Next Token : 4,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0032
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0025
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 。, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : fprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : println, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0003
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  check, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Check, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : never, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0052
Next Token : );, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ;, Posbility: 0.0008
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0002
Next Token : let, Posbility: 0.0007
Next Token : end, Posbility: 0.0010
Next Token : ;, Posbility: 0.0085
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0003
Next Token : Printf, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0017
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  none, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0017
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  None, Posbility: 0.0005
Next Token : 
, Posbility: 0.0330
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (1,, Posbility: 0.0000
Next Token : ([], Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Nil, Posbility: 0.0000
Next Token : Optional, Posbility: 0.0000
Next Token : 
, Posbility: 0.0013
Next Token : Some, Posbility: 0.0140
Next Token : None, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0004
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0006
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0006
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  Other, Posbility: 0.0000
Next Token :  Optional, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  None, Posbility: 0.0067
Next Token :  Some, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (5), Posbility: 0.0000
Next Token : 5,, Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (5), Posbility: 0.0002
Next Token : 4,, Posbility: 0.0003
Next Token : (5,, Posbility: 0.0003
Next Token : 6,, Posbility: 0.0004
Next Token : 5,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0006
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0002
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0017
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : sprintf, Posbility: 0.0000
Next Token : println, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0003
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  check, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Check, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : null, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0059
Next Token : );, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ;, Posbility: 0.0006
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0003
Next Token : let, Posbility: 0.0006
Next Token : end, Posbility: 0.0020
Next Token : ;, Posbility: 0.0052
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0003
Next Token : Printf, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0019
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0013
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  None, Posbility: 0.0003
Next Token : 
, Posbility: 0.0203
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : ([], Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : Optional, Posbility: 0.0000
Next Token : 
, Posbility: 0.0010
Next Token : Some, Posbility: 0.0110
Next Token : None, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0003
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  Other, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  None, Posbility: 0.0025
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token : 6,, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 6, Posbility: 0.0001
Next Token : 5,, Posbility: 0.0002
Next Token : 7,, Posbility: 0.0006
Next Token : 6,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  False, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0013
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0002
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Check, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : false, Posbility: 0.0000
Next Token : null, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0059
Next Token : );, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ;, Posbility: 0.0005
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0003
Next Token : }, Posbility: 0.0005
Next Token : end, Posbility: 0.0025
Next Token : ;, Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : Printf, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 0.0015
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0013
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0159
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ([], Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token : Optional, Posbility: 0.0000
Next Token : 
, Posbility: 0.0006
Next Token : Some, Posbility: 0.0052
Next Token : None, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  So, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  None, Posbility: 0.0009
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token : 7,, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : 7, Posbility: 0.0000
Next Token : 8,, Posbility: 0.0001
Next Token : 6,, Posbility: 0.0002
Next Token : 7,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0015
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0002
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : b, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Check, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : never, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : null, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0036
Next Token : );, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0005
Next Token : let, Posbility: 0.0005
Next Token : end, Posbility: 0.0031
Next Token : ;, Posbility: 0.0052
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : Printf, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  empty, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0013
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Optional, Posbility: 0.0000
Next Token : Nil, Posbility: 0.0000
Next Token : 
, Posbility: 0.0006
Next Token : Some, Posbility: 0.0041
Next Token : None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  So, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token :  None, Posbility: 0.0009
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token : 8,, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token : 7,, Posbility: 0.0002
Next Token : 9,, Posbility: 0.0003
Next Token : 8,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ";, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ", Posbility: 0.0002
Next Token : \, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : b, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : r, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token : ",, Posbility: 0.0000
Next Token : ";, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n"
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : Check, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token : check, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : false, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : nil, Posbility: 0.0000
Next Token : null, Posbility: 0.0000
Next Token : none, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ));, Posbility: 0.0000
Next Token : ), Posbility: 0.0046
Next Token : );, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token : ;, Posbility: 0.0004
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0010
Next Token : let, Posbility: 0.0012
Next Token : end, Posbility: 0.0029
Next Token : ;, Posbility: 0.0096
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : Printf, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 0.0012
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : (), Posbility: 0.0017
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token : Some, Posbility: 0.0028
Next Token : None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  So, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  0,, Posbility: 0.0000
Next Token : 9,, Posbility: 0.0000
Next Token :  10,, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0000
Next Token : 7,, Posbility: 0.0000
Next Token : 8,, Posbility: 0.0001
Next Token : 9, Posbility: 0.0002
Next Token : 9,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0179
Next Token : ,, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None,
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0003
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0010
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : Println, Posbility: 0.0000
Next Token : printf, Posbility: 0.0000
Next Token : Printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : 。, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : println, Posbility: 0.0000
Next Token : sprintf, Posbility: 0.0000
Next Token : print, Posbility: 0.0000
Next Token : Printf, Posbility: 0.0000
Next Token : printf, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "%, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf "
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf "t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf "t =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf "t = %
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if the given tuple has any none value or not. *)
let (check_none t) =
  let t = List.rev t in
  let rec f t =
    match t with
    | [] -> true
    | _ -> false
  in
  f t
;;
let () =
  let t = (None, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (Some 1, None, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, Some 2, None, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, Some 3, None, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, Some 4, None, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, Some 5, None, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, Some 6, None, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, Some 7, None, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, Some 8, None, None, None) in
  Printf.printf "t = %s\n" (check_none t);
  let t = (None, None, None, None, None, None, None, None, Some 9, None, None) in
  Printf.printf "t = %s
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>