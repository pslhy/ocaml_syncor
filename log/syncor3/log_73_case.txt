code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sub, Posbility: 0.0376
Next Token :  find, Posbility: 0.0796
Next Token :  , Posbility: 0.1689
Next Token :  max, Posbility: 0.1689
Next Token :  rec, Posbility: 0.3574
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sub, Posbility: 0.0203
Next Token :  count, Posbility: 0.0623
Next Token :  find, Posbility: 0.1924
Next Token :  , Posbility: 0.2471
Next Token :  max, Posbility: 0.2471
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0064
Next Token :  =, Posbility: 0.0064
Next Token : diff, Posbility: 0.0420
Next Token : Diff, Posbility: 0.0476
Next Token : _, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zeros, Posbility: 0.0129
Next Token : sub, Posbility: 0.0240
Next Token : zero, Posbility: 0.0272
Next Token : difference, Posbility: 0.0510
Next Token : diff, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0139
Next Token : (, Posbility: 0.0259
Next Token :  =, Posbility: 0.1914
Next Token :  , Posbility: 0.2773
Next Token : _, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0378
Next Token : rec, Posbility: 0.0549
Next Token : of, Posbility: 0.1025
Next Token : sub, Posbility: 0.1494
Next Token : helper, Posbility: 0.2461
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0142
Next Token :  l, Posbility: 0.0161
Next Token : (, Posbility: 0.1050
Next Token :  =, Posbility: 0.1523
Next Token :  , Posbility: 0.6055
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : b, Posbility: 0.0391
Next Token : :, Posbility: 0.0442
Next Token : x, Posbility: 0.0566
Next Token : (, Posbility: 0.2246
Next Token : s, Posbility: 0.3691
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0515
Next Token :  len, Posbility: 0.0659
Next Token :  i, Posbility: 0.1396
Next Token :  =, Posbility: 0.1797
Next Token :  , Posbility: 0.2305
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0791
Next Token : d, Posbility: 0.0898
Next Token : p, Posbility: 0.0898
Next Token : m, Posbility: 0.1016
Next Token : n, Posbility: 0.1680
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pos, Posbility: 0.0208
Next Token :  l, Posbility: 0.0236
Next Token :  i, Posbility: 0.0640
Next Token :  , Posbility: 0.2227
Next Token :  =, Posbility: 0.4727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0014
Next Token : 

, Posbility: 0.0017
Next Token :  match, Posbility: 0.0309
Next Token :  , Posbility: 0.0576
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0037
Next Token :    , Posbility: 0.0070
Next Token : 	, Posbility: 0.0130
Next Token :     , Posbility: 0.1582
Next Token :   , Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0050
Next Token : (, Posbility: 0.0095
Next Token : let, Posbility: 0.1299
Next Token : match, Posbility: 0.3125
Next Token : if, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0067
Next Token :  not, Posbility: 0.0140
Next Token :  string, Posbility: 0.0491
Next Token :  String, Posbility: 0.1338
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0083
Next Token : Char, Posbility: 0.0289
Next Token : (, Posbility: 0.0479
Next Token : s, Posbility: 0.1299
Next Token : n, Posbility: 0.7461
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0444
Next Token :  ==, Posbility: 0.0732
Next Token :  <=, Posbility: 0.1211
Next Token :  , Posbility: 0.1992
Next Token :  =, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0024
Next Token :  [], Posbility: 0.0024
Next Token :  , Posbility: 0.0175
Next Token :  1, Posbility: 0.0175
Next Token :  0, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0039
Next Token :  &&, Posbility: 0.0064
Next Token :  ||, Posbility: 0.0135
Next Token : 
, Posbility: 0.0222
Next Token :  then, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0105
Next Token :  1, Posbility: 0.0284
Next Token :  0, Posbility: 0.2100
Next Token : 
, Posbility: 0.3477
Next Token :  , Posbility: 0.3477
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0762
Next Token : n, Posbility: 0.0762
Next Token : return, Posbility: 0.1113
Next Token : (, Posbility: 0.1260
Next Token : s, Posbility: 0.3418
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0742
Next Token :  =, Posbility: 0.0952
Next Token : 
, Posbility: 0.1079
Next Token : ., Posbility: 0.2285
Next Token :  with, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0217
Next Token : 
, Posbility: 0.0356
Next Token :  the, Posbility: 0.0356
Next Token :  0, Posbility: 0.0972
Next Token :  , Posbility: 0.6328
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with the
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s with max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0674
Next Token : [0, Posbility: 0.0869
Next Token : [0], Posbility: 0.1260
Next Token : [, Posbility: 0.2363
Next Token : Length, Posbility: 0.3027
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0187
Next Token : ., Posbility: 0.0239
Next Token :  then, Posbility: 0.0349
Next Token : 
, Posbility: 0.0737
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0024
Next Token : >, Posbility: 0.0027
Next Token : 
, Posbility: 0.0027
Next Token : ::, Posbility: 0.0027
Next Token : -, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0150
Next Token :  string, Posbility: 0.0408
Next Token :  String, Posbility: 0.0522
Next Token :  1, Posbility: 0.1826
Next Token :  , Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length - 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length - 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length - String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length - string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length - count
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0156
Next Token :  max, Posbility: 0.0483
Next Token :  -1, Posbility: 0.1157
Next Token :  , Posbility: 0.3145
Next Token :  0, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length :: 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length :: 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length :: -1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length :: max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length :: int
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0104
Next Token :       , Posbility: 0.0152
Next Token :  , Posbility: 0.0284
Next Token :     , Posbility: 0.0603
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |, Posbility: 0.0056
Next Token : let, Posbility: 0.0064
Next Token : -, Posbility: 0.0120
Next Token : then, Posbility: 0.0120
Next Token : else, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0178
Next Token :  match, Posbility: 0.0294
Next Token :  max, Posbility: 0.0332
Next Token : 
, Posbility: 0.1494
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  else {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0361
Next Token :  match, Posbility: 0.0361
Next Token :  0, Posbility: 0.0408
Next Token :  max, Posbility: 0.1113
Next Token :  , Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  then

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0206
Next Token :  max, Posbility: 0.0339
Next Token :  match, Posbility: 0.0635
Next Token : -, Posbility: 0.0679
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  - 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  --
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0195
Next Token :  Find, Posbility: 0.0221
Next Token :  We, Posbility: 0.0221
Next Token :  If, Posbility: 0.0466
Next Token :  , Posbility: 0.3906
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -- 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -- If
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -- We
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -- Find
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  -- max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  - match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  - max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  - 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0305
Next Token :  l, Posbility: 0.0305
Next Token :  len, Posbility: 0.0393
Next Token :  max, Posbility: 0.0830
Next Token :  , Posbility: 0.4766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let len
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let l
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  let i
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  otherwise, Posbility: 0.0104
Next Token :  true, Posbility: 0.0118
Next Token : >, Posbility: 0.0220
Next Token :  0, Posbility: 0.0679
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  | 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  | 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0046
Next Token :  fun, Posbility: 0.0126
Next Token :  string, Posbility: 0.0391
Next Token :  String, Posbility: 0.4180
Next Token :  , Posbility: 0.4746
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |> String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |> string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |> fun
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  |> str
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  | true
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
  | otherwise
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0034
Next Token : (, Posbility: 0.0049
Next Token : |, Posbility: 0.0282
Next Token : else, Posbility: 0.3027
Next Token : -, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0190
Next Token :  String, Posbility: 0.0276
Next Token :  max, Posbility: 0.0403
Next Token :  match, Posbility: 0.1094
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    - 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    - match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    - max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    - String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    - string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0058
Next Token :  match, Posbility: 0.0293
Next Token : 
, Posbility: 0.0903
Next Token :  max, Posbility: 0.1025
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    else {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  false, Posbility: 0.0079
Next Token : >, Posbility: 0.0115
Next Token :  true, Posbility: 0.0130
Next Token :  0, Posbility: 0.1089
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    | 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    | 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    | true
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0029
Next Token :  fun, Posbility: 0.0131
Next Token :  string, Posbility: 0.0244
Next Token :  , Posbility: 0.4316
Next Token :  String, Posbility: 0.4902
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |> String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |> string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |> fun
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    |> str
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    | false
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0236
Next Token : s, Posbility: 0.0266
Next Token : if, Posbility: 0.0388
Next Token : max, Posbility: 0.0498
Next Token : *, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Find, Posbility: 0.0229
Next Token :  The, Posbility: 0.0430
Next Token :  We, Posbility: 0.0486
Next Token :  If, Posbility: 0.1167
Next Token :  , Posbility: 0.4062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : return, Posbility: 0.0238
Next Token : s, Posbility: 0.0347
Next Token : n, Posbility: 0.0571
Next Token : if, Posbility: 0.1064
Next Token : Base, Posbility: 0.1758
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0060
Next Token :  of, Posbility: 0.0078
Next Token :  condition, Posbility: 0.0210
Next Token :  cases, Posbility: 0.0270
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : s, Posbility: 0.0008
Next Token : 2, Posbility: 0.0008
Next Token : recursion, Posbility: 0.0009
Next Token : Case, Posbility: 0.0025
Next Token : case, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0894
Next Token : ,, Posbility: 0.0894
Next Token :  *), Posbility: 0.0894
Next Token : ., Posbility: 0.1475
Next Token : :, Posbility: 0.4004
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  no, Posbility: 0.0220
Next Token :  we, Posbility: 0.0596
Next Token :  the, Posbility: 0.0596
Next Token :  when, Posbility: 0.0596
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : length, Posbility: 0.0271
Next Token : s, Posbility: 0.0737
Next Token : n, Posbility: 0.1069
Next Token : return, Posbility: 0.1768
Next Token : if, Posbility: 0.3730
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0189
Next Token :  we, Posbility: 0.1396
Next Token :  the, Posbility: 0.1396
Next Token :  there, Posbility: 0.1396
Next Token :  , Posbility: 0.3789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : substring, Posbility: 0.0063
Next Token : length, Posbility: 0.0249
Next Token : s, Posbility: 0.2090
Next Token : n, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : =0, Posbility: 0.0239
Next Token :  , Posbility: 0.0393
Next Token :  ==, Posbility: 0.0649
Next Token :  is, Posbility: 0.2910
Next Token :  =, Posbility: 0.4785
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  1, Posbility: 0.0032
Next Token :  number, Posbility: 0.0032
Next Token :  , Posbility: 0.0238
Next Token :  0,, Posbility: 0.4785
Next Token :  0, Posbility: 0.4785
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0317
Next Token :  and, Posbility: 0.0317
Next Token :  , Posbility: 0.0864
Next Token :  we, Posbility: 0.0864
Next Token :  then, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0146
Next Token :  there, Posbility: 0.0398
Next Token :  we, Posbility: 0.1079
Next Token :  , Posbility: 0.2930
Next Token :  the, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0747
Next Token :  maximum, Posbility: 0.0747
Next Token :  answer, Posbility: 0.0747
Next Token :  , Posbility: 0.2041
Next Token :  number, Posbility: 0.2041
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  in, Posbility: 0.0009
Next Token :  0, Posbility: 0.0025
Next Token :  is, Posbility: 0.0025
Next Token :  of, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  one, Posbility: 0.0188
Next Token :  zero, Posbility: 0.0188
Next Token :  , Posbility: 0.1387
Next Token :  1, Posbility: 0.3770
Next Token :  0, Posbility: 0.3770
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0054
Next Token : -, Posbility: 0.0062
Next Token :  is, Posbility: 0.0115
Next Token : ', Posbility: 0.0454
Next Token : s, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0225
Next Token :  =, Posbility: 0.0225
Next Token :  in, Posbility: 0.1660
Next Token :  and, Posbility: 0.1660
Next Token :  is, Posbility: 0.4512
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0247
Next Token :  at, Posbility: 0.0247
Next Token :  , Posbility: 0.0669
Next Token :  equal, Posbility: 0.1816
Next Token :  the, Posbility: 0.4941
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  string, Posbility: 0.0031
Next Token :  total, Posbility: 0.0227
Next Token :  same, Posbility: 0.0227
Next Token :  , Posbility: 0.4551
Next Token :  number, Posbility: 0.4551
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  to, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  in, Posbility: 0.0009
Next Token : 
, Posbility: 0.0025
Next Token :  of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0156
Next Token :  the, Posbility: 0.0156
Next Token :  characters, Posbility: 0.0156
Next Token :  , Posbility: 0.0425
Next Token :  1, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  in, Posbility: 0.0006
Next Token : ., Posbility: 0.0007
Next Token : ', Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0214
Next Token : ,, Posbility: 0.0581
Next Token :  in, Posbility: 0.1572
Next Token :  *), Posbility: 0.1572
Next Token : ., Posbility: 0.4277
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0103
Next Token : 
, Posbility: 0.0103
Next Token : *, Posbility: 0.0103
Next Token :  , Posbility: 0.0170
Next Token :  *), Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token : 

, Posbility: 0.0040
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0025
Next Token :  , Posbility: 0.0037
Next Token : else, Posbility: 0.0061
Next Token :     , Posbility: 0.0835
Next Token :   , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0027
Next Token : let, Posbility: 0.0039
Next Token : elif, Posbility: 0.0082
Next Token : |, Posbility: 0.0325
Next Token : else, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0022
Next Token :  {, Posbility: 0.0069
Next Token :  match, Posbility: 0.0113
Next Token : 
, Posbility: 0.1768
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  else  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  false, Posbility: 0.0103
Next Token :  otherwise, Posbility: 0.0170
Next Token : >, Posbility: 0.0359
Next Token :  0, Posbility: 0.0461
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  | 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  | 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0231
Next Token :  string, Posbility: 0.0295
Next Token :  fun, Posbility: 0.0552
Next Token :  String, Posbility: 0.2812
Next Token :  , Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |> String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |> fun
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |> string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  |> function
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  | otherwise
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  | false
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0048
Next Token :  not, Posbility: 0.0079
Next Token :  string, Posbility: 0.0101
Next Token :  String, Posbility: 0.0312
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif not
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  elif 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0383
Next Token :  len, Posbility: 0.0383
Next Token :  rec, Posbility: 0.0383
Next Token :  max, Posbility: 0.0630
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let rec
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let len
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  let i
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0024
Next Token : let, Posbility: 0.0031
Next Token : else, Posbility: 0.0094
Next Token : **, Posbility: 0.0155
Next Token : *, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  The, Posbility: 0.0142
Next Token :  Note, Posbility: 0.0142
Next Token :  If, Posbility: 0.0496
Next Token :  In, Posbility: 0.1523
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Else, Posbility: 0.0129
Next Token : Base, Posbility: 0.0146
Next Token : Rec, Posbility: 0.0398
Next Token : Otherwise, Posbility: 0.0579
Next Token : Recursive, Posbility: 0.6211
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : :, Posbility: 0.0056
Next Token : ly, Posbility: 0.0152
Next Token :  cases, Posbility: 0.0152
Next Token :  step, Posbility: 0.1123
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : formula, Posbility: 0.0002
Next Token : helper, Posbility: 0.0006
Next Token : Step, Posbility: 0.0007
Next Token : Case, Posbility: 0.0019
Next Token : case, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0024
Next Token :  1, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token : ., Posbility: 0.0176
Next Token : :, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0304
Next Token :  If, Posbility: 0.0304
Next Token :  the, Posbility: 0.0304
Next Token :  we, Posbility: 0.0304
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : s, Posbility: 0.0154
Next Token : let, Posbility: 0.0154
Next Token : return, Posbility: 0.0255
Next Token : n, Posbility: 0.0420
Next Token : if, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  not, Posbility: 0.0154
Next Token :  we, Posbility: 0.0154
Next Token :  the, Posbility: 0.0417
Next Token :  there, Posbility: 0.0417
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : substring, Posbility: 0.0005
Next Token : (, Posbility: 0.0023
Next Token : length, Posbility: 0.0038
Next Token : s, Posbility: 0.0469
Next Token : n, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0148
Next Token :  !=, Posbility: 0.0403
Next Token :  is, Posbility: 0.0515
Next Token :  =, Posbility: 0.3809
Next Token :  , Posbility: 0.4902
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ⁇ , Posbility: 0.0010
Next Token : ≥, Posbility: 0.0016
Next Token : -, Posbility: 0.0021
Next Token : <, Posbility: 0.1465
Next Token : >, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n >
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token :  , Posbility: 0.0024
Next Token :  1, Posbility: 0.0065
Next Token :  0,, Posbility: 0.0178
Next Token :  0, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  find, Posbility: 0.0059
Next Token :  , Posbility: 0.0161
Next Token :  we, Posbility: 0.0161
Next Token :  and, Posbility: 0.0437
Next Token :  then, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0659
Next Token :  find, Posbility: 0.0659
Next Token :  , Posbility: 0.1797
Next Token :  the, Posbility: 0.1797
Next Token :  we, Posbility: 0.1797
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ', Posbility: 0.0432
Next Token :  need, Posbility: 0.1177
Next Token :  have, Posbility: 0.1177
Next Token :  , Posbility: 0.1177
Next Token :  can, Posbility: 0.1177
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ', Posbility: 0.0203
Next Token :  find, Posbility: 0.0552
Next Token :  either, Posbility: 0.0552
Next Token :  consider, Posbility: 0.0552
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : recursive, Posbility: 0.0554
Next Token : add, Posbility: 0.0713
Next Token : try, Posbility: 0.0913
Next Token : divide, Posbility: 0.1172
Next Token : split, Posbility: 0.1504
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0134
Next Token :  it, Posbility: 0.0134
Next Token :  into, Posbility: 0.0364
Next Token :  , Posbility: 0.0991
Next Token :  the, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  current, Posbility: 0.0762
Next Token :  binary, Posbility: 0.0762
Next Token :  , Posbility: 0.0762
Next Token :  sub, Posbility: 0.0762
Next Token :  string, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0168
Next Token :  , Posbility: 0.0457
Next Token :  at, Posbility: 0.1240
Next Token :  into, Posbility: 0.3379
Next Token :  in, Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  three, Posbility: 0.0045
Next Token :  , Posbility: 0.0330
Next Token :  the, Posbility: 0.0330
Next Token :  two, Posbility: 0.2432
Next Token :  half, Posbility: 0.6602
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0488
Next Token : ,, Posbility: 0.1328
Next Token : ., Posbility: 0.1328
Next Token :  at, Posbility: 0.1328
Next Token :  and, Posbility: 0.3613
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  check, Posbility: 0.0457
Next Token :  rec, Posbility: 0.1245
Next Token :  find, Posbility: 0.1245
Next Token :  , Posbility: 0.1245
Next Token :  call, Posbility: 0.1245
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0292
Next Token :  this, Posbility: 0.0481
Next Token :  , Posbility: 0.1309
Next Token :  max, Posbility: 0.3555
Next Token :  the, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0292
Next Token :  max, Posbility: 0.0481
Next Token :  same, Posbility: 0.0481
Next Token :  , Posbility: 0.3555
Next Token :  function, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0432
Next Token :  to, Posbility: 0.0432
Next Token :  on, Posbility: 0.1177
Next Token :  , Posbility: 0.3203
Next Token :  for, Posbility: 0.3203
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0286
Next Token :  , Posbility: 0.0286
Next Token :  one, Posbility: 0.0286
Next Token :  each, Posbility: 0.2109
Next Token :  the, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0276
Next Token :  first, Posbility: 0.0752
Next Token :  , Posbility: 0.0752
Next Token :  two, Posbility: 0.0752
Next Token :  left, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0201
Next Token :  , Posbility: 0.0201
Next Token :  sub, Posbility: 0.0549
Next Token :  half, Posbility: 0.4043
Next Token :  and, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0021
Next Token :  for, Posbility: 0.0058
Next Token : 
, Posbility: 0.0157
Next Token :  the, Posbility: 0.1162
Next Token :  right, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.1030
Next Token :  part, Posbility: 0.1030
Next Token :  parts, Posbility: 0.1030
Next Token :  sub, Posbility: 0.2812
Next Token :  half, Posbility: 0.2812
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0610
Next Token :  *), Posbility: 0.0610
Next Token :  of, Posbility: 0.1006
Next Token : s, Posbility: 0.1660
Next Token : ., Posbility: 0.4512
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0145
Next Token : *, Posbility: 0.0145
Next Token :  , Posbility: 0.0505
Next Token : 
, Posbility: 0.0830
Next Token :  *), Posbility: 0.7891
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token : 

, Posbility: 0.0007
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0017
Next Token : else, Posbility: 0.0052
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0031
Next Token : |, Posbility: 0.0097
Next Token : (, Posbility: 0.1040
Next Token : let, Posbility: 0.1943
Next Token : else, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0045
Next Token :  match, Posbility: 0.0226
Next Token :  {, Posbility: 0.0226
Next Token : 
, Posbility: 0.3535
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else match
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  else max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  half, Posbility: 0.0277
Next Token :  mid, Posbility: 0.0457
Next Token :  l, Posbility: 0.0752
Next Token :  left, Posbility: 0.3379
Next Token :  , Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let left
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let l
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let mid
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  let half
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0101
Next Token : max, Posbility: 0.0188
Next Token : match, Posbility: 0.0242
Next Token : let, Posbility: 0.1079
Next Token : *, Posbility: 0.8008
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  The, Posbility: 0.1001
Next Token :  If, Posbility: 0.1001
Next Token :  Note, Posbility: 0.1001
Next Token :  We, Posbility: 0.1138
Next Token :  , Posbility: 0.3496
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Call, Posbility: 0.0315
Next Token : At, Posbility: 0.0356
Next Token : Let, Posbility: 0.0356
Next Token : Since, Posbility: 0.0459
Next Token : Recursive, Posbility: 0.0520
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  base, Posbility: 0.0236
Next Token : ly, Posbility: 0.0388
Next Token :  call, Posbility: 0.0388
Next Token :  step, Posbility: 0.0640
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Base, Posbility: 0.0024
Next Token : Case, Posbility: 0.0031
Next Token : helper, Posbility: 0.0057
Next Token : termination, Posbility: 0.0065
Next Token : case, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0035
Next Token :  1, Posbility: 0.0035
Next Token :  for, Posbility: 0.0096
Next Token :  , Posbility: 0.0708
Next Token : :, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0114
Next Token :  the, Posbility: 0.0309
Next Token :  If, Posbility: 0.0309
Next Token :  we, Posbility: 0.0840
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0033
Next Token : let, Posbility: 0.0062
Next Token : return, Posbility: 0.0080
Next Token : n, Posbility: 0.0132
Next Token : if, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0024
Next Token :  there, Posbility: 0.0024
Next Token :  we, Posbility: 0.0065
Next Token :  the, Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : length, Posbility: 0.0005
Next Token : (, Posbility: 0.0024
Next Token : s, Posbility: 0.0179
Next Token : n, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ==, Posbility: 0.0107
Next Token :  <=, Posbility: 0.0177
Next Token :  is, Posbility: 0.0177
Next Token :  =, Posbility: 0.3555
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : equals, Posbility: 0.0008
Next Token : ≤, Posbility: 0.0011
Next Token : >, Posbility: 0.0474
Next Token : <, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n <
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token :  0,, Posbility: 0.0065
Next Token :  1, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  0, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  we, Posbility: 0.0024
Next Token :  or, Posbility: 0.0035
Next Token :  , Posbility: 0.0065
Next Token :  and, Posbility: 0.0074
Next Token :  then, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0053
Next Token :  there, Posbility: 0.0144
Next Token :  , Posbility: 0.0393
Next Token :  the, Posbility: 0.1064
Next Token :  we, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  have, Posbility: 0.0574
Next Token :  call, Posbility: 0.0574
Next Token :  , Posbility: 0.0574
Next Token :  must, Posbility: 0.0574
Next Token :  can, Posbility: 0.4238
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  not, Posbility: 0.0056
Next Token :  do, Posbility: 0.0154
Next Token : ', Posbility: 0.0154
Next Token :  only, Posbility: 0.0154
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : append, Posbility: 0.0037
Next Token : repeat, Posbility: 0.0061
Next Token : add, Posbility: 0.0100
Next Token : return, Posbility: 0.0165
Next Token : split, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  again, Posbility: 0.0024
Next Token :  in, Posbility: 0.0040
Next Token :  it, Posbility: 0.0066
Next Token :  the, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0009
Next Token :  left, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  right, Posbility: 0.0025
Next Token :  string, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0024
Next Token :  by, Posbility: 0.0024
Next Token :  and, Posbility: 0.0065
Next Token :  again, Posbility: 0.0065
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  both, Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  the, Posbility: 0.0024
Next Token :  two, Posbility: 0.0178
Next Token :  half, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0064
Next Token :  but, Posbility: 0.0064
Next Token :  , Posbility: 0.0064
Next Token : ,, Posbility: 0.0064
Next Token :  and, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  use, Posbility: 0.0009
Next Token :  then, Posbility: 0.0009
Next Token :  check, Posbility: 0.0009
Next Token :  , Posbility: 0.0178
Next Token :  call, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0006
Next Token :  it, Posbility: 0.0007
Next Token :  function, Posbility: 0.0010
Next Token :  , Posbility: 0.0012
Next Token :  the, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  same, Posbility: 0.0004
Next Token :  functions, Posbility: 0.0005
Next Token :  right, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :  function, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  in, Posbility: 0.0009
Next Token :  again, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  on, Posbility: 0.0025
Next Token :  for, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  each, Posbility: 0.0005
Next Token :  left, Posbility: 0.0005
Next Token :  both, Posbility: 0.0025
Next Token :  the, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  middle, Posbility: 0.0007
Next Token :  , Posbility: 0.0018
Next Token :  right, Posbility: 0.2676
Next Token :  left, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  part, Posbility: 0.0005
Next Token :  sub, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  half, Posbility: 0.0109
Next Token :  and, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  left, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  the, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  hand, Posbility: 0.0015
Next Token : 
, Posbility: 0.0025
Next Token :  half, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0048
Next Token :  , Posbility: 0.0167
Next Token : ,, Posbility: 0.0215
Next Token :  *), Posbility: 0.0215
Next Token : ., Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : *, Posbility: 0.0067
Next Token :   , Posbility: 0.0076
Next Token :  , Posbility: 0.0300
Next Token : 
, Posbility: 0.0437
Next Token :  *), Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0014
Next Token :  , Posbility: 0.0064
Next Token : 

, Posbility: 0.0371
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0056
Next Token : else, Posbility: 0.0067
Next Token :     , Posbility: 0.0111
Next Token : let, Posbility: 0.0250
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0204
Next Token : if, Posbility: 0.0262
Next Token : else, Posbility: 0.2197
Next Token : (, Posbility: 0.3184
Next Token : let, Posbility: 0.3613
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0269
Next Token :  max, Posbility: 0.0444
Next Token :  l, Posbility: 0.0732
Next Token :  left, Posbility: 0.3281
Next Token :  , Posbility: 0.3281
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let left
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let l
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let max
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  let rec
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0120
Next Token : max, Posbility: 0.0135
Next Token : match, Posbility: 0.0287
Next Token : let, Posbility: 0.0537
Next Token : *, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  We, Posbility: 0.0391
Next Token :  The, Posbility: 0.0503
Next Token :  If, Posbility: 0.0645
Next Token :  Note, Posbility: 0.0645
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Here, Posbility: 0.0107
Next Token : At, Posbility: 0.0156
Next Token : Compare, Posbility: 0.0292
Next Token : Base, Posbility: 0.1484
Next Token : Recursive, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0031
Next Token :  call, Posbility: 0.0051
Next Token :  base, Posbility: 0.0084
Next Token :  step, Posbility: 0.0084
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : helper, Posbility: 0.0004
Next Token : Base, Posbility: 0.0005
Next Token : Case, Posbility: 0.0007
Next Token : termination, Posbility: 0.0012
Next Token : case, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0009
Next Token : ,, Posbility: 0.0009
Next Token :  for, Posbility: 0.0024
Next Token :  , Posbility: 0.0109
Next Token : :, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0148
Next Token :  when, Posbility: 0.0148
Next Token :  If, Posbility: 0.0148
Next Token :  we, Posbility: 0.0403
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : Base, Posbility: 0.0027
Next Token : return, Posbility: 0.0073
Next Token : n, Posbility: 0.0106
Next Token : if, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0023
Next Token :  there, Posbility: 0.0064
Next Token :  we, Posbility: 0.0064
Next Token :  the, Posbility: 0.0175
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : length, Posbility: 0.0023
Next Token : (, Posbility: 0.0038
Next Token : s, Posbility: 0.0469
Next Token : n, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ==, Posbility: 0.0134
Next Token :  >=, Posbility: 0.0221
Next Token :  is, Posbility: 0.0466
Next Token :  , Posbility: 0.1631
Next Token :  =, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0,, Posbility: 0.0155
Next Token :  1, Posbility: 0.0422
Next Token :  , Posbility: 0.0422
Next Token :  -1, Posbility: 0.0422
Next Token :  0, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  &&, Posbility: 0.0029
Next Token :  , Posbility: 0.0061
Next Token :  we, Posbility: 0.0061
Next Token :  and, Posbility: 0.0581
Next Token :  then, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0112
Next Token :  call, Posbility: 0.0112
Next Token :  , Posbility: 0.0830
Next Token :  the, Posbility: 0.2256
Next Token :  we, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  must, Posbility: 0.0226
Next Token :  are, Posbility: 0.0615
Next Token :  have, Posbility: 0.0615
Next Token :  , Posbility: 0.1670
Next Token :  can, Posbility: 0.4551
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0123
Next Token :  only, Posbility: 0.0334
Next Token : ', Posbility: 0.0334
Next Token :  find, Posbility: 0.0334
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : write, Posbility: 0.0056
Next Token : append, Posbility: 0.0056
Next Token : add, Posbility: 0.0250
Next Token : return, Posbility: 0.0679
Next Token : split, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token :  it, Posbility: 0.0009
Next Token :  in, Posbility: 0.0025
Next Token :  the, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  number, Posbility: 0.0009
Next Token :  sub, Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  left, Posbility: 0.0024
Next Token :  string, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0024
Next Token :  at, Posbility: 0.0064
Next Token :  and, Posbility: 0.0064
Next Token :  into, Posbility: 0.0064
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  the, Posbility: 0.0003
Next Token :  a, Posbility: 0.0003
Next Token :  two, Posbility: 0.0067
Next Token :  half, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0024
Next Token :  but, Posbility: 0.0024
Next Token :  , Posbility: 0.0024
Next Token : ,, Posbility: 0.0024
Next Token :  and, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  then, Posbility: 0.0009
Next Token :  find, Posbility: 0.0009
Next Token :  check, Posbility: 0.0024
Next Token :  , Posbility: 0.0177
Next Token :  call, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  max, Posbility: 0.0007
Next Token :  the, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0001
Next Token :  maximum, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  functions, Posbility: 0.0012
Next Token :  function, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  on, Posbility: 0.0006
Next Token :  again, Posbility: 0.0006
Next Token :  for, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  left, Posbility: 0.0005
Next Token :  each, Posbility: 0.0009
Next Token :  both, Posbility: 0.0015
Next Token :  the, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  first, Posbility: 0.0009
Next Token :  , Posbility: 0.0023
Next Token :  right, Posbility: 0.0471
Next Token :  left, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0005
Next Token :  part, Posbility: 0.0005
Next Token :  half, Posbility: 0.0067
Next Token :  and, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  left, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  the, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token :  hand, Posbility: 0.0012
Next Token : 
, Posbility: 0.0019
Next Token :  half, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0024
Next Token :  and, Posbility: 0.0027
Next Token :  *), Posbility: 0.0074
Next Token : ,, Posbility: 0.0095
Next Token : ., Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0023
Next Token : *, Posbility: 0.0039
Next Token :  , Posbility: 0.0119
Next Token : 
, Posbility: 0.0251
Next Token :  *), Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0044
Next Token : 

, Posbility: 0.0471
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0068
Next Token :     , Posbility: 0.0077
Next Token : else, Posbility: 0.0223
Next Token : let, Posbility: 0.0503
Next Token :   , Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0198
Next Token : if, Posbility: 0.0610
Next Token : else, Posbility: 0.0693
Next Token : let, Posbility: 0.3984
Next Token : (, Posbility: 0.3984
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0095
Next Token : if, Posbility: 0.0121
Next Token : match, Posbility: 0.0292
Next Token : let, Posbility: 0.0481
Next Token : *, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  We, Posbility: 0.0306
Next Token :  The, Posbility: 0.0347
Next Token :  Note, Posbility: 0.0347
Next Token :  If, Posbility: 0.0447
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Split, Posbility: 0.0092
Next Token : Let, Posbility: 0.0104
Next Token : Compare, Posbility: 0.0134
Next Token : Base, Posbility: 0.1621
Next Token : Recursive, Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0010
Next Token :  call, Posbility: 0.0019
Next Token :  step, Posbility: 0.0028
Next Token :  base, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : helper, Posbility: 0.0002
Next Token : Base, Posbility: 0.0003
Next Token : Case, Posbility: 0.0004
Next Token : termination, Posbility: 0.0005
Next Token : case, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0007
Next Token : ., Posbility: 0.0009
Next Token :  for, Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token : :, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  for, Posbility: 0.0023
Next Token :  the, Posbility: 0.0063
Next Token :  If, Posbility: 0.0063
Next Token :  we, Posbility: 0.0104
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : let, Posbility: 0.0008
Next Token : return, Posbility: 0.0031
Next Token : n, Posbility: 0.0040
Next Token : if, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0009
Next Token :  there, Posbility: 0.0009
Next Token :  we, Posbility: 0.0024
Next Token :  the, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : length, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 0.0228
Next Token : n, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  <=, Posbility: 0.0033
Next Token :  >=, Posbility: 0.0042
Next Token :  is, Posbility: 0.0069
Next Token :  =, Posbility: 0.1777
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equals, Posbility: 0.0001
Next Token : ≥, Posbility: 0.0002
Next Token : -, Posbility: 0.0005
Next Token : <, Posbility: 0.2227
Next Token : >, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n >
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token :  -1, Posbility: 0.0009
Next Token :  , Posbility: 0.0066
Next Token :  1, Posbility: 0.0066
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  but, Posbility: 0.0006
Next Token :  , Posbility: 0.0013
Next Token :  &&, Posbility: 0.0027
Next Token :  and, Posbility: 0.0228
Next Token :  then, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0009
Next Token :  call, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token :  the, Posbility: 0.0177
Next Token :  we, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  have, Posbility: 0.0009
Next Token :  must, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  call, Posbility: 0.0025
Next Token :  can, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  get, Posbility: 0.0002
Next Token :  merge, Posbility: 0.0003
Next Token :  call, Posbility: 0.0005
Next Token :  find, Posbility: 0.0009
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : replace, Posbility: 0.0002
Next Token : return, Posbility: 0.0005
Next Token : add, Posbility: 0.0009
Next Token : divide, Posbility: 0.0009
Next Token : split, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  string, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0002
Next Token :  number, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  left, Posbility: 0.0007
Next Token :  string, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  at, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  into, Posbility: 0.0007
Next Token :  and, Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  the, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  two, Posbility: 0.0012
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  again, Posbility: 0.0001
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : ., Posbility: 0.0009
Next Token :  and, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 0.0001
Next Token :  check, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  functions, Posbility: 0.0002
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  on, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  both, Posbility: 0.0001
Next Token :  each, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  left, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  middle, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  right, Posbility: 0.0052
Next Token :  left, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  half, Posbility: 0.0006
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  hand, Posbility: 0.0002
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : ,, Posbility: 0.0010
Next Token :  *), Posbility: 0.0025
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0012
Next Token : *, Posbility: 0.0019
Next Token :  , Posbility: 0.0045
Next Token : 
, Posbility: 0.0085
Next Token :  *), Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *), Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0073
Next Token :     , Posbility: 0.0112
Next Token : else, Posbility: 0.0112
Next Token : let, Posbility: 0.0444
Next Token :   , Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0086
Next Token : else, Posbility: 0.0206
Next Token : if, Posbility: 0.0300
Next Token : let, Posbility: 0.2227
Next Token : (, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0034
Next Token : 
, Posbility: 0.0063
Next Token : match, Posbility: 0.0117
Next Token : let, Posbility: 0.0248
Next Token : *, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Note, Posbility: 0.0087
Next Token :  The, Posbility: 0.0126
Next Token :  We, Posbility: 0.0143
Next Token :  If, Posbility: 0.0161
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Let, Posbility: 0.0034
Next Token : Compare, Posbility: 0.0034
Next Token : Rec, Posbility: 0.0039
Next Token : Base, Posbility: 0.0889
Next Token : Recursive, Posbility: 0.7461
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0003
Next Token :  step, Posbility: 0.0007
Next Token :  call, Posbility: 0.0008
Next Token :  base, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Base, Posbility: 0.0001
Next Token : end, Posbility: 0.0001
Next Token : termination, Posbility: 0.0001
Next Token : Case, Posbility: 0.0002
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0003
Next Token : ,, Posbility: 0.0003
Next Token :  for, Posbility: 0.0005
Next Token :  , Posbility: 0.0017
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  otherwise, Posbility: 0.0006
Next Token :  the, Posbility: 0.0013
Next Token :  If, Posbility: 0.0015
Next Token :  we, Posbility: 0.0024
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : return, Posbility: 0.0007
Next Token : n, Posbility: 0.0017
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0002
Next Token :  0, Posbility: 0.0004
Next Token :  we, Posbility: 0.0004
Next Token :  the, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0032
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  is, Posbility: 0.0008
Next Token :  ==, Posbility: 0.0008
Next Token :  <=, Posbility: 0.0049
Next Token :  =, Posbility: 0.0596
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : </, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0179
Next Token : <, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n <
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token :  -1, Posbility: 0.0006
Next Token :  1, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  &&, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0001
Next Token :  call, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token :  the, Posbility: 0.0015
Next Token :  we, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  must, Posbility: 0.0004
Next Token :  call, Posbility: 0.0009
Next Token :  cannot, Posbility: 0.0010
Next Token :  , Posbility: 0.0013
Next Token :  can, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0001
Next Token :  call, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  find, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : swap, Posbility: 0.0000
Next Token : add, Posbility: 0.0001
Next Token : return, Posbility: 0.0001
Next Token : divide, Posbility: 0.0001
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  by, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  into, Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0003
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  calls, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  each, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  right, Posbility: 0.0012
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  hand, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  *), Posbility: 0.0005
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : *, Posbility: 0.0009
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.0052
Next Token :  *), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0014
Next Token :  , Posbility: 0.0042
Next Token : 

, Posbility: 0.0752
Next Token : 
, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0089
Next Token :     , Posbility: 0.0156
Next Token : else, Posbility: 0.0177
Next Token : let, Posbility: 0.0903
Next Token :   , Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : else, Posbility: 0.0176
Next Token : in, Posbility: 0.0256
Next Token : if, Posbility: 0.0542
Next Token : let, Posbility: 0.3125
Next Token : (, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0076
Next Token : 
, Posbility: 0.0110
Next Token : match, Posbility: 0.0182
Next Token : let, Posbility: 0.0386
Next Token : *, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  In, Posbility: 0.0156
Next Token :  The, Posbility: 0.0258
Next Token :  We, Posbility: 0.0292
Next Token :  If, Posbility: 0.0376
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : At, Posbility: 0.0064
Next Token : Let, Posbility: 0.0064
Next Token : Compare, Posbility: 0.0119
Next Token : Base, Posbility: 0.1279
Next Token : Recursive, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0007
Next Token :  call, Posbility: 0.0024
Next Token :  step, Posbility: 0.0028
Next Token :  base, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : helper, Posbility: 0.0002
Next Token : Base, Posbility: 0.0003
Next Token : Case, Posbility: 0.0003
Next Token : termination, Posbility: 0.0004
Next Token : case, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0009
Next Token : ,, Posbility: 0.0009
Next Token :  for, Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token : :, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  when, Posbility: 0.0024
Next Token :  the, Posbility: 0.0039
Next Token :  If, Posbility: 0.0039
Next Token :  we, Posbility: 0.0064
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : s, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token : return, Posbility: 0.0024
Next Token : n, Posbility: 0.0040
Next Token : if, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  there, Posbility: 0.0003
Next Token :  we, Posbility: 0.0009
Next Token :  the, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : length, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.0140
Next Token : n, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  >=, Posbility: 0.0018
Next Token :  is, Posbility: 0.0023
Next Token :  ==, Posbility: 0.0030
Next Token :  , Posbility: 0.0593
Next Token :  =, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0,, Posbility: 0.0009
Next Token :  -1, Posbility: 0.0009
Next Token :  , Posbility: 0.0066
Next Token :  1, Posbility: 0.0066
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  &&, Posbility: 0.0001
Next Token :  or, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  and, Posbility: 0.0009
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0008
Next Token :  our, Posbility: 0.0008
Next Token :  , Posbility: 0.0059
Next Token :  the, Posbility: 0.1177
Next Token :  we, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  are, Posbility: 0.0015
Next Token :  call, Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token :  have, Posbility: 0.0040
Next Token :  can, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ', Posbility: 0.0002
Next Token :  only, Posbility: 0.0003
Next Token :  call, Posbility: 0.0003
Next Token :  find, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : recursive, Posbility: 0.0001
Next Token : add, Posbility: 0.0004
Next Token : divide, Posbility: 0.0005
Next Token : return, Posbility: 0.0006
Next Token : split, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0001
Next Token :  number, Posbility: 0.0001
Next Token :  left, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  by, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  into, Posbility: 0.0002
Next Token :  and, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  two, Posbility: 0.0007
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  continue, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  functions, Posbility: 0.0001
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  again, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  each, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  right, Posbility: 0.0007
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  part, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  hand, Posbility: 0.0002
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ,, Posbility: 0.0003
Next Token :  *), Posbility: 0.0007
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : *, Posbility: 0.0008
Next Token : 
, Posbility: 0.0040
Next Token :  , Posbility: 0.0046
Next Token :  *), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0039
Next Token : 

, Posbility: 0.0471
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0117
Next Token :  , Posbility: 0.0124
Next Token : else, Posbility: 0.0140
Next Token : let, Posbility: 0.0491
Next Token :   , Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0098
Next Token : else, Posbility: 0.0126
Next Token : if, Posbility: 0.0498
Next Token : let, Posbility: 0.1963
Next Token : (, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0042
Next Token : 
, Posbility: 0.0090
Next Token : match, Posbility: 0.0116
Next Token : let, Posbility: 0.0277
Next Token : *, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Return, Posbility: 0.0068
Next Token :  The, Posbility: 0.0112
Next Token :  We, Posbility: 0.0112
Next Token :  If, Posbility: 0.0127
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : End, Posbility: 0.0034
Next Token : Split, Posbility: 0.0034
Next Token : Rec, Posbility: 0.0039
Next Token : Base, Posbility: 0.1006
Next Token : Recursive, Posbility: 0.7422
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0002
Next Token :  step, Posbility: 0.0008
Next Token :  call, Posbility: 0.0008
Next Token :  base, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Base, Posbility: 0.0000
Next Token : termination, Posbility: 0.0001
Next Token : end, Posbility: 0.0001
Next Token : Case, Posbility: 0.0001
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0002
Next Token : ,, Posbility: 0.0003
Next Token :  for, Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  otherwise, Posbility: 0.0004
Next Token :  the, Posbility: 0.0008
Next Token :  If, Posbility: 0.0008
Next Token :  we, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : return, Posbility: 0.0006
Next Token : n, Posbility: 0.0010
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  there, Posbility: 0.0001
Next Token :  we, Posbility: 0.0003
Next Token :  the, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0025
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  +, Posbility: 0.0008
Next Token :  <=, Posbility: 0.0010
Next Token :  >=, Posbility: 0.0014
Next Token :  =, Posbility: 0.0371
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equals, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ≥, Posbility: 0.0000
Next Token : <, Posbility: 0.0110
Next Token : >, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n >
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  &&, Posbility: 0.0001
Next Token :  and, Posbility: 0.0004
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0000
Next Token :  call, Posbility: 0.0001
Next Token :  the, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  we, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  have, Posbility: 0.0001
Next Token :  cannot, Posbility: 0.0001
Next Token :  call, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  can, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0000
Next Token :  continue, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : swap, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : divide, Posbility: 0.0001
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  at, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  into, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0002
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  check, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  calls, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  funcion, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  each, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0003
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  hand, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  *), Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0044
Next Token :     , Posbility: 0.0053
Next Token : else, Posbility: 0.0053
Next Token : let, Posbility: 0.0088
Next Token :   , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0031
Next Token : else, Posbility: 0.0031
Next Token : if, Posbility: 0.0156
Next Token : let, Posbility: 0.1021
Next Token : (, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0017
Next Token : 
, Posbility: 0.0031
Next Token : match, Posbility: 0.0035
Next Token : let, Posbility: 0.0108
Next Token : *, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0015
Next Token :  If, Posbility: 0.0021
Next Token :  The, Posbility: 0.0024
Next Token :  We, Posbility: 0.0024
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : End, Posbility: 0.0010
Next Token : recursive, Posbility: 0.0014
Next Token : Rec, Posbility: 0.0018
Next Token : Base, Posbility: 0.0282
Next Token : Recursive, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0001
Next Token :  step, Posbility: 0.0002
Next Token :  call, Posbility: 0.0003
Next Token :  base, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Base, Posbility: 0.0000
Next Token : termination, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : Case, Posbility: 0.0001
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  for, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  otherwise, Posbility: 0.0001
Next Token :  the, Posbility: 0.0002
Next Token :  If, Posbility: 0.0002
Next Token :  we, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : return, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  we, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ==, Posbility: 0.0001
Next Token :  >=, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0006
Next Token :  =, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : </, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0032
Next Token : <, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n <
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  -1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  &&, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  there, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  we, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  will, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  cannot, Posbility: 0.0001
Next Token :  can, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  call, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :  do, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : divide, Posbility: 0.0000
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  right, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  into, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  hand, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  calling, Posbility: 0.0000
Next Token :  calls, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  funcion, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  each, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0002
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  hand, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  *), Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : *, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0028
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token :   , Posbility: 0.0007
Next Token :  , Posbility: 0.0023
Next Token : 

, Posbility: 0.0674
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0109
Next Token :  , Posbility: 0.0115
Next Token :     , Posbility: 0.0131
Next Token : let, Posbility: 0.0457
Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0077
Next Token : 
, Posbility: 0.0112
Next Token : if, Posbility: 0.0391
Next Token : let, Posbility: 0.1982
Next Token : (, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0048
Next Token : match, Posbility: 0.0102
Next Token : 
, Posbility: 0.0115
Next Token : let, Posbility: 0.0277
Next Token : *, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Return, Posbility: 0.0060
Next Token :  The, Posbility: 0.0113
Next Token :  If, Posbility: 0.0128
Next Token :  We, Posbility: 0.0128
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Split, Posbility: 0.0033
Next Token : Compare, Posbility: 0.0033
Next Token : Rec, Posbility: 0.0043
Next Token : Base, Posbility: 0.1108
Next Token : Recursive, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0002
Next Token :  step, Posbility: 0.0005
Next Token :  call, Posbility: 0.0008
Next Token :  base, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Base, Posbility: 0.0001
Next Token : end, Posbility: 0.0001
Next Token : termination, Posbility: 0.0001
Next Token : Case, Posbility: 0.0001
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0002
Next Token : ,, Posbility: 0.0003
Next Token :  for, Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token : :, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  base, Posbility: 0.0005
Next Token :  If, Posbility: 0.0009
Next Token :  the, Posbility: 0.0013
Next Token :  we, Posbility: 0.0022
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : return, Posbility: 0.0005
Next Token : n, Posbility: 0.0007
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  there, Posbility: 0.0002
Next Token :  we, Posbility: 0.0003
Next Token :  the, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0028
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  <=, Posbility: 0.0004
Next Token :  >=, Posbility: 0.0004
Next Token :  ==, Posbility: 0.0008
Next Token :  , Posbility: 0.0179
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n =
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  4, Posbility: 0.0002
Next Token :  -1, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token :  1, Posbility: 0.0025
Next Token :  0, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0001
Next Token :  our, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  the, Posbility: 0.0041
Next Token :  we, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  are, Posbility: 0.0001
Next Token :  cannot, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  have, Posbility: 0.0004
Next Token :  can, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  only, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  continue, Posbility: 0.0000
Next Token :  find, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : divide, Posbility: 0.0001
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  into, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0002
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  check, Posbility: 0.0000
Next Token :  calls, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  this, Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  funcion, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  each, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0002
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  hand, Posbility: 0.0002
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *), Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : *, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0015
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0021
Next Token : 

, Posbility: 0.0371
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0066
Next Token :     , Posbility: 0.0079
Next Token :  , Posbility: 0.0102
Next Token : let, Posbility: 0.0179
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0057
Next Token : 0, Posbility: 0.0057
Next Token : if, Posbility: 0.0198
Next Token : let, Posbility: 0.1006
Next Token : (, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : match, Posbility: 0.0035
Next Token : 
, Posbility: 0.0051
Next Token : let, Posbility: 0.0137
Next Token : *, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Return, Posbility: 0.0021
Next Token :  The, Posbility: 0.0031
Next Token :  We, Posbility: 0.0031
Next Token :  If, Posbility: 0.0035
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Repeat, Posbility: 0.0015
Next Token : End, Posbility: 0.0022
Next Token : Rec, Posbility: 0.0028
Next Token : Base, Posbility: 0.0498
Next Token : Recursive, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0001
Next Token :  step, Posbility: 0.0003
Next Token :  base, Posbility: 0.0003
Next Token :  call, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : termination, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : Case, Posbility: 0.0000
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  for, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  otherwise, Posbility: 0.0001
Next Token :  the, Posbility: 0.0001
Next Token :  If, Posbility: 0.0001
Next Token :  we, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : return, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  there, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  we, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :  <=, Posbility: 0.0003
Next Token :  >=, Posbility: 0.0004
Next Token :  =, Posbility: 0.0179
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ≥, Posbility: 0.0000
Next Token : <, Posbility: 0.0032
Next Token : >, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n >
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  we, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  will, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  cannot, Posbility: 0.0000
Next Token :  can, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0000
Next Token :  continue, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : slice, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : divide, Posbility: 0.0000
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  sub, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  into, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  hand, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  calling, Posbility: 0.0000
Next Token :  calls, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  this, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  funcion, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  each, Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0001
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  half, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  rights, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  side, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  hand, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  {}), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0015
Next Token : let, Posbility: 0.0017
Next Token :  , Posbility: 0.0022
Next Token :     , Posbility: 0.0023
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0011
Next Token : max, Posbility: 0.0011
Next Token : if, Posbility: 0.0050
Next Token : let, Posbility: 0.0369
Next Token : (, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0010
Next Token : /*, Posbility: 0.0013
Next Token : 
, Posbility: 0.0017
Next Token : let, Posbility: 0.0059
Next Token : *, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0007
Next Token :  We, Posbility: 0.0009
Next Token :  If, Posbility: 0.0009
Next Token :  The, Posbility: 0.0010
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : End, Posbility: 0.0006
Next Token : recursive, Posbility: 0.0008
Next Token : Rec, Posbility: 0.0011
Next Token : Base, Posbility: 0.0138
Next Token : Recursive, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0000
Next Token :  step, Posbility: 0.0001
Next Token :  base, Posbility: 0.0001
Next Token :  call, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : cas, Posbility: 0.0000
Next Token : ca, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : Case, Posbility: 0.0000
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  If, Posbility: 0.0001
Next Token :  we, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  we, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : </, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0008
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n <
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  our, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  the, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  we, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  must, Posbility: 0.0000
Next Token :  will, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  cannot, Posbility: 0.0000
Next Token :  can, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  do, Posbility: 0.0000
Next Token :  find, Posbility: 0.0000
Next Token :  call, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : slice, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : divide, Posbility: 0.0000
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  string, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  left, Posbility: 0.0000
Next Token :  strings, Posbility: 0.0000
Next Token :  number, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  string, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  into, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : half, Posbility: 0.0000
Next Token :  hand, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  two, Posbility: 0.0000
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  und, Posbility: 0.0000
Next Token : and, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  calling, Posbility: 0.0000
Next Token :  calls, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  call, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  this, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  funcion, Posbility: 0.0000
Next Token :  functions, Posbility: 0.0000
Next Token :  function, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  for, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  each, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  left, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  the, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 0.0001
Next Token :  left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  half, Posbility: 0.0000
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  the, Posbility: 0.0000
Next Token :  rights, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  side, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  hand, Posbility: 0.0001
Next Token :  half, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half.
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :  {}), Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0016
Next Token : 

, Posbility: 0.0420
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0086
Next Token :  , Posbility: 0.0118
Next Token :     , Posbility: 0.0134
Next Token : let, Posbility: 0.0300
Next Token :   , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0085
Next Token : 0, Posbility: 0.0110
Next Token : if, Posbility: 0.0262
Next Token : let, Posbility: 0.1514
Next Token : (, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0031
Next Token : match, Posbility: 0.0031
Next Token : 
, Posbility: 0.0064
Next Token : let, Posbility: 0.0154
Next Token : *, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (*
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  Return, Posbility: 0.0027
Next Token :  If, Posbility: 0.0044
Next Token :  The, Posbility: 0.0044
Next Token :  We, Posbility: 0.0044
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Repeat, Posbility: 0.0019
Next Token : End, Posbility: 0.0022
Next Token : Rec, Posbility: 0.0028
Next Token : Base, Posbility: 0.0491
Next Token : Recursive, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  cases, Posbility: 0.0001
Next Token :  step, Posbility: 0.0002
Next Token :  base, Posbility: 0.0004
Next Token :  call, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : termination, Posbility: 0.0000
Next Token : Base, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : Case, Posbility: 0.0001
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token :  for, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case:
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  base, Posbility: 0.0001
Next Token :  If, Posbility: 0.0002
Next Token :  the, Posbility: 0.0003
Next Token :  we, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : return, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec max_diff_helper s n =
  if n = 0 then s.Length 
    (* Base case: if n = 0 then the number of 0s is the number of 1s. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n = 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n > 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if n < 0 then we can split the string in half and call the function for the left and right half. *)
  (* Recursive case: if
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>