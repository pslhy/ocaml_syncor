code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  re, Posbility: 0.0317
Next Token :  find, Posbility: 0.0593
Next Token :  search, Posbility: 0.1826
Next Token :  , Posbility: 0.2070
Next Token :  rec, Posbility: 0.3418
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0173
Next Token :  find, Posbility: 0.1133
Next Token :  match, Posbility: 0.1279
Next Token :  , Posbility: 0.2402
Next Token :  search, Posbility: 0.3086
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0139
Next Token : (, Posbility: 0.0203
Next Token :  =, Posbility: 0.0708
Next Token :  , Posbility: 0.3594
Next Token : _, Posbility: 0.4609
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pattern, Posbility: 0.0815
Next Token : helper, Posbility: 0.0923
Next Token : string, Posbility: 0.0923
Next Token : regex, Posbility: 0.0923
Next Token : rec, Posbility: 0.1045
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0194
Next Token : (, Posbility: 0.0527
Next Token :  =, Posbility: 0.0767
Next Token : urse, Posbility: 0.1118
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0190
Next Token : :, Posbility: 0.0356
Next Token : pat, Posbility: 0.0518
Next Token : (, Posbility: 0.0967
Next Token : s, Posbility: 0.6289
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0325
Next Token :  start, Posbility: 0.0415
Next Token :  =, Posbility: 0.1279
Next Token :  pattern, Posbility: 0.1865
Next Token :  , Posbility: 0.3945
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : regex, Posbility: 0.0420
Next Token : reg, Posbility: 0.0476
Next Token : r, Posbility: 0.1465
Next Token : pat, Posbility: 0.1885
Next Token : p, Posbility: 0.3516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0075
Next Token :  start, Posbility: 0.0096
Next Token :  i, Posbility: 0.0159
Next Token :  , Posbility: 0.1035
Next Token :  =, Posbility: 0.7656
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0035
Next Token :  function, Posbility: 0.0121
Next Token :  match, Posbility: 0.0481
Next Token :  , Posbility: 0.0698
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0051
Next Token :    , Posbility: 0.0084
Next Token : 	, Posbility: 0.0084
Next Token :     , Posbility: 0.1152
Next Token :   , Posbility: 0.8516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0088
Next Token : try, Posbility: 0.0128
Next Token : if, Posbility: 0.2256
Next Token : let, Posbility: 0.2910
Next Token : match, Posbility: 0.4219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0034
Next Token :  !, Posbility: 0.0044
Next Token :  P, Posbility: 0.0056
Next Token :  String, Posbility: 0.3047
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0325
Next Token : (, Posbility: 0.0474
Next Token : Regex, Posbility: 0.1138
Next Token : s, Posbility: 0.1650
Next Token : p, Posbility: 0.5078
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : with, Posbility: 0.0018
Next Token :  , Posbility: 0.0021
Next Token : ,, Posbility: 0.0050
Next Token : ., Posbility: 0.0288
Next Token :  with, Posbility: 0.9531
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0017
Next Token :  [, Posbility: 0.0019
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0040
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :       , Posbility: 0.0010
Next Token :    , Posbility: 0.0014
Next Token :     , Posbility: 0.0598
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : [], Posbility: 0.0022
Next Token : [, Posbility: 0.0032
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0500
Next Token :  "", Posbility: 0.0500
Next Token :  None, Posbility: 0.0645
Next Token :  , Posbility: 0.2891
Next Token :  [], Posbility: 0.3711
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0027
Next Token :  =>, Posbility: 0.0057
Next Token :  when, Posbility: 0.0073
Next Token :  |, Posbility: 0.0106
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0008
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0505
Next Token :  None, Posbility: 0.1377
Next Token : 
, Posbility: 0.1377
Next Token :  Some, Posbility: 0.1377
Next Token :  , Posbility: 0.3730
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0291
Next Token : (0,, Posbility: 0.0791
Next Token : s, Posbility: 0.1152
Next Token : return, Posbility: 0.2148
Next Token : (, Posbility: 0.3535
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0374
Next Token : Some, Posbility: 0.0615
Next Token : (),, Posbility: 0.0791
Next Token : None, Posbility: 0.1895
Next Token : s, Posbility: 0.3125
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0019
Next Token :  =, Posbility: 0.0031
Next Token : ,0, Posbility: 0.0084
Next Token :  , Posbility: 0.0095
Next Token : ,, Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0178
Next Token :  None, Posbility: 0.0378
Next Token :  , Posbility: 0.0549
Next Token :  -1,, Posbility: 0.0801
Next Token :  0,, Posbility: 0.7578
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0189
Next Token :  -1), Posbility: 0.0311
Next Token :  0), Posbility: 0.1396
Next Token :  len, Posbility: 0.1396
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0723
Next Token : Length, Posbility: 0.0928
Next Token : Int, Posbility: 0.0928
Next Token : length, Posbility: 0.1729
Next Token : s, Posbility: 0.4160
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @, Posbility: 0.0087
Next Token :  , Posbility: 0.0184
Next Token : #, Posbility: 0.0344
Next Token : ), Posbility: 0.2246
Next Token : ., Posbility: 0.6914
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0028
Next Token : len, Posbility: 0.0046
Next Token : (, Posbility: 0.0052
Next Token : length, Posbility: 0.2871
Next Token : Length, Posbility: 0.6875
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : );, Posbility: 0.0034
Next Token : ()), Posbility: 0.0043
Next Token : -1), Posbility: 0.0118
Next Token :  , Posbility: 0.1436
Next Token : ), Posbility: 0.8242
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0063
Next Token :  |, Posbility: 0.0072
Next Token :  --, Posbility: 0.0081
Next Token :  , Posbility: 0.0195
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length) 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length) --
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length) |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : ^, Posbility: 0.0005
Next Token : âˆ’, Posbility: 0.0012
Next Token : ), Posbility: 0.0013
Next Token : -, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0063
Next Token :  1, Posbility: 0.0063
Next Token :  0), Posbility: 0.0172
Next Token :  1);, Posbility: 0.0172
Next Token :  1), Posbility: 0.9414
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length - 1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length - 1);
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length - 0)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length - 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length - 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length )
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0049
Next Token :  --, Posbility: 0.0063
Next Token :   , Posbility: 0.0081
Next Token :  , Posbility: 0.0250
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length )

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ) 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length )  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ) --
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length )


 score:True
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0023
Next Token :  2), Posbility: 0.0030
Next Token :  , Posbility: 0.0092
Next Token : 1), Posbility: 0.0413
Next Token :  1), Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’ 1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’ 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’ 2)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length âˆ’ 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0172
Next Token :  , Posbility: 0.0322
Next Token :  1), Posbility: 0.0413
Next Token : -1), Posbility: 0.0466
Next Token :  -1), Posbility: 0.8281
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^ -1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^-1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^ 1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^ 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length ^ -1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0403
Next Token : *, Posbility: 0.0457
Next Token :  0), Posbility: 0.0586
Next Token : #, Posbility: 0.1807
Next Token : >, Posbility: 0.3828
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0195
Next Token :  -1), Posbility: 0.0221
Next Token :  , Posbility: 0.0322
Next Token :  0, Posbility: 0.1270
Next Token :  0), Posbility: 0.7305
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <> 0)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <> 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <> -1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <> ?
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <#
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length < 0)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0549
Next Token :  string, Posbility: 0.0623
Next Token :  -1), Posbility: 0.0796
Next Token :  len, Posbility: 0.0903
Next Token :  , Posbility: 0.4590
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <* 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <* len
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <* -1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <* string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0244
Next Token :  -1), Posbility: 0.0586
Next Token :  1), Posbility: 0.0664
Next Token :  0), Posbility: 0.2314
Next Token :  , Posbility: 0.4902
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*> 0)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*> 1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*> -1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length <*>)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length < 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length-1)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length())
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length);
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0048
Next Token :  +, Posbility: 0.0048
Next Token : -1), Posbility: 0.0130
Next Token :  , Posbility: 0.2598
Next Token : ), Posbility: 0.7070
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0071
Next Token :  |, Posbility: 0.0092
Next Token :  --, Posbility: 0.0104
Next Token :  , Posbility: 0.0194
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pattern, Posbility: 0.0266
Next Token :  ", Posbility: 0.0302
Next Token :  [], Posbility: 0.0342
Next Token :  [, Posbility: 0.1533
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0376
Next Token : x, Posbility: 0.0903
Next Token : p, Posbility: 0.1021
Next Token : c, Posbility: 0.1157
Next Token : _, Posbility: 0.4590
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0073
Next Token :   , Posbility: 0.0120
Next Token :  when, Posbility: 0.0327
Next Token : ::, Posbility: 0.1660
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0004
Next Token : :, Posbility: 0.0012
Next Token : if, Posbility: 0.0391
Next Token : ->, Posbility: 0.4199
Next Token : ::, Posbility: 0.5391
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0060
Next Token :  [], Posbility: 0.0128
Next Token :  pattern, Posbility: 0.0270
Next Token :  rest, Posbility: 0.0942
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0781
Next Token : tail, Posbility: 0.1001
Next Token : _, Posbility: 0.1289
Next Token : q, Posbility: 0.1289
Next Token : p, Posbility: 0.2715
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0258
Next Token : 0, Posbility: 0.0330
Next Token : 1, Posbility: 0.0898
Next Token :  , Posbility: 0.3555
Next Token : ', Posbility: 0.4023
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0014
Next Token :  =>, Posbility: 0.0044
Next Token :  when, Posbility: 0.0064
Next Token :  as, Posbility: 0.0255
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token :  when, Posbility: 0.0001
Next Token : if, Posbility: 0.0012
Next Token : ::, Posbility: 0.0674
Next Token : ->, Posbility: 0.9297
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0053
Next Token :  search, Posbility: 0.0396
Next Token :  match, Posbility: 0.0396
Next Token :  , Posbility: 0.1074
Next Token : 
, Posbility: 0.7930
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0054
Next Token :      , Posbility: 0.0114
Next Token :   , Posbility: 0.0146
Next Token :     , Posbility: 0.4824
Next Token :       , Posbility: 0.4824
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0036
Next Token : (, Posbility: 0.0262
Next Token : match, Posbility: 0.1177
Next Token : if, Posbility: 0.1514
Next Token : let, Posbility: 0.6797
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0432
Next Token :  start, Posbility: 0.0432
Next Token :  match, Posbility: 0.0432
Next Token :  rec, Posbility: 0.0713
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0669
Next Token : s, Posbility: 0.0762
Next Token : r, Posbility: 0.0762
Next Token : m, Posbility: 0.1250
Next Token : (, Posbility: 0.2344
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : q, Posbility: 0.0479
Next Token : m, Posbility: 0.0542
Next Token : start, Posbility: 0.0698
Next Token : i, Posbility: 0.1670
Next Token : s, Posbility: 0.1895
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0386
Next Token : 0,, Posbility: 0.1187
Next Token : 1,, Posbility: 0.1348
Next Token : ,, Posbility: 0.2217
Next Token : ',, Posbility: 0.4141
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  index, Posbility: 0.0476
Next Token :  pos, Posbility: 0.0476
Next Token :  , Posbility: 0.2129
Next Token :  start, Posbility: 0.2129
Next Token :  i, Posbility: 0.3516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0143
Next Token : 0,, Posbility: 0.0143
Next Token : ), Posbility: 0.0645
Next Token : 1,, Posbility: 0.1060
Next Token : ,, Posbility: 0.7812
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0013
Next Token :  len, Posbility: 0.0153
Next Token :  i, Posbility: 0.0253
Next Token :  l, Posbility: 0.1128
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0112
Next Token : n, Posbility: 0.0304
Next Token : _, Posbility: 0.0825
Next Token : e, Posbility: 0.2246
Next Token : j, Posbility: 0.6094
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 1), Posbility: 0.0003
Next Token : ,, Posbility: 0.0052
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  :=, Posbility: 0.0009
Next Token :   , Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0038
Next Token : 
, Posbility: 0.0168
Next Token :  , Posbility: 0.0168
Next Token :  match, Posbility: 0.0278
Next Token :  search, Posbility: 0.9219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0001
Next Token : re, Posbility: 0.0001
Next Token : char, Posbility: 0.0003
Next Token : sub, Posbility: 0.0009
Next Token : rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0009
Next Token : _, Posbility: 0.0031
Next Token : (, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : substr, Posbility: 0.0000
Next Token : p, Posbility: 0.0059
Next Token : (, Posbility: 0.1187
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token : ., Posbility: 0.0006
Next Token :  ~, Posbility: 0.0019
Next Token : ', Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : head, Posbility: 0.0000
Next Token : s, Posbility: 0.0003
Next Token : (, Posbility: 0.0179
Next Token : p, Posbility: 0.9805
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 0.0011
Next Token : ',, Posbility: 0.0016
Next Token : ';, Posbility: 0.0292
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0013
Next Token :  &&, Posbility: 0.0014
Next Token :  , Posbility: 0.0021
Next Token : 
, Posbility: 0.0417
Next Token :  in, Posbility: 0.9492
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0025
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0010
Next Token :           , Posbility: 0.0019
Next Token :         , Posbility: 0.0045
Next Token :      , Posbility: 0.0139
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0107
Next Token : let, Posbility: 0.1299
Next Token : (, Posbility: 0.1299
Next Token : match, Posbility: 0.1299
Next Token : if, Posbility: 0.5820
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0181
Next Token :  string, Posbility: 0.0491
Next Token :  String, Posbility: 0.1338
Next Token :  i, Posbility: 0.2832
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.1011
Next Token : Regex, Posbility: 0.1011
Next Token : (, Posbility: 0.1147
Next Token : j, Posbility: 0.1895
Next Token : s, Posbility: 0.4004
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0216
Next Token :  , Posbility: 0.0312
Next Token : ', Posbility: 0.0752
Next Token :  =, Posbility: 0.2617
Next Token : ., Posbility: 0.5547
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0500
Next Token : start, Posbility: 0.0566
Next Token : substring, Posbility: 0.0933
Next Token : length, Posbility: 0.1201
Next Token : [, Posbility: 0.5391
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0009
Next Token : (, Posbility: 0.0014
Next Token :  i, Posbility: 0.0065
Next Token : j, Posbility: 0.0291
Next Token : i, Posbility: 0.9609
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0139
Next Token : :, Posbility: 0.0295
Next Token :  , Posbility: 0.0378
Next Token : ., Posbility: 0.1318
Next Token : ], Posbility: 0.7617
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  matches, Posbility: 0.0216
Next Token :  ==, Posbility: 0.0315
Next Token :  , Posbility: 0.0518
Next Token :  ~, Posbility: 0.0518
Next Token :  =, Posbility: 0.8125
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0090
Next Token : ?, Posbility: 0.0131
Next Token :  ?, Posbility: 0.0131
Next Token : ~, Posbility: 0.0167
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0042
Next Token : Char, Posbility: 0.0061
Next Token : Regex, Posbility: 0.0101
Next Token : s, Posbility: 0.1572
Next Token : p, Posbility: 0.8008
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0045
Next Token : [0];, Posbility: 0.0058
Next Token : ., Posbility: 0.2812
Next Token : ', Posbility: 0.2812
Next Token : [0], Posbility: 0.4082
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0074
Next Token : 
, Posbility: 0.0084
Next Token :  and, Posbility: 0.0229
Next Token :  &&, Posbility: 0.0908
Next Token :  then, Posbility: 0.8633
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0050
Next Token :  search, Posbility: 0.0176
Next Token :  i, Posbility: 0.0256
Next Token : 
, Posbility: 0.3535
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : j, Posbility: 0.0039
Next Token : s, Posbility: 0.0065
Next Token : 
, Posbility: 0.0107
Next Token : return, Posbility: 0.0107
Next Token : (, Posbility: 0.9609
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Some, Posbility: 0.0031
Next Token : p, Posbility: 0.0039
Next Token :  , Posbility: 0.0051
Next Token : i, Posbility: 0.0176
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0012
Next Token :  , Posbility: 0.0020
Next Token : ', Posbility: 0.0090
Next Token : ',, Posbility: 0.4902
Next Token : ,, Posbility: 0.4902
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : i, Posbility: 0.0009
Next Token :  0,, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  i, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0012
Next Token : +, Posbility: 0.0020
Next Token : +1,, Posbility: 0.0239
Next Token :  +, Posbility: 0.1768
Next Token : ,, Posbility: 0.7930
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0006
Next Token :  find, Posbility: 0.0006
Next Token :  match, Posbility: 0.0015
Next Token :  i, Posbility: 0.3750
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0065
Next Token : min, Posbility: 0.0065
Next Token : (, Posbility: 0.0065
Next Token : p, Posbility: 0.0065
Next Token : j, Posbility: 0.9688
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0060
Next Token :  , Posbility: 0.0098
Next Token :  +, Posbility: 0.0266
Next Token : );, Posbility: 0.0723
Next Token : ), Posbility: 0.8828
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j)
 score:False
Error type: noerr
---------------------------
Next Token :  with, Posbility: 0.0006
Next Token :  |, Posbility: 0.0016
Next Token :  , Posbility: 0.0079
Next Token : 
, Posbility: 0.1797
Next Token :  else, Posbility: 0.8047
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0029
Next Token :  None, Posbility: 0.0033
Next Token : 
, Posbility: 0.0130
Next Token :  , Posbility: 0.2617
Next Token :  search, Posbility: 0.7109
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_
 score:False
Error type: noerr
---------------------------
Next Token : recursion, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : next, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0005
Next Token : _, Posbility: 0.0007
Next Token : (, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : j, Posbility: 0.0001
Next Token : p, Posbility: 0.0014
Next Token : (, Posbility: 0.0757
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0008
Next Token : ., Posbility: 0.0011
Next Token :  ~, Posbility: 0.0011
Next Token : ', Posbility: 0.1807
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0001
Next Token : ([, Posbility: 0.0001
Next Token : s, Posbility: 0.0012
Next Token : (, Posbility: 0.1816
Next Token : p, Posbility: 0.8164
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0142
Next Token : ';, Posbility: 0.0161
Next Token : ;, Posbility: 0.0206
Next Token : ', Posbility: 0.2217
Next Token : 
, Posbility: 0.6836
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0142
Next Token :    , Posbility: 0.0142
Next Token :     , Posbility: 0.0437
Next Token :   , Posbility: 0.3223
Next Token :       , Posbility: 0.6016
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0043
Next Token : 
, Posbility: 0.0081
Next Token : |, Posbility: 0.0151
Next Token : end, Posbility: 0.0194
Next Token : else, Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0069
Next Token :  fail, Posbility: 0.0100
Next Token : 
, Posbility: 0.0654
Next Token :  search, Posbility: 0.2598
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else search
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else fail
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      else None
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0162
Next Token :  , Posbility: 0.0208
Next Token :  in, Posbility: 0.1973
Next Token : 

, Posbility: 0.2539
Next Token : 
, Posbility: 0.4746
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end


 score:True
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end in
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      end)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0020
Next Token :  [, Posbility: 0.0049
Next Token :  i, Posbility: 0.0070
Next Token :  , Posbility: 0.2334
Next Token : >, Posbility: 0.7188
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0079
Next Token :  String, Posbility: 0.0101
Next Token :  fun, Posbility: 0.2031
Next Token :  ignore, Posbility: 0.2031
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Fun, Posbility: 0.0371
Next Token : Tuple, Posbility: 0.0540
Next Token : Option, Posbility: 0.0894
Next Token : List, Posbility: 0.1885
Next Token : (, Posbility: 0.2139
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0184
Next Token : i, Posbility: 0.0269
Next Token : _, Posbility: 0.0305
Next Token : s, Posbility: 0.0569
Next Token : fun, Posbility: 0.6133
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0082
Next Token :  ((, Posbility: 0.0082
Next Token :  match, Posbility: 0.0093
Next Token :  i, Posbility: 0.0781
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0083
Next Token : _, Posbility: 0.0226
Next Token : x, Posbility: 0.0226
Next Token : s, Posbility: 0.4531
Next Token : (, Posbility: 0.4531
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0060
Next Token : a, Posbility: 0.0060
Next Token : i, Posbility: 0.0164
Next Token : _, Posbility: 0.0444
Next Token : s, Posbility: 0.8906
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0047
Next Token : 0,, Posbility: 0.0053
Next Token : 1,, Posbility: 0.0060
Next Token : ',, Posbility: 0.4238
Next Token : ,, Posbility: 0.5469
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0024
Next Token : i, Posbility: 0.0065
Next Token :  start, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  i, Posbility: 0.9570
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0015
Next Token : _, Posbility: 0.0019
Next Token : 0,, Posbility: 0.0051
Next Token : 1,, Posbility: 0.0178
Next Token : ,, Posbility: 0.9727
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : j, Posbility: 0.0005
Next Token :  k, Posbility: 0.0009
Next Token :  i, Posbility: 0.0009
Next Token :  l, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0003
Next Token : m, Posbility: 0.0003
Next Token : p, Posbility: 0.0003
Next Token : _, Posbility: 0.0067
Next Token : j, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ):, Posbility: 0.0007
Next Token : ),, Posbility: 0.0012
Next Token : 1), Posbility: 0.0019
Next Token : )), Posbility: 0.0032
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token :  k, Posbility: 0.0005
Next Token :  result, Posbility: 0.0005
Next Token :  when, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0114
Next Token :  match, Posbility: 0.0188
Next Token :  i, Posbility: 0.0240
Next Token : 
, Posbility: 0.1079
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0206
Next Token : j, Posbility: 0.0299
Next Token : if, Posbility: 0.0493
Next Token : s, Posbility: 0.0635
Next Token : (, Posbility: 0.7734
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0030
Next Token : Some, Posbility: 0.0049
Next Token : j, Posbility: 0.0072
Next Token : i, Posbility: 0.0284
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ';, Posbility: 0.0019
Next Token :  , Posbility: 0.0040
Next Token : ', Posbility: 0.0040
Next Token : ',, Posbility: 0.2178
Next Token : ,, Posbility: 0.7617
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0032
Next Token :  -1,, Posbility: 0.0053
Next Token :  0,, Posbility: 0.0237
Next Token :  , Posbility: 0.1748
Next Token :  i, Posbility: 0.7812
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +, Posbility: 0.0059
Next Token :  , Posbility: 0.0097
Next Token : +1,, Posbility: 0.0125
Next Token :  +, Posbility: 0.0918
Next Token : ,, Posbility: 0.8711
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0011
Next Token :  Some, Posbility: 0.0019
Next Token :  max, Posbility: 0.0019
Next Token :  i, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0065
Next Token : min, Posbility: 0.0065
Next Token : (, Posbility: 0.0065
Next Token : p, Posbility: 0.0065
Next Token : j, Posbility: 0.9688
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0249
Next Token : ));, Posbility: 0.0249
Next Token :  , Posbility: 0.0320
Next Token : ), Posbility: 0.0527
Next Token : )), Posbility: 0.8242
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
 score:False
Error type: noerr
---------------------------
Next Token :  else, Posbility: 0.0024
Next Token :  , Posbility: 0.0157
Next Token :  in, Posbility: 0.0201
Next Token : 

, Posbility: 0.0903
Next Token : 
, Posbility: 0.8594
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0052
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.0141
Next Token :       , Posbility: 0.2344
Next Token :   , Posbility: 0.7227
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 0.0021
Next Token : ;, Posbility: 0.0074
Next Token : in, Posbility: 0.0157
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0203
Next Token :  ', Posbility: 0.0203
Next Token :  [], Posbility: 0.0294
Next Token : >, Posbility: 0.0908
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0062
Next Token : (, Posbility: 0.0130
Next Token : x, Posbility: 0.0148
Next Token : p, Posbility: 0.0850
Next Token : _, Posbility: 0.8047
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0021
Next Token :  |, Posbility: 0.0023
Next Token :  as, Posbility: 0.0082
Next Token : ::, Posbility: 0.0253
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0003
Next Token : :, Posbility: 0.0008
Next Token : if, Posbility: 0.0068
Next Token : ::, Posbility: 0.3730
Next Token : ->, Posbility: 0.6172
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0267
Next Token :  search, Posbility: 0.1196
Next Token : 
, Posbility: 0.1196
Next Token :  fail, Posbility: 0.1196
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0184
Next Token : (0,, Posbility: 0.0305
Next Token : assert, Posbility: 0.1206
Next Token : raise, Posbility: 0.1992
Next Token : (, Posbility: 0.4766
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0026
Next Token : None, Posbility: 0.0034
Next Token : raise, Posbility: 0.0044
Next Token : (),, Posbility: 0.0195
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token : ., Posbility: 0.0013
Next Token : ',, Posbility: 0.0013
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0020
Next Token :  ?, Posbility: 0.0026
Next Token :  , Posbility: 0.0247
Next Token :  -1,, Posbility: 0.1416
Next Token :  0,, Posbility: 0.8164
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0025
Next Token :  0);, Posbility: 0.0067
Next Token :  -1), Posbility: 0.0110
Next Token :  0), Posbility: 0.3652
Next Token :  , Posbility: 0.6016
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : j, Posbility: 0.0008
Next Token : length, Posbility: 0.0009
Next Token : p, Posbility: 0.0015
Next Token : (, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0002
Next Token : len, Posbility: 0.0003
Next Token : index, Posbility: 0.0003
Next Token : Length, Posbility: 0.0003
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, s.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0009
Next Token :  +, Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token : );, Posbility: 0.0109
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, s.length)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0016
Next Token :   , Posbility: 0.0021
Next Token :  , Posbility: 0.0095
Next Token : 
, Posbility: 0.3145
Next Token : 

, Posbility: 0.6641
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p[0] then (s, i, j) else search_rec s p
      |> (fun (s, i, j) -> (s, i, j))
  | _ -> (s, 0, s.length)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :86.46281361579895

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>