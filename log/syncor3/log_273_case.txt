code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0190
Next Token :  un, Posbility: 0.0190
Next Token :  count, Posbility: 0.2051
Next Token :  , Posbility: 0.2324
Next Token :  rec, Posbility: 0.2988
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0168
Next Token :  is, Posbility: 0.0190
Next Token :  find, Posbility: 0.0315
Next Token :  , Posbility: 0.2324
Next Token :  count, Posbility: 0.4902
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0039
Next Token : -, Posbility: 0.0073
Next Token :  , Posbility: 0.0608
Next Token :  =, Posbility: 0.0608
Next Token : _, Posbility: 0.8398
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0376
Next Token : equal, Posbility: 0.0376
Next Token : unordered, Posbility: 0.0898
Next Token : un, Posbility: 0.1021
Next Token : pairs, Posbility: 0.4023
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0177
Next Token : (, Posbility: 0.0227
Next Token : _, Posbility: 0.1016
Next Token :  =, Posbility: 0.1680
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0444
Next Token : pairs, Posbility: 0.0830
Next Token : n, Posbility: 0.1206
Next Token : (, Posbility: 0.1992
Next Token : x, Posbility: 0.1992
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0036
Next Token :  i, Posbility: 0.0140
Next Token :  , Posbility: 0.1040
Next Token :  =, Posbility: 0.3203
Next Token : s, Posbility: 0.5273
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0045
Next Token :  acc, Posbility: 0.0075
Next Token :  i, Posbility: 0.0075
Next Token :  , Posbility: 0.0806
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0031
Next Token :  function, Posbility: 0.0067
Next Token :  match, Posbility: 0.0381
Next Token :  , Posbility: 0.0713
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0044
Next Token :    , Posbility: 0.0105
Next Token : 	, Posbility: 0.0105
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0059
Next Token : List, Posbility: 0.0181
Next Token : let, Posbility: 0.1514
Next Token : if, Posbility: 0.1943
Next Token : match, Posbility: 0.5977
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0010
Next Token :  [], Posbility: 0.0010
Next Token :  !, Posbility: 0.0013
Next Token :  String, Posbility: 0.0066
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0027
Next Token : (, Posbility: 0.0083
Next Token : Seq, Posbility: 0.0106
Next Token : List, Posbility: 0.1143
Next Token : x, Posbility: 0.8438
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  with, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  @, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0024
Next Token :  , Posbility: 0.0035
Next Token :  [, Posbility: 0.0050
Next Token :  [], Posbility: 0.0255
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0020
Next Token :     , Posbility: 0.0674
Next Token :   , Posbility: 0.9258
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0136
Next Token : [], Posbility: 0.0289
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0007
Next Token :  nil, Posbility: 0.0051
Next Token :  , Posbility: 0.0107
Next Token :  [, Posbility: 0.0138
Next Token :  [], Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0039
Next Token :    , Posbility: 0.0050
Next Token :  =>, Posbility: 0.0106
Next Token :  |, Posbility: 0.0106
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0004
Next Token : ::, Posbility: 0.0012
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0148
Next Token :  [], Posbility: 0.0148
Next Token :  , Posbility: 0.0400
Next Token :  1, Posbility: 0.1094
Next Token :  0, Posbility: 0.8047
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0019
Next Token :   , Posbility: 0.0035
Next Token :  , Posbility: 0.0107
Next Token :  |, Posbility: 0.0121
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0085
Next Token :  i, Posbility: 0.0096
Next Token :  [], Posbility: 0.0160
Next Token :  [, Posbility: 0.1709
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0170
Next Token : hd, Posbility: 0.0317
Next Token : h, Posbility: 0.0408
Next Token : _, Posbility: 0.1260
Next Token : x, Posbility: 0.7227
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0030
Next Token : :, Posbility: 0.0133
Next Token : s, Posbility: 0.0598
Next Token : ::, Posbility: 0.3438
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : :, Posbility: 0.0012
Next Token : ->, Posbility: 0.0036
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0015
Next Token :  l, Posbility: 0.0017
Next Token :  [], Posbility: 0.0111
Next Token :  rest, Posbility: 0.0933
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0107
Next Token : tail, Posbility: 0.0201
Next Token : y, Posbility: 0.0332
Next Token : _, Posbility: 0.0547
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : 1, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : ', Posbility: 0.0067
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0354
Next Token : 2, Posbility: 0.0354
Next Token : 1, Posbility: 0.0454
Next Token : ', Posbility: 0.1094
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : if, Posbility: 0.0013
Next Token : ::, Posbility: 0.0015
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0084
Next Token :  1, Posbility: 0.1689
Next Token :  , Posbility: 0.1689
Next Token :  count, Posbility: 0.1689
Next Token : 
, Posbility: 0.4570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0073
Next Token :   , Posbility: 0.0106
Next Token :      , Posbility: 0.0154
Next Token :       , Posbility: 0.4492
Next Token :     , Posbility: 0.5078
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0408
Next Token : count, Posbility: 0.0762
Next Token : match, Posbility: 0.0981
Next Token : if, Posbility: 0.1260
Next Token : let, Posbility: 0.5625
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0198
Next Token :  pair, Posbility: 0.0688
Next Token :  count, Posbility: 0.1006
Next Token :  rec, Posbility: 0.1289
Next Token :  , Posbility: 0.4512
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0261
Next Token : (, Posbility: 0.0554
Next Token : n, Posbility: 0.1035
Next Token : y, Posbility: 0.1934
Next Token : x, Posbility: 0.2812
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0613
Next Token : ,, Posbility: 0.1011
Next Token : _, Posbility: 0.1299
Next Token :  =, Posbility: 0.2139
Next Token : s, Posbility: 0.2139
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0571
Next Token : 2, Posbility: 0.1211
Next Token : _, Posbility: 0.1553
Next Token :  =, Posbility: 0.2559
Next Token : ', Posbility: 0.3281
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token : =, Posbility: 0.0010
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0077
Next Token :  remove, Posbility: 0.0112
Next Token :  [, Posbility: 0.0143
Next Token : 
, Posbility: 0.0269
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0079
Next Token : Seq, Posbility: 0.0089
Next Token : Array, Posbility: 0.0659
Next Token : List, Posbility: 0.3789
Next Token : x, Posbility: 0.4863
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0004
Next Token :  +, Posbility: 0.0006
Next Token : ::, Posbility: 0.0007
Next Token :  , Posbility: 0.0203
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >>, Posbility: 0.0090
Next Token : 
, Posbility: 0.0190
Next Token :  |, Posbility: 0.0244
Next Token :  , Posbility: 0.1099
Next Token :  in, Posbility: 0.8086
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0015
Next Token :   , Posbility: 0.0019
Next Token :  count, Posbility: 0.0024
Next Token :  , Posbility: 0.0201
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token :       , Posbility: 0.0052
Next Token :    , Posbility: 0.0123
Next Token :     , Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0747
Next Token : if, Posbility: 0.1084
Next Token : match, Posbility: 0.1230
Next Token : count, Posbility: 0.1582
Next Token : let, Posbility: 0.4297
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0101
Next Token :  pair, Posbility: 0.0312
Next Token :  rec, Posbility: 0.0664
Next Token :  count, Posbility: 0.0850
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0222
Next Token : pairs, Posbility: 0.0253
Next Token : n, Posbility: 0.0684
Next Token : y, Posbility: 0.1641
Next Token : x, Posbility: 0.5078
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0254
Next Token : _, Posbility: 0.0417
Next Token : ', Posbility: 0.1875
Next Token : s, Posbility: 0.2402
Next Token :  =, Posbility: 0.3965
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0023
Next Token :  First, Posbility: 0.0039
Next Token :  1, Posbility: 0.0063
Next Token :  first, Posbility: 0.0284
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0043
Next Token : Head, Posbility: 0.0056
Next Token : head, Posbility: 0.0598
Next Token : List, Posbility: 0.0679
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0046
Next Token :  , Posbility: 0.0076
Next Token : ', Posbility: 0.0815
Next Token :  in, Posbility: 0.4141
Next Token : s, Posbility: 0.4688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0048
Next Token : ';, Posbility: 0.0062
Next Token : [0];, Posbility: 0.0079
Next Token : [0], Posbility: 0.0457
Next Token : ', Posbility: 0.9180
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0154
Next Token : ., Posbility: 0.0420
Next Token : [0];, Posbility: 0.0540
Next Token :  in, Posbility: 0.0693
Next Token : [0], Posbility: 0.7461
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0008
Next Token : 

, Posbility: 0.0028
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0012
Next Token :       , Posbility: 0.0022
Next Token :    , Posbility: 0.0067
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0260
Next Token : if, Posbility: 0.0708
Next Token : count, Posbility: 0.0801
Next Token : match, Posbility: 0.0908
Next Token : let, Posbility: 0.6719
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  next, Posbility: 0.0074
Next Token :  rest, Posbility: 0.0123
Next Token :  count, Posbility: 0.0178
Next Token :  rec, Posbility: 0.0203
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0038
Next Token : remaining, Posbility: 0.0038
Next Token : n, Posbility: 0.0071
Next Token : y, Posbility: 0.1118
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0035
Next Token : _, Posbility: 0.0095
Next Token :  =, Posbility: 0.0095
Next Token : ', Posbility: 0.1152
Next Token : s, Posbility: 0.8516
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0239
Next Token : 2, Posbility: 0.0308
Next Token : 1, Posbility: 0.0308
Next Token :  =, Posbility: 0.1074
Next Token : ', Posbility: 0.7930
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 0.0013
Next Token : ', Posbility: 0.3184
Next Token :  =, Posbility: 0.6758
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token :  remove, Posbility: 0.0007
Next Token :  array, Posbility: 0.0019
Next Token :  drop, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Arrays, Posbility: 0.0004
Next Token : (, Posbility: 0.0021
Next Token : List, Posbility: 0.0195
Next Token : Array, Posbility: 0.0322
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token : ',, Posbility: 0.0007
Next Token : [1:], Posbility: 0.0008
Next Token : ';, Posbility: 0.0012
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0610
Next Token : @, Posbility: 0.0610
Next Token : [, Posbility: 0.1143
Next Token : [1:], Posbility: 0.2129
Next Token :  in, Posbility: 0.3516
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  count, Posbility: 0.0008
Next Token : 

, Posbility: 0.0036
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0003
Next Token :   , Posbility: 0.0008
Next Token :       , Posbility: 0.0012
Next Token :    , Posbility: 0.0076
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0228
Next Token : count, Posbility: 0.0903
Next Token : if, Posbility: 0.1162
Next Token : match, Posbility: 0.1318
Next Token : let, Posbility: 0.5898
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0082
Next Token :  pair, Posbility: 0.0135
Next Token :  count, Posbility: 0.0197
Next Token :  rec, Posbility: 0.0366
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0057
Next Token : (, Posbility: 0.0074
Next Token : f, Posbility: 0.0074
Next Token : y, Posbility: 0.4023
Next Token : x, Posbility: 0.5156
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0095
Next Token : 2, Posbility: 0.0095
Next Token : s, Posbility: 0.3145
Next Token :  =, Posbility: 0.3145
Next Token : ', Posbility: 0.3145
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0006
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.0015
Next Token : ', Posbility: 0.0017
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  match, Posbility: 0.0015
Next Token :  first, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0009
Next Token : (, Posbility: 0.0024
Next Token : head, Posbility: 0.0040
Next Token : List, Posbility: 0.0109
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 0.0005
Next Token : ', Posbility: 0.0063
Next Token :  in, Posbility: 0.0596
Next Token : s, Posbility: 0.9297
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0006
Next Token : [, Posbility: 0.0013
Next Token : [1], Posbility: 0.0016
Next Token : [0], Posbility: 0.0371
Next Token : ', Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0027
Next Token :  in, Posbility: 0.0027
Next Token : [, Posbility: 0.0156
Next Token : [1], Posbility: 0.1157
Next Token : [0], Posbility: 0.8555
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  match, Posbility: 0.0005
Next Token :  , Posbility: 0.0032
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :   , Posbility: 0.0015
Next Token :       , Posbility: 0.0025
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0347
Next Token : count, Posbility: 0.1069
Next Token : match, Posbility: 0.1553
Next Token : if, Posbility: 0.2559
Next Token : let, Posbility: 0.3730
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0114
Next Token :  pair, Posbility: 0.0114
Next Token :  count, Posbility: 0.0273
Next Token :  rec, Posbility: 0.0510
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0045
Next Token : f, Posbility: 0.0051
Next Token : n, Posbility: 0.0123
Next Token : y, Posbility: 0.0483
Next Token : x, Posbility: 0.8594
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.0037
Next Token :  =, Posbility: 0.0447
Next Token : ', Posbility: 0.0447
Next Token : s, Posbility: 0.8945
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0078
Next Token : 2, Posbility: 0.0078
Next Token : 1, Posbility: 0.0078
Next Token :  =, Posbility: 0.0732
Next Token : ', Posbility: 0.8945
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 0.0005
Next Token :  in, Posbility: 0.0005
Next Token : ', Posbility: 0.1816
Next Token :  =, Posbility: 0.8125
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  remove, Posbility: 0.0008
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0010
Next Token :  drop, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0005
Next Token : (, Posbility: 0.0024
Next Token : Array, Posbility: 0.0031
Next Token : List, Posbility: 0.0096
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:], Posbility: 0.0001
Next Token : ',, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0003
Next Token : ., Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : [1:], Posbility: 0.0005
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  count, Posbility: 0.0017
Next Token : 

, Posbility: 0.0022
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token :       , Posbility: 0.0017
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0277
Next Token : count, Posbility: 0.0854
Next Token : match, Posbility: 0.1240
Next Token : if, Posbility: 0.1592
Next Token : let, Posbility: 0.5586
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0077
Next Token :  pair, Posbility: 0.0126
Next Token :  count, Posbility: 0.0184
Next Token :  rec, Posbility: 0.0184
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0042
Next Token : (, Posbility: 0.0054
Next Token : f, Posbility: 0.0061
Next Token : y, Posbility: 0.1396
Next Token : x, Posbility: 0.8047
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0053
Next Token : 2, Posbility: 0.0068
Next Token : s, Posbility: 0.1069
Next Token : ', Posbility: 0.3730
Next Token :  =, Posbility: 0.4805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  match, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0004
Next Token : if, Posbility: 0.0008
Next Token : (, Posbility: 0.0013
Next Token : List, Posbility: 0.0013
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 0.0004
Next Token :  in, Posbility: 0.0019
Next Token : ', Posbility: 0.0371
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0004
Next Token : [1], Posbility: 0.0008
Next Token : [, Posbility: 0.0015
Next Token : [0], Posbility: 0.0067
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0010
Next Token :  in, Posbility: 0.0031
Next Token : [, Posbility: 0.0039
Next Token : [1], Posbility: 0.0291
Next Token : [0], Posbility: 0.9609
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  and, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0008
Next Token :  match, Posbility: 0.0012
Next Token : 

, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :   , Posbility: 0.0013
Next Token :       , Posbility: 0.0028
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0216
Next Token : count, Posbility: 0.0403
Next Token : match, Posbility: 0.0854
Next Token : if, Posbility: 0.0967
Next Token : let, Posbility: 0.7148
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  equal, Posbility: 0.0016
Next Token :  pair, Posbility: 0.0024
Next Token :  count, Posbility: 0.0065
Next Token :  rec, Posbility: 0.0073
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0024
Next Token : n, Posbility: 0.0024
Next Token : pairs, Posbility: 0.0024
Next Token : y, Posbility: 0.0137
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 0.0271
Next Token : ', Posbility: 0.0737
Next Token : s, Posbility: 0.8945
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : _, Posbility: 0.0010
Next Token : 1, Posbility: 0.0011
Next Token :  =, Posbility: 0.0371
Next Token : ', Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ', Posbility: 0.0052
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  remove, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : Array, Posbility: 0.0002
Next Token : (, Posbility: 0.0015
Next Token : List, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [1:], Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  count, Posbility: 0.0004
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0013
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :       , Posbility: 0.0009
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0221
Next Token : count, Posbility: 0.0469
Next Token : match, Posbility: 0.0771
Next Token : if, Posbility: 0.0874
Next Token : let, Posbility: 0.7305
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0021
Next Token :  pair, Posbility: 0.0039
Next Token :  rec, Posbility: 0.0045
Next Token :  count, Posbility: 0.0051
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0014
Next Token : f, Posbility: 0.0023
Next Token : (, Posbility: 0.0030
Next Token : y, Posbility: 0.0466
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0011
Next Token : 1, Posbility: 0.0018
Next Token : s, Posbility: 0.0049
Next Token :  =, Posbility: 0.2656
Next Token : ', Posbility: 0.7188
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  first, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0009
Next Token :  in, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : [0], Posbility: 0.0010
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0001
Next Token : [, Posbility: 0.0004
Next Token : [1], Posbility: 0.0009
Next Token :  in, Posbility: 0.0013
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0009
Next Token :   , Posbility: 0.0017
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0371
Next Token : match, Posbility: 0.1011
Next Token : count, Posbility: 0.1011
Next Token : if, Posbility: 0.1670
Next Token : let, Posbility: 0.5156
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0047
Next Token :  pair, Posbility: 0.0078
Next Token :  count, Posbility: 0.0128
Next Token :  rec, Posbility: 0.0393
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0034
Next Token : (, Posbility: 0.0039
Next Token : n, Posbility: 0.0044
Next Token : y, Posbility: 0.0093
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token :  in, Posbility: 0.0006
Next Token : ', Posbility: 0.0129
Next Token :  =, Posbility: 0.0747
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0009
Next Token : _, Posbility: 0.0018
Next Token : 1, Posbility: 0.0023
Next Token :  =, Posbility: 0.0752
Next Token : ', Posbility: 0.9141
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0004
Next Token : ', Posbility: 0.0085
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0007
Next Token : 
, Posbility: 0.0019
Next Token :  [], Posbility: 0.0040
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Rest, Posbility: 0.0002
Next Token : tail, Posbility: 0.0003
Next Token : (, Posbility: 0.0031
Next Token : List, Posbility: 0.0041
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  count, Posbility: 0.0005
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :       , Posbility: 0.0009
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0245
Next Token : if, Posbility: 0.0664
Next Token : count, Posbility: 0.0757
Next Token : match, Posbility: 0.0757
Next Token : let, Posbility: 0.7148
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0017
Next Token :  pair, Posbility: 0.0035
Next Token :  count, Posbility: 0.0040
Next Token :  rec, Posbility: 0.0051
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0015
Next Token : f, Posbility: 0.0019
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0139
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : 1, Posbility: 0.0005
Next Token : s, Posbility: 0.0103
Next Token : ', Posbility: 0.0591
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [-1], Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0002
Next Token : [0], Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [-1], Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : [, Posbility: 0.0003
Next Token : [1], Posbility: 0.0004
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token :  ..., Posbility: 0.0005
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 0.0006
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0113
Next Token : count, Posbility: 0.0145
Next Token : if, Posbility: 0.0239
Next Token : match, Posbility: 0.0308
Next Token : let, Posbility: 0.8984
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0004
Next Token :  pair, Posbility: 0.0008
Next Token :  count, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0007
Next Token : n, Posbility: 0.0007
Next Token : pairs, Posbility: 0.0009
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : ', Posbility: 0.0108
Next Token :  =, Posbility: 0.0178
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 1, Posbility: 0.0004
Next Token :  =, Posbility: 0.0229
Next Token : ', Posbility: 0.9766
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  filter, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  [], Posbility: 0.0009
Next Token :  [, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : Rest, Posbility: 0.0000
Next Token : List, Posbility: 0.0006
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0036
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0144
Next Token : count, Posbility: 0.0210
Next Token : if, Posbility: 0.0269
Next Token : match, Posbility: 0.0269
Next Token : let, Posbility: 0.8906
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  pair, Posbility: 0.0009
Next Token :  count, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : f, Posbility: 0.0004
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0052
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token : s, Posbility: 0.0013
Next Token :  =, Posbility: 0.1187
Next Token : ', Posbility: 0.8750
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  in, Posbility: 0.0013
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [1], Posbility: 0.0001
Next Token :  in, Posbility: 0.0005
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0266
Next Token : count, Posbility: 0.0498
Next Token : if, Posbility: 0.0498
Next Token : match, Posbility: 0.0498
Next Token : let, Posbility: 0.7773
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0011
Next Token :  pair, Posbility: 0.0024
Next Token :  count, Posbility: 0.0040
Next Token :  rec, Posbility: 0.0122
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : pairs, Posbility: 0.0015
Next Token : n, Posbility: 0.0017
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0031
Next Token :  =, Posbility: 0.0292
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : 1, Posbility: 0.0007
Next Token :  =, Posbility: 0.0330
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token :  [], Posbility: 0.0025
Next Token :  [, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0001
Next Token : tail, Posbility: 0.0001
Next Token : List, Posbility: 0.0010
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token : 

, Posbility: 0.0009
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0182
Next Token : if, Posbility: 0.0182
Next Token : match, Posbility: 0.0265
Next Token : count, Posbility: 0.0300
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0008
Next Token :  pair, Posbility: 0.0013
Next Token :  count, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0005
Next Token : _, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : s, Posbility: 0.0024
Next Token : ', Posbility: 0.0229
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [-1], Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0092
Next Token : if, Posbility: 0.0092
Next Token : count, Posbility: 0.0104
Next Token : match, Posbility: 0.0172
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0002
Next Token :  pair, Posbility: 0.0005
Next Token :  count, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 0.0006
Next Token : pairs, Posbility: 0.0006
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0045
Next Token :  =, Posbility: 0.0109
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0159
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0008
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0028
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0093
Next Token : if, Posbility: 0.0093
Next Token : count, Posbility: 0.0093
Next Token : match, Posbility: 0.0135
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  pair, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token :  count, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : s, Posbility: 0.0009
Next Token :  =, Posbility: 0.0474
Next Token : ', Posbility: 0.9492
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [1], Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0162
Next Token : (, Posbility: 0.0183
Next Token : match, Posbility: 0.0236
Next Token : count, Posbility: 0.0267
Next Token : let, Posbility: 0.8867
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0006
Next Token :  pair, Posbility: 0.0013
Next Token :  count, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0008
Next Token : (, Posbility: 0.0009
Next Token : n, Posbility: 0.0009
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0015
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0179
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  [], Posbility: 0.0017
Next Token :  [, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0081
Next Token : (, Posbility: 0.0118
Next Token : match, Posbility: 0.0134
Next Token : count, Posbility: 0.0151
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  pair, Posbility: 0.0004
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0009
Next Token : ', Posbility: 0.0140
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0035
Next Token : count, Posbility: 0.0051
Next Token : (, Posbility: 0.0065
Next Token : match, Posbility: 0.0084
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  pair, Posbility: 0.0003
Next Token :  count, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : pairs, Posbility: 0.0004
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0019
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0076
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0005
Next Token :  [, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0045
Next Token : count, Posbility: 0.0058
Next Token : match, Posbility: 0.0065
Next Token : (, Posbility: 0.0074
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0005
Next Token :  =, Posbility: 0.0293
Next Token : ', Posbility: 0.9688
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0063
Next Token : match, Posbility: 0.0104
Next Token : (, Posbility: 0.0134
Next Token : count, Posbility: 0.0134
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0004
Next Token :  pair, Posbility: 0.0006
Next Token :  count, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : n, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0010
Next Token :  =, Posbility: 0.0159
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0125
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0009
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0050
Next Token : match, Posbility: 0.0083
Next Token : (, Posbility: 0.0094
Next Token : count, Posbility: 0.0094
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  pair, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0007
Next Token : ', Posbility: 0.0067
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : [-1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : count, Posbility: 0.0035
Next Token : (, Posbility: 0.0058
Next Token : match, Posbility: 0.0058
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0002
Next Token :  count, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : pairs, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0015
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0059
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : count, Posbility: 0.0031
Next Token : match, Posbility: 0.0040
Next Token : (, Posbility: 0.0051
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 0.0125
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0031
Next Token : match, Posbility: 0.0083
Next Token : count, Posbility: 0.0094
Next Token : (, Posbility: 0.0120
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0002
Next Token :  pair, Posbility: 0.0003
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0008
Next Token :  =, Posbility: 0.0124
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0059
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0006
Next Token :  [], Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0035
Next Token : match, Posbility: 0.0040
Next Token : count, Posbility: 0.0058
Next Token : (, Posbility: 0.0066
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0004
Next Token : ', Posbility: 0.0041
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0012
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0015
Next Token : count, Posbility: 0.0017
Next Token : match, Posbility: 0.0028
Next Token : (, Posbility: 0.0036
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  count, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : pairs, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0015
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0041
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0017
Next Token : count, Posbility: 0.0017
Next Token : match, Posbility: 0.0022
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0085
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : count, Posbility: 0.0045
Next Token : match, Posbility: 0.0051
Next Token : (, Posbility: 0.0084
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0002
Next Token :  count, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : pairs, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : n, Posbility: 0.0004
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0032
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0024
Next Token : x, Posbility: 0.0031
Next Token : count, Posbility: 0.0035
Next Token : (, Posbility: 0.0058
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0004
Next Token : ', Posbility: 0.0032
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0012
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : match, Posbility: 0.0017
Next Token : count, Posbility: 0.0017
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  count, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0010
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0028
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0010
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0009
Next Token : match, Posbility: 0.0012
Next Token : x, Posbility: 0.0015
Next Token : (, Posbility: 0.0025
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  pair, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0046
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0015
Next Token : count, Posbility: 0.0027
Next Token : match, Posbility: 0.0031
Next Token : (, Posbility: 0.0075
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0025
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0013
Next Token : count, Posbility: 0.0024
Next Token : x, Posbility: 0.0028
Next Token : (, Posbility: 0.0046
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : ', Posbility: 0.0012
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : [', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : count, Posbility: 0.0012
Next Token : match, Posbility: 0.0013
Next Token : (, Posbility: 0.0032
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0000
Next Token :  pair, Posbility: 0.0000
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0009
Next Token :  =, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0022
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0010
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0009
Next Token : x, Posbility: 0.0010
Next Token : count, Posbility: 0.0010
Next Token : (, Posbility: 0.0025
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0059
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : match, Posbility: 0.0019
Next Token : count, Posbility: 0.0022
Next Token : (, Posbility: 0.0046
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0017
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0008
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0010
Next Token : count, Posbility: 0.0015
Next Token : x, Posbility: 0.0022
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : ', Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : [', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: noerr
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : match, Posbility: 0.0015
Next Token : count, Posbility: 0.0015
Next Token : (, Posbility: 0.0036
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  acc, Posbility: 0.0000
Next Token :  pair, Posbility: 0.0001
Next Token :  count, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0007
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0006
Next Token : count, Posbility: 0.0009
Next Token : x, Posbility: 0.0012
Next Token : (, Posbility: 0.0022
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0046
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x'
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0]
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0012
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0012
Next Token : count, Posbility: 0.0017
Next Token : match, Posbility: 0.0022
Next Token : (, Posbility: 0.0046
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  acc, Posbility: 0.0001
Next Token :  pair, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0010
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0009
Next Token : count, Posbility: 0.0010
Next Token : x, Posbility: 0.0019
Next Token : (, Posbility: 0.0028
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = x
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : [', Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'
 score:False
Error type: noerr
---------------------------
Next Token : [0];, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : [1], Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0]
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0013
Next Token : count, Posbility: 0.0013
Next Token : match, Posbility: 0.0013
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  result, Posbility: 0.0000
Next Token :  pair, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : pairs, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0007
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : Seq, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :    , Posbility: 0.0006
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    
 score:False
Error type: noerr
---------------------------
Next Token : count, Posbility: 0.0006
Next Token : match, Posbility: 0.0006
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.0019
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. *)
let rec count_pairs xs =
  match xs with
  | [] -> 0
  | x :: xs ->
    let xs' = xs in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let x' = xs'[0] in
    let xs' = xs' in
    let x = xs'[0] in
    let xs' = xs' in
    let
 score:False
Error type: noerr
---------------------------


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>