code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0664
Next Token :  words, Posbility: 0.1099
Next Token :  find, Posbility: 0.1406
Next Token :  rec, Posbility: 0.1807
Next Token :  , Posbility: 0.1807
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : split, Posbility: 0.0452
Next Token : f, Posbility: 0.0654
Next Token : min, Posbility: 0.0742
Next Token : longest, Posbility: 0.0952
Next Token : length, Posbility: 0.1787
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0520
Next Token :  , Posbility: 0.0588
Next Token :  =, Posbility: 0.0859
Next Token : 4, Posbility: 0.0859
Next Token : _, Posbility: 0.6328
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0610
Next Token : of, Posbility: 0.0693
Next Token : is, Posbility: 0.1006
Next Token : 4, Posbility: 0.1143
Next Token : four, Posbility: 0.2139
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0195
Next Token : s, Posbility: 0.0195
Next Token :  , Posbility: 0.2373
Next Token : _, Posbility: 0.2373
Next Token :  =, Posbility: 0.3926
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0488
Next Token :  fun, Posbility: 0.0488
Next Token : 
, Posbility: 0.1699
Next Token :  , Posbility: 0.2812
Next Token :  function, Posbility: 0.3594
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0206
Next Token :  string, Posbility: 0.0206
Next Token :  String, Posbility: 0.0299
Next Token :  , Posbility: 0.2500
Next Token : 
, Posbility: 0.6016
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0094
Next Token : 	, Posbility: 0.0136
Next Token : |, Posbility: 0.0610
Next Token :     , Posbility: 0.1289
Next Token :   , Posbility: 0.7461
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0011
Next Token : s, Posbility: 0.0017
Next Token : let, Posbility: 0.0040
Next Token : (, Posbility: 0.0051
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0286
Next Token :  ", Posbility: 0.0471
Next Token :  String, Posbility: 0.0471
Next Token :  [], Posbility: 0.3477
Next Token :  , Posbility: 0.3477
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0571
Next Token : Char, Posbility: 0.0571
Next Token : s, Posbility: 0.1211
Next Token : x, Posbility: 0.1553
Next Token : _, Posbility: 0.1758
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0148
Next Token : ::, Posbility: 0.0167
Next Token :  |, Posbility: 0.0167
Next Token :  when, Posbility: 0.0664
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0011
Next Token : if, Posbility: 0.0084
Next Token : :, Posbility: 0.0203
Next Token : ::, Posbility: 0.1030
Next Token : ->, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0337
Next Token :  0, Posbility: 0.0337
Next Token :  None, Posbility: 0.0337
Next Token :  , Posbility: 0.0913
Next Token :  false, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0010
Next Token : 

, Posbility: 0.0011
Next Token :   , Posbility: 0.0021
Next Token :  , Posbility: 0.0096
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : |, Posbility: 0.0003
Next Token : end, Posbility: 0.0005
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : ;, Posbility: 0.0004
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "", Posbility: 0.0273
Next Token :  [, Posbility: 0.0452
Next Token :  [], Posbility: 0.0747
Next Token :  ", Posbility: 0.1226
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0410
Next Token : Word, Posbility: 0.0596
Next Token : _, Posbility: 0.1260
Next Token : x, Posbility: 0.1621
Next Token : s, Posbility: 0.2354
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0053
Next Token : :, Posbility: 0.0060
Next Token : ::, Posbility: 0.0068
Next Token :  when, Posbility: 0.0393
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : :, Posbility: 0.0013
Next Token : if, Posbility: 0.0153
Next Token : ::, Posbility: 0.0366
Next Token : ->, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0106
Next Token : 
, Posbility: 0.0781
Next Token :  string, Posbility: 0.0781
Next Token :  String, Posbility: 0.2119
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Length, Posbility: 0.0349
Next Token : (, Posbility: 0.0505
Next Token : List, Posbility: 0.0649
Next Token : length, Posbility: 0.0649
Next Token : s, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s
 score:False
Error type: noerr
---------------------------
Next Token :  @, Posbility: 0.0064
Next Token :  , Posbility: 0.0471
Next Token :  =, Posbility: 0.0605
Next Token :  |, Posbility: 0.1279
Next Token : ., Posbility: 0.7383
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0048
Next Token : (, Posbility: 0.0070
Next Token : Count, Posbility: 0.0090
Next Token : length, Posbility: 0.0245
Next Token : Length, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0117
Next Token :  ==, Posbility: 0.0117
Next Token :  =, Posbility: 0.0859
Next Token :  , Posbility: 0.2344
Next Token :  >=, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  4), Posbility: 0.0003
Next Token : 4, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token :  4, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 4)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >=, Posbility: 0.0005
Next Token : -, Posbility: 0.0020
Next Token : ≥, Posbility: 0.0020
Next Token : <, Posbility: 0.0674
Next Token : >, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0008
Next Token : =, Posbility: 0.0008
Next Token :  0, Posbility: 0.0059
Next Token :  , Posbility: 0.1182
Next Token :  4, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length > 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length > 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length > 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  4), Posbility: 0.0003
Next Token : 4, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token :  4, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >= 4)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >=  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length >4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : 4, Posbility: 0.0022
Next Token :  , Posbility: 0.0270
Next Token : >, Posbility: 0.0732
Next Token :  4, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length < 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.0171
Next Token :  0, Posbility: 0.0464
Next Token :  4, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <> 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <> 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <> 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <>4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length < 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length <  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4), Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token : 4, Posbility: 0.0022
Next Token :  , Posbility: 0.0097
Next Token :  4, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥ 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥ 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ≥ 4)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0425
Next Token :  String, Posbility: 0.0544
Next Token :  4, Posbility: 0.1895
Next Token :  , Posbility: 0.3125
Next Token :  1, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length - 1
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length - 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length - 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length - String
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length - string
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0007
Next Token : 4, Posbility: 0.0054
Next Token :  , Posbility: 0.0089
Next Token :   , Posbility: 0.1797
Next Token :  4, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >= 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >=  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >= 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >=4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length  >=   
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token : 4, Posbility: 0.0009
Next Token :  , Posbility: 0.0067
Next Token :  4, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length = 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length = 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length =4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length = 0
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length =  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  4), Posbility: 0.0002
Next Token : 4, Posbility: 0.0005
Next Token :  , Posbility: 0.0067
Next Token :  4, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length == 4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length == 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ==4
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length == 4)
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length ==  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.Length()
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length
 score:False
Error type: noerr
---------------------------
Next Token :  ===, Posbility: 0.0050
Next Token :  ==, Posbility: 0.0371
Next Token :  , Posbility: 0.1006
Next Token :  =, Posbility: 0.1006
Next Token :  >=, Posbility: 0.7422
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  4), Posbility: 0.0003
Next Token : 4, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token :  4, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0047
Next Token :  , Posbility: 0.0078
Next Token :  in, Posbility: 0.0089
Next Token : 

, Posbility: 0.4824
Next Token : 
, Posbility: 0.4824
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0649
Next Token : |, Posbility: 0.0649
Next Token : let, Posbility: 0.0732
Next Token : in, Posbility: 0.2734
Next Token : end, Posbility: 0.2910
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0071
Next Token : ;, Posbility: 0.1118
Next Token : 
, Posbility: 0.2363
Next Token : 

, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end


 score:True
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end;
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
end  
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0008
Next Token :  list, Posbility: 0.0017
Next Token :  , Posbility: 0.0562
Next Token : 

, Posbility: 0.1523
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0167
Next Token : open, Posbility: 0.0294
Next Token : (, Posbility: 0.0457
Next Token :   , Posbility: 0.0515
Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0430
Next Token :  find, Posbility: 0.0913
Next Token :  words, Posbility: 0.1172
Next Token :  , Posbility: 0.1934
Next Token :  rec, Posbility: 0.2480
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0471
Next Token :  search, Posbility: 0.0471
Next Token :  loop, Posbility: 0.0471
Next Token :  find, Posbility: 0.2109
Next Token :  , Posbility: 0.2715
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0237
Next Token : f, Posbility: 0.0344
Next Token : split, Posbility: 0.0344
Next Token : helper, Posbility: 0.1543
Next Token : length, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0039
Next Token : 4, Posbility: 0.0082
Next Token : _4_, Posbility: 0.0093
Next Token : s, Posbility: 0.0175
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0026
Next Token : one, Posbility: 0.0026
Next Token : rec, Posbility: 0.0038
Next Token : three, Posbility: 0.0038
Next Token : four, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0087
Next Token : 2, Posbility: 0.0087
Next Token : s, Posbility: 0.0388
Next Token :  , Posbility: 0.1055
Next Token : _, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0204
Next Token : iter, Posbility: 0.0491
Next Token : aux, Posbility: 0.1035
Next Token : helper, Posbility: 0.2490
Next Token : rec, Posbility: 0.3203
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0076
Next Token :  [], Posbility: 0.0097
Next Token : urse, Posbility: 0.0815
Next Token :  =, Posbility: 0.1045
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0128
Next Token : st, Posbility: 0.0128
Next Token : x, Posbility: 0.0393
Next Token : (, Posbility: 0.0444
Next Token : s, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pos, Posbility: 0.0168
Next Token :  acc, Posbility: 0.0356
Next Token :  i, Posbility: 0.0405
Next Token :  , Posbility: 0.0972
Next Token :  =, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0015
Next Token :  function, Posbility: 0.0143
Next Token :  match, Posbility: 0.0267
Next Token :  , Posbility: 0.0645
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0008
Next Token : let, Posbility: 0.0024
Next Token :    , Posbility: 0.0027
Next Token :     , Posbility: 0.0139
Next Token :   , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0167
Next Token : try, Posbility: 0.0190
Next Token : let, Posbility: 0.1240
Next Token : match, Posbility: 0.3379
Next Token : if, Posbility: 0.4336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0037
Next Token :  !, Posbility: 0.0129
Next Token :  String, Posbility: 0.0166
Next Token :  not, Posbility: 0.0452
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0007
Next Token : Length, Posbility: 0.0007
Next Token : (, Posbility: 0.0131
Next Token : s, Posbility: 0.2637
Next Token : length, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  four, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zero, Posbility: 0.0001
Next Token : three, Posbility: 0.0001
Next Token : one, Posbility: 0.0003
Next Token : two, Posbility: 0.0003
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0024
Next Token : (, Posbility: 0.0024
Next Token : _, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : @@, Posbility: 0.0001
Next Token : (, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token :  ||, Posbility: 0.0031
Next Token : 
, Posbility: 0.0084
Next Token :  =, Posbility: 0.0108
Next Token :  then, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0225
Next Token :  true, Posbility: 0.0693
Next Token :  Some, Posbility: 0.1660
Next Token : 
, Posbility: 0.2734
Next Token :  , Posbility: 0.4512
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0157
Next Token : List, Posbility: 0.0157
Next Token : (, Posbility: 0.0427
Next Token : return, Posbility: 0.1025
Next Token : s, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0096
Next Token :  , Posbility: 0.0337
Next Token :  |, Posbility: 0.0381
Next Token :  else, Posbility: 0.3633
Next Token : 
, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0002
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ||, Posbility: 0.0002
Next Token : with, Posbility: 0.0003
Next Token : elif, Posbility: 0.0005
Next Token : |, Posbility: 0.1064
Next Token : else, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0047
Next Token :  for, Posbility: 0.0112
Next Token :  match, Posbility: 0.0143
Next Token : 
, Posbility: 0.1748
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0383
Next Token : s, Posbility: 0.0559
Next Token : if, Posbility: 0.0635
Next Token : List, Posbility: 0.0718
Next Token : length, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : one, Posbility: 0.0001
Next Token : two, Posbility: 0.0001
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0008
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : next, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : rest, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0016
Next Token :  ((, Posbility: 0.0083
Next Token : (, Posbility: 0.0094
Next Token : 
, Posbility: 0.0121
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : substring, Posbility: 0.0009
Next Token : tail, Posbility: 0.0011
Next Token : List, Posbility: 0.0034
Next Token : s, Posbility: 0.0366
Next Token : (, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : next, Posbility: 0.0201
Next Token : remove, Posbility: 0.0293
Next Token : List, Posbility: 0.1318
Next Token : String, Posbility: 0.2451
Next Token : s, Posbility: 0.3574
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ++, Posbility: 0.0200
Next Token : :, Posbility: 0.0330
Next Token :  +, Posbility: 0.0425
Next Token : ., Posbility: 0.2158
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @@, Posbility: 0.0048
Next Token : ^, Posbility: 0.0089
Next Token : -, Posbility: 0.0189
Next Token : :, Posbility: 0.3340
Next Token : ::, Posbility: 0.6250
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : !, Posbility: 0.0220
Next Token :  string, Posbility: 0.0220
Next Token :  !, Posbility: 0.0525
Next Token :  String, Posbility: 0.0674
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0344
Next Token : (, Posbility: 0.0344
Next Token : List, Posbility: 0.0503
Next Token : []), Posbility: 0.1543
Next Token : s, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : '), Posbility: 0.0064
Next Token :  , Posbility: 0.0093
Next Token : );, Posbility: 0.0119
Next Token : ., Posbility: 0.0996
Next Token : ), Posbility: 0.8320
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0028
Next Token :  , Posbility: 0.0077
Next Token : 

, Posbility: 0.0825
Next Token :  in, Posbility: 0.1982
Next Token : 
, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0020
Next Token :  in, Posbility: 0.0024
Next Token : val, Posbility: 0.0043
Next Token : let, Posbility: 0.1416
Next Token : in, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : ;, Posbility: 0.0003
Next Token :  , Posbility: 0.0137
Next Token : 

, Posbility: 0.0226
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0093
Next Token : list, Posbility: 0.0197
Next Token : (, Posbility: 0.0417
Next Token : length, Posbility: 0.1001
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0371
Next Token :  find, Posbility: 0.0693
Next Token :  words, Posbility: 0.1465
Next Token :  , Posbility: 0.2412
Next Token :  rec, Posbility: 0.3105
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0317
Next Token :  count, Posbility: 0.0461
Next Token :  words, Posbility: 0.0762
Next Token :  find, Posbility: 0.1426
Next Token :  , Posbility: 0.3867
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0110
Next Token : helper, Posbility: 0.0110
Next Token : split, Posbility: 0.0141
Next Token : print, Posbility: 0.0181
Next Token : length, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _4_, Posbility: 0.0007
Next Token : s, Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0009
Next Token : one, Posbility: 0.0012
Next Token : three, Posbility: 0.0015
Next Token : two, Posbility: 0.0019
Next Token : four, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0025
Next Token :  =, Posbility: 0.0048
Next Token : s, Posbility: 0.0101
Next Token :  , Posbility: 0.0581
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0205
Next Token : list, Posbility: 0.0298
Next Token : loop, Posbility: 0.0557
Next Token : rec, Posbility: 0.2490
Next Token : iter, Posbility: 0.3633
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0046
Next Token :  i, Posbility: 0.0143
Next Token : _, Posbility: 0.0161
Next Token :  =, Posbility: 0.0498
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0007
Next Token : x, Posbility: 0.0031
Next Token : (, Posbility: 0.0074
Next Token : (), Posbility: 0.0107
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0011
Next Token :  i, Posbility: 0.0018
Next Token :  acc, Posbility: 0.0106
Next Token :  , Posbility: 0.0175
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  while, Posbility: 0.0007
Next Token :  fun, Posbility: 0.0007
Next Token :  match, Posbility: 0.0082
Next Token :  , Posbility: 0.0369
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :    , Posbility: 0.0013
Next Token : let, Posbility: 0.0019
Next Token :     , Posbility: 0.0041
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : while, Posbility: 0.0344
Next Token : List, Posbility: 0.0442
Next Token : match, Posbility: 0.1543
Next Token : if, Posbility: 0.3262
Next Token : let, Posbility: 0.3711
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0271
Next Token :  acc, Posbility: 0.0271
Next Token :  len, Posbility: 0.0349
Next Token :  rec, Posbility: 0.3301
Next Token :  , Posbility: 0.3301
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : q, Posbility: 0.0262
Next Token : length, Posbility: 0.0491
Next Token : x, Posbility: 0.0554
Next Token : r, Posbility: 0.0554
Next Token : s, Posbility: 0.3613
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0796
Next Token : 1, Posbility: 0.0796
Next Token : _, Posbility: 0.1021
Next Token : s, Posbility: 0.1157
Next Token :  =, Posbility: 0.4590
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0048
Next Token :  Some, Posbility: 0.0166
Next Token :  String, Posbility: 0.0214
Next Token :  [, Posbility: 0.0273
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0112
Next Token : if, Posbility: 0.0210
Next Token : Seq, Posbility: 0.0210
Next Token : List, Posbility: 0.1758
Next Token : s, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0132
Next Token :  |, Posbility: 0.0247
Next Token : ., Posbility: 0.1104
Next Token :  , Posbility: 0.1416
Next Token :  in, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0010
Next Token :  match, Posbility: 0.0013
Next Token :  , Posbility: 0.0137
Next Token :  while, Posbility: 0.0156
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0151
Next Token : let, Posbility: 0.0869
Next Token : while, Posbility: 0.1113
Next Token : match, Posbility: 0.1836
Next Token : if, Posbility: 0.4980
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0037
Next Token :  String, Posbility: 0.0101
Next Token :  !, Posbility: 0.0215
Next Token :  not, Posbility: 0.0354
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0008
Next Token : List, Posbility: 0.0057
Next Token : (, Posbility: 0.0156
Next Token : s, Posbility: 0.1152
Next Token : length, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zero, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : one, Posbility: 0.0001
Next Token : two, Posbility: 0.0001
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0017
Next Token : s, Posbility: 0.0017
Next Token : _, Posbility: 0.0947
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0017
Next Token :  ||, Posbility: 0.0058
Next Token :  &&, Posbility: 0.0074
Next Token : 
, Posbility: 0.0095
Next Token :  then, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0022
Next Token :  [, Posbility: 0.0146
Next Token :  Some, Posbility: 0.0349
Next Token : 
, Posbility: 0.0396
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0037
Next Token : yield, Posbility: 0.0048
Next Token : (, Posbility: 0.0214
Next Token : return, Posbility: 0.0452
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0022
Next Token :  |, Posbility: 0.0140
Next Token :  , Posbility: 0.0159
Next Token :  else, Posbility: 0.0913
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : elif, Posbility: 0.0002
Next Token : |, Posbility: 0.0036
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0042
Next Token :  while, Posbility: 0.0069
Next Token :  match, Posbility: 0.0129
Next Token : 
, Posbility: 0.1582
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0542
Next Token : s, Posbility: 0.0542
Next Token : List, Posbility: 0.0542
Next Token : if, Posbility: 0.0894
Next Token : length, Posbility: 0.6602
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : three, Posbility: 0.0000
Next Token : fourth, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : it, Posbility: 0.0001
Next Token : iterator, Posbility: 0.0001
Next Token : loop, Posbility: 0.0001
Next Token : rec, Posbility: 0.0474
Next Token : iter, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0015
Next Token : _, Posbility: 0.0024
Next Token : 
, Posbility: 0.0035
Next Token :  ((, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0005
Next Token : length, Posbility: 0.0007
Next Token : List, Posbility: 0.0011
Next Token : s, Posbility: 0.0292
Next Token : (, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token : cons, Posbility: 0.0007
Next Token : String, Posbility: 0.0027
Next Token : List, Posbility: 0.0200
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  @, Posbility: 0.0005
Next Token :  +, Posbility: 0.0007
Next Token : ., Posbility: 0.0012
Next Token : ::, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : @@, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : :, Posbility: 0.0046
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0014
Next Token :  nil, Posbility: 0.0035
Next Token : !, Posbility: 0.0095
Next Token :  !, Posbility: 0.0107
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0034
Next Token : List, Posbility: 0.0063
Next Token : (, Posbility: 0.0220
Next Token : []), Posbility: 0.0220
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0007
Next Token : '), Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token : );, Posbility: 0.0052
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0012
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.0239
Next Token :  in, Posbility: 0.1768
Next Token : 
, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0006
Next Token :  in, Posbility: 0.0010
Next Token :   , Posbility: 0.0014
Next Token : let, Posbility: 0.0469
Next Token : in, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  System, Posbility: 0.0000
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0532
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : println, Posbility: 0.0129
Next Token : list, Posbility: 0.0165
Next Token : length, Posbility: 0.0613
Next Token : (, Posbility: 0.0693
Next Token : let, Posbility: 0.7461
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0272
Next Token :  find, Posbility: 0.0508
Next Token :  words, Posbility: 0.0840
Next Token :  , Posbility: 0.2930
Next Token :  rec, Posbility: 0.3750
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0223
Next Token :  words, Posbility: 0.0287
Next Token :  count, Posbility: 0.0287
Next Token :  find, Posbility: 0.0474
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0037
Next Token : split, Posbility: 0.0037
Next Token : f, Posbility: 0.0042
Next Token : print, Posbility: 0.0069
Next Token : length, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _4_, Posbility: 0.0004
Next Token : s, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0005
Next Token : five, Posbility: 0.0007
Next Token : three, Posbility: 0.0009
Next Token : two, Posbility: 0.0019
Next Token : four, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0016
Next Token : s, Posbility: 0.0048
Next Token :  =, Posbility: 0.0090
Next Token :  , Posbility: 0.0583
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0388
Next Token : loop, Posbility: 0.0439
Next Token : list, Posbility: 0.0564
Next Token : rec, Posbility: 0.0564
Next Token : iter, Posbility: 0.4727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0094
Next Token : ', Posbility: 0.0786
Next Token :  , Posbility: 0.1011
Next Token : 2, Posbility: 0.2422
Next Token : _, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0325
Next Token : aux, Posbility: 0.0369
Next Token : tail, Posbility: 0.0605
Next Token : rec, Posbility: 0.0781
Next Token : opt, Posbility: 0.2119
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0026
Next Token : s, Posbility: 0.0071
Next Token :  =, Posbility: 0.0150
Next Token : _, Posbility: 0.0248
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (), Posbility: 0.0005
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0003
Next Token : 0, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0109
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0007
Next Token :  function, Posbility: 0.0013
Next Token :  match, Posbility: 0.0035
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token : let, Posbility: 0.0006
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0039
Next Token : try, Posbility: 0.0481
Next Token : match, Posbility: 0.2148
Next Token : if, Posbility: 0.3555
Next Token : let, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0023
Next Token :  v, Posbility: 0.0026
Next Token :  iter, Posbility: 0.0029
Next Token :  rec, Posbility: 0.0408
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0016
Next Token : r, Posbility: 0.0019
Next Token : opt, Posbility: 0.0040
Next Token : x, Posbility: 0.0045
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : _, Posbility: 0.0013
Next Token : 0, Posbility: 0.0013
Next Token : ,, Posbility: 0.0040
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  None, Posbility: 0.0005
Next Token :  Optional, Posbility: 0.0007
Next Token :  Some, Posbility: 0.0179
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0010
Next Token : (, Posbility: 0.0013
Next Token : List, Posbility: 0.0031
Next Token : Option, Posbility: 0.0031
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0003
Next Token : ., Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0079
Next Token : try, Posbility: 0.0352
Next Token : let, Posbility: 0.0581
Next Token : match, Posbility: 0.1572
Next Token : if, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Not, Posbility: 0.0014
Next Token :  String, Posbility: 0.0034
Next Token :  !, Posbility: 0.0106
Next Token :  not, Posbility: 0.0253
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0038
Next Token : let, Posbility: 0.0062
Next Token : (, Posbility: 0.0103
Next Token : s, Posbility: 0.0459
Next Token : length, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zero, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0005
Next Token :  ?, Posbility: 0.0019
Next Token : _, Posbility: 0.0292
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token :  ||, Posbility: 0.0040
Next Token : 
, Posbility: 0.0045
Next Token :  &&, Posbility: 0.0096
Next Token :  then, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0031
Next Token :  None, Posbility: 0.0040
Next Token : 
, Posbility: 0.0297
Next Token :  , Posbility: 0.3613
Next Token :  Some, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0420
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ();, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0005
Next Token : (, Posbility: 0.0474
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0006
Next Token :  |, Posbility: 0.0020
Next Token :  , Posbility: 0.0025
Next Token :  else, Posbility: 0.0947
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  else, Posbility: 0.0001
Next Token : end, Posbility: 0.0002
Next Token : else, Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : els, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0016
Next Token :  match, Posbility: 0.0016
Next Token :  Some, Posbility: 0.0898
Next Token :  , Posbility: 0.2432
Next Token :  None, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.0103
Next Token :  in, Posbility: 0.0593
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0034
Next Token : (, Posbility: 0.0067
Next Token :   , Posbility: 0.0071
Next Token : let, Posbility: 0.0205
Next Token : in, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : finite, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0952
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0049
Next Token : printf, Posbility: 0.0056
Next Token : list, Posbility: 0.0063
Next Token : (, Posbility: 0.0767
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  words, Posbility: 0.0135
Next Token :  find, Posbility: 0.0154
Next Token :  main, Posbility: 0.0175
Next Token :  , Posbility: 0.1289
Next Token :  rec, Posbility: 0.7422
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0092
Next Token :  loop, Posbility: 0.0092
Next Token :  find, Posbility: 0.0153
Next Token :  count, Posbility: 0.0195
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0014
Next Token : longest, Posbility: 0.0016
Next Token : f, Posbility: 0.0018
Next Token : print, Posbility: 0.0030
Next Token : length, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : _4_, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0004
Next Token : three, Posbility: 0.0009
Next Token : five, Posbility: 0.0009
Next Token : two, Posbility: 0.0015
Next Token : four, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token : s, Posbility: 0.0013
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0240
Next Token : list, Posbility: 0.0309
Next Token : rec, Posbility: 0.0576
Next Token : opt, Posbility: 0.1777
Next Token : iter, Posbility: 0.5469
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0011
Next Token : 3, Posbility: 0.0011
Next Token :  , Posbility: 0.0152
Next Token : 2, Posbility: 0.0322
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0168
Next Token : all, Posbility: 0.0190
Next Token : list, Posbility: 0.0315
Next Token : rec, Posbility: 0.0356
Next Token : opt, Posbility: 0.4922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0060
Next Token :  , Posbility: 0.0732
Next Token : ', Posbility: 0.1069
Next Token : 2, Posbility: 0.1758
Next Token : _, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0315
Next Token : tail, Posbility: 0.0356
Next Token : ex, Posbility: 0.0588
Next Token : rec, Posbility: 0.0854
Next Token : opt, Posbility: 0.1245
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0033
Next Token : s, Posbility: 0.0069
Next Token : _, Posbility: 0.0272
Next Token :  =, Posbility: 0.0349
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : (), Posbility: 0.0006
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 0.0012
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0006
Next Token :  function, Posbility: 0.0012
Next Token :  , Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0079
Next Token : try, Posbility: 0.0216
Next Token : match, Posbility: 0.0588
Next Token : if, Posbility: 0.1602
Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0011
Next Token :  iter, Posbility: 0.0011
Next Token :  v, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : r, Posbility: 0.0008
Next Token : opt, Posbility: 0.0015
Next Token : x, Posbility: 0.0031
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  Optional, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : Option, Posbility: 0.0003
Next Token : List, Posbility: 0.0006
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0058
Next Token : Some, Posbility: 0.0159
Next Token : let, Posbility: 0.0430
Next Token : match, Posbility: 0.0430
Next Token : if, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0004
Next Token :  !, Posbility: 0.0019
Next Token :  Some, Posbility: 0.0022
Next Token :  not, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0014
Next Token : (, Posbility: 0.0051
Next Token : let, Posbility: 0.0107
Next Token : s, Posbility: 0.0138
Next Token : length, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  ?, Posbility: 0.0015
Next Token : _, Posbility: 0.0229
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :  ||, Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  &&, Posbility: 0.0046
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0056
Next Token :  None, Posbility: 0.0151
Next Token : 
, Posbility: 0.0410
Next Token :  , Posbility: 0.1113
Next Token :  Some, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token :  ((, Posbility: 0.0021
Next Token : (, Posbility: 0.0040
Next Token :  Some, Posbility: 0.0157
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0001
Next Token : (), Posbility: 0.0006
Next Token : length, Posbility: 0.0009
Next Token : (, Posbility: 0.3770
Next Token : s, Posbility: 0.6211
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0034
Next Token : ::, Posbility: 0.0039
Next Token :  , Posbility: 0.0136
Next Token :  else, Posbility: 0.1289
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : els, Posbility: 0.0001
Next Token : elif, Posbility: 0.0005
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0044
Next Token :  match, Posbility: 0.0056
Next Token :  Some, Posbility: 0.0325
Next Token :  , Posbility: 0.1133
Next Token :  None, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0017
Next Token :  , Posbility: 0.0188
Next Token :  in, Posbility: 0.0240
Next Token : 

, Posbility: 0.1387
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0035
Next Token :   , Posbility: 0.0048
Next Token : (, Posbility: 0.0115
Next Token : let, Posbility: 0.0664
Next Token : in, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : finite, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : open, Posbility: 0.0069
Next Token : [, Posbility: 0.0078
Next Token : *, Posbility: 0.0094
Next Token : (, Posbility: 0.0947
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0076
Next Token :  find, Posbility: 0.0111
Next Token :  iter, Posbility: 0.0126
Next Token :  , Posbility: 0.1191
Next Token :  rec, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0060
Next Token :  loop, Posbility: 0.0060
Next Token :  find, Posbility: 0.0099
Next Token :  count, Posbility: 0.0113
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : split, Posbility: 0.0010
Next Token : s, Posbility: 0.0013
Next Token : f, Posbility: 0.0013
Next Token : print, Posbility: 0.0019
Next Token : length, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : _4_, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0003
Next Token : five, Posbility: 0.0005
Next Token : three, Posbility: 0.0007
Next Token : two, Posbility: 0.0012
Next Token : four, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 0.0012
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0091
Next Token : list, Posbility: 0.0192
Next Token : rec, Posbility: 0.0522
Next Token : opt, Posbility: 0.0859
Next Token : iter, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token : 3, Posbility: 0.0010
Next Token :  , Posbility: 0.0107
Next Token : 2, Posbility: 0.0156
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0106
Next Token : iter, Posbility: 0.0223
Next Token : rec, Posbility: 0.0287
Next Token : list, Posbility: 0.0325
Next Token : opt, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0012
Next Token : 3, Posbility: 0.0018
Next Token :  , Posbility: 0.0220
Next Token : 2, Posbility: 0.0361
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0253
Next Token : none, Posbility: 0.0415
Next Token : list, Posbility: 0.0471
Next Token : rec, Posbility: 0.0471
Next Token : opt, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0043
Next Token : 1, Posbility: 0.0079
Next Token :  , Posbility: 0.0854
Next Token : 2, Posbility: 0.1602
Next Token : _, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0211
Next Token : iter, Posbility: 0.0211
Next Token : ex, Posbility: 0.0211
Next Token : rec, Posbility: 0.1069
Next Token : opt, Posbility: 0.3301
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token : 2, Posbility: 0.0030
Next Token : _, Posbility: 0.0173
Next Token :  =, Posbility: 0.0173
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (), Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token :  function, Posbility: 0.0002
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : length, Posbility: 0.0013
Next Token : match, Posbility: 0.0045
Next Token : if, Posbility: 0.0256
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  len, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : opt, Posbility: 0.0002
Next Token : x, Posbility: 0.0006
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : Some, Posbility: 0.0014
Next Token : match, Posbility: 0.0107
Next Token : let, Posbility: 0.0177
Next Token : if, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token :  !, Posbility: 0.0003
Next Token :  not, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : let, Posbility: 0.0008
Next Token : (, Posbility: 0.0010
Next Token : s, Posbility: 0.0022
Next Token : length, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0002
Next Token : _, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  &&, Posbility: 0.0008
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token :  None, Posbility: 0.0062
Next Token : 
, Posbility: 0.0170
Next Token :  , Posbility: 0.0461
Next Token :  Some, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token :  [, Posbility: 0.0015
Next Token :  Some, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token :  else, Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : then, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : els, Posbility: 0.0000
Next Token : elif, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  Some, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token :  None, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0010
Next Token :  in, Posbility: 0.0012
Next Token :  , Posbility: 0.0059
Next Token : 

, Posbility: 0.1050
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0036
Next Token :   , Posbility: 0.0052
Next Token : (, Posbility: 0.0098
Next Token : let, Posbility: 0.0562
Next Token : in, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  module, Posbility: 0.0000
Next Token : finite, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : 

, Posbility: 0.0420
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : open, Posbility: 0.0093
Next Token : [, Posbility: 0.0119
Next Token : module, Posbility: 0.0119
Next Token : (, Posbility: 0.0938
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0070
Next Token :  find, Posbility: 0.0070
Next Token :  iter, Posbility: 0.0115
Next Token :  , Posbility: 0.1094
Next Token :  rec, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0042
Next Token :  loop, Posbility: 0.0048
Next Token :  find, Posbility: 0.0070
Next Token :  count, Posbility: 0.0079
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0008
Next Token : s, Posbility: 0.0009
Next Token : f, Posbility: 0.0011
Next Token : print, Posbility: 0.0013
Next Token : length, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0003
Next Token : five, Posbility: 0.0004
Next Token : three, Posbility: 0.0006
Next Token : two, Posbility: 0.0009
Next Token : four, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0055
Next Token : list, Posbility: 0.0103
Next Token : rec, Posbility: 0.0459
Next Token : opt, Posbility: 0.0520
Next Token : iter, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0004
Next Token : 3, Posbility: 0.0007
Next Token : 2, Posbility: 0.0075
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0063
Next Token : list, Posbility: 0.0132
Next Token : iter, Posbility: 0.0193
Next Token : rec, Posbility: 0.0281
Next Token : opt, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0003
Next Token : 3, Posbility: 0.0006
Next Token : 2, Posbility: 0.0066
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0060
Next Token : none, Posbility: 0.0099
Next Token : iter, Posbility: 0.0099
Next Token : rec, Posbility: 0.0270
Next Token : opt, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0031
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0038
Next Token : some, Posbility: 0.0049
Next Token : rec, Posbility: 0.0103
Next Token : none, Posbility: 0.0131
Next Token : opt, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0013
Next Token :  =, Posbility: 0.0025
Next Token : 2, Posbility: 0.0145
Next Token :  , Posbility: 0.0830
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0049
Next Token : none, Posbility: 0.0104
Next Token : iter, Posbility: 0.0104
Next Token : rec, Posbility: 0.0322
Next Token : opt, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : 
, Posbility: 0.0013
Next Token :  =, Posbility: 0.0095
Next Token : _, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (), Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : length, Posbility: 0.0005
Next Token : match, Posbility: 0.0009
Next Token : if, Posbility: 0.0124
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Some, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : match, Posbility: 0.0010
Next Token : let, Posbility: 0.0025
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  true, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  &&, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  None, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  else, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : els, Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0008
Next Token : , Posbility: 0.0012
Next Token : ), Posbility: 0.0017
Next Token : 

, Posbility: 0.1060
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0042
Next Token : ```, Posbility: 0.0069
Next Token : (, Posbility: 0.0120
Next Token : let, Posbility: 0.0693
Next Token : in, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  module, Posbility: 0.0001
Next Token : finite, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0532
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : open, Posbility: 0.0084
Next Token : module, Posbility: 0.0157
Next Token : [, Posbility: 0.0189
Next Token : (, Posbility: 0.1025
Next Token : let, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0063
Next Token :  find, Posbility: 0.0081
Next Token :  iter, Posbility: 0.0103
Next Token :  , Posbility: 0.0981
Next Token :  rec, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0033
Next Token :  loop, Posbility: 0.0043
Next Token :  find, Posbility: 0.0071
Next Token :  count, Posbility: 0.0071
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0008
Next Token : s, Posbility: 0.0008
Next Token : f, Posbility: 0.0013
Next Token : print, Posbility: 0.0013
Next Token : length, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0003
Next Token : five, Posbility: 0.0004
Next Token : three, Posbility: 0.0006
Next Token : two, Posbility: 0.0009
Next Token : four, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token : s, Posbility: 0.0012
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0049
Next Token : list, Posbility: 0.0092
Next Token : rec, Posbility: 0.0413
Next Token : opt, Posbility: 0.0469
Next Token : iter, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0004
Next Token : 3, Posbility: 0.0005
Next Token : 2, Posbility: 0.0045
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0041
Next Token : list, Posbility: 0.0076
Next Token : iter, Posbility: 0.0126
Next Token : rec, Posbility: 0.0206
Next Token : opt, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0024
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0024
Next Token : none, Posbility: 0.0039
Next Token : iter, Posbility: 0.0039
Next Token : rec, Posbility: 0.0106
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0008
Next Token : optional, Posbility: 0.0012
Next Token : rec, Posbility: 0.0015
Next Token : none, Posbility: 0.0019
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0007
Next Token : rec, Posbility: 0.0013
Next Token : iter, Posbility: 0.0013
Next Token : none, Posbility: 0.0022
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : 2, Posbility: 0.0028
Next Token :  =, Posbility: 0.0041
Next Token :  , Posbility: 0.1055
Next Token : _, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0020
Next Token : none, Posbility: 0.0049
Next Token : iter, Posbility: 0.0056
Next Token : rec, Posbility: 0.0104
Next Token : opt, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 
, Posbility: 0.0010
Next Token :  =, Posbility: 0.0046
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (), Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0003
Next Token : match, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : if, Posbility: 0.0085
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Some, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : match, Posbility: 0.0002
Next Token : let, Posbility: 0.0009
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  true, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  four, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  else, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : endif, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  none, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0009
Next Token :  in, Posbility: 0.0009
Next Token : ), Posbility: 0.0011
Next Token : 

, Posbility: 0.0598
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0035
Next Token : ```, Posbility: 0.0065
Next Token : (, Posbility: 0.0101
Next Token : let, Posbility: 0.0698
Next Token : in, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : finite, Posbility: 0.0000
Next Token :  module, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0674
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : open, Posbility: 0.0078
Next Token : module, Posbility: 0.0155
Next Token : [, Posbility: 0.0176
Next Token : (, Posbility: 0.0952
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0049
Next Token :  find, Posbility: 0.0063
Next Token :  iter, Posbility: 0.0092
Next Token :  , Posbility: 0.0991
Next Token :  rec, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0030
Next Token :  loop, Posbility: 0.0038
Next Token :  find, Posbility: 0.0056
Next Token :  count, Posbility: 0.0071
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token : opt, Posbility: 0.0006
Next Token : print, Posbility: 0.0007
Next Token : f, Posbility: 0.0009
Next Token : length, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0002
Next Token : three, Posbility: 0.0004
Next Token : five, Posbility: 0.0004
Next Token : two, Posbility: 0.0006
Next Token : four, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 0.0009
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0036
Next Token : list, Posbility: 0.0067
Next Token : opt, Posbility: 0.0299
Next Token : rec, Posbility: 0.0339
Next Token : iter, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token : 4, Posbility: 0.0003
Next Token : 2, Posbility: 0.0024
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0029
Next Token : list, Posbility: 0.0054
Next Token : iter, Posbility: 0.0079
Next Token : rec, Posbility: 0.0167
Next Token : opt, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0011
Next Token : none, Posbility: 0.0019
Next Token : iter, Posbility: 0.0024
Next Token : rec, Posbility: 0.0066
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0003
Next Token : rec, Posbility: 0.0003
Next Token : none, Posbility: 0.0006
Next Token : optional, Posbility: 0.0007
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : none, Posbility: 0.0002
Next Token : iter, Posbility: 0.0002
Next Token : optional, Posbility: 0.0005
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0002
Next Token : iter, Posbility: 0.0003
Next Token : none, Posbility: 0.0003
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : 2, Posbility: 0.0010
Next Token :  =, Posbility: 0.0014
Next Token :  , Posbility: 0.0674
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0006
Next Token : rec, Posbility: 0.0007
Next Token : none, Posbility: 0.0008
Next Token : iter, Posbility: 0.0013
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 
, Posbility: 0.0012
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0001
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0046
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Some, Posbility: 0.0001
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0004
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  four, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : else, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0006
Next Token :  in, Posbility: 0.0007
Next Token : , Posbility: 0.0008
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0023
Next Token : ```, Posbility: 0.0063
Next Token : (, Posbility: 0.0076
Next Token : let, Posbility: 0.0635
Next Token : in, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : finite, Posbility: 0.0000
Next Token :  module, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0757
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0073
Next Token : [, Posbility: 0.0100
Next Token : module, Posbility: 0.0137
Next Token : (, Posbility: 0.0786
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0032
Next Token :  find, Posbility: 0.0036
Next Token :  iter, Posbility: 0.0086
Next Token :  , Posbility: 0.0718
Next Token :  rec, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0021
Next Token :  loop, Posbility: 0.0027
Next Token :  find, Posbility: 0.0039
Next Token :  count, Posbility: 0.0050
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : opt, Posbility: 0.0005
Next Token : f, Posbility: 0.0006
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : one, Posbility: 0.0002
Next Token : three, Posbility: 0.0003
Next Token : five, Posbility: 0.0003
Next Token : two, Posbility: 0.0004
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 0.0007
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0023
Next Token : list, Posbility: 0.0042
Next Token : opt, Posbility: 0.0215
Next Token : rec, Posbility: 0.0243
Next Token : iter, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0003
Next Token : 4, Posbility: 0.0003
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0026
Next Token : list, Posbility: 0.0038
Next Token : iter, Posbility: 0.0049
Next Token : rec, Posbility: 0.0132
Next Token : opt, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0006
Next Token : none, Posbility: 0.0009
Next Token : iter, Posbility: 0.0012
Next Token : rec, Posbility: 0.0036
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : none, Posbility: 0.0002
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0474
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0002
Next Token : rec, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : iter, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0019
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : Some, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: noerr
---------------------------
Next Token :  four, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: noerr
---------------------------
Next Token : five, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token : ), Posbility: 0.0005
Next Token : , Posbility: 0.0009
Next Token : 

, Posbility: 0.0532
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0020
Next Token : (, Posbility: 0.0050
Next Token : ```, Posbility: 0.0064
Next Token : let, Posbility: 0.0574
Next Token : in, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  module, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0601
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0088
Next Token : [, Posbility: 0.0093
Next Token : module, Posbility: 0.0198
Next Token : (, Posbility: 0.0786
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  all, Posbility: 0.0028
Next Token :  find, Posbility: 0.0036
Next Token :  iter, Posbility: 0.0077
Next Token :  , Posbility: 0.0645
Next Token :  rec, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0016
Next Token :  loop, Posbility: 0.0019
Next Token :  find, Posbility: 0.0027
Next Token :  count, Posbility: 0.0039
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0003
Next Token : opt, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : f, Posbility: 0.0006
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: noerr
---------------------------
Next Token : one, Posbility: 0.0002
Next Token : three, Posbility: 0.0004
Next Token : five, Posbility: 0.0004
Next Token : two, Posbility: 0.0006
Next Token : four, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0018
Next Token : list, Posbility: 0.0030
Next Token : opt, Posbility: 0.0170
Next Token : rec, Posbility: 0.0219
Next Token : iter, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 4, Posbility: 0.0002
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0021
Next Token : list, Posbility: 0.0027
Next Token : iter, Posbility: 0.0027
Next Token : rec, Posbility: 0.0073
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0005
Next Token : none, Posbility: 0.0006
Next Token : iter, Posbility: 0.0007
Next Token : rec, Posbility: 0.0022
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : none, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : some, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token :  =, Posbility: 0.0031
Next Token : _, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0022
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s =
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : Some, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length
 score:False
Error type: noerr
---------------------------
Next Token :  >=, Posbility: 0.0000
Next Token :  four, Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_
 score:False
Error type: noerr
---------------------------
Next Token : 4, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : three, Posbility: 0.0000
Next Token : two, Posbility: 0.0000
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s
 score:False
Error type: noerr
---------------------------
Next Token :  &&, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  
 score:False
Error type: noerr
---------------------------
Next Token : then, Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : Else, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else
 score:False
Error type: noerr
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  none, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  in, Posbility: 0.0005
Next Token : , Posbility: 0.0006
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0017
Next Token : (, Posbility: 0.0035
Next Token : ```, Posbility: 0.0048
Next Token : let, Posbility: 0.0405
Next Token : in, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
 score:False
Error type: noerr
---------------------------
Next Token : finite, Posbility: 0.0000
Next Token :  module, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0601
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in

 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0047
Next Token : [, Posbility: 0.0060
Next Token : module, Posbility: 0.0162
Next Token : (, Posbility: 0.0569
Next Token : let, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0020
Next Token :  find, Posbility: 0.0023
Next Token :  iter, Posbility: 0.0062
Next Token :  , Posbility: 0.0515
Next Token :  rec, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0015
Next Token :  loop, Posbility: 0.0015
Next Token :  find, Posbility: 0.0021
Next Token :  count, Posbility: 0.0031
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : opt, Posbility: 0.0003
Next Token : f, Posbility: 0.0004
Next Token : length, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _4_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_
 score:False
Error type: noerr
---------------------------
Next Token : one, Posbility: 0.0002
Next Token : three, Posbility: 0.0003
Next Token : five, Posbility: 0.0003
Next Token : two, Posbility: 0.0005
Next Token : four, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_
 score:False
Error type: noerr
---------------------------
Next Token : loop, Posbility: 0.0018
Next Token : list, Posbility: 0.0023
Next Token : opt, Posbility: 0.0151
Next Token : rec, Posbility: 0.0220
Next Token : iter, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0019
Next Token : all, Posbility: 0.0019
Next Token : iter, Posbility: 0.0021
Next Token : rec, Posbility: 0.0065
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : iter, Posbility: 0.0003
Next Token : rec, Posbility: 0.0013
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all words which are at least 4 characters long in a string. *)
let length_four = function
  | _ -> false
  | s -> s.length >= 4
in
let rec length_four_rec s =
  if length_four s then s
  else length_four_rec (s :: s)
in
let rec length_four_iter s =
  let s = s in
  if length_four s then s
  else length_four_iter (s :: s)
in
let rec length_four_iter_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt_opt_opt_opt_opt s =
  let s = s in
  if length_four s then Some s
  else None
in
let rec length_four_iter_opt_opt_opt_opt
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>