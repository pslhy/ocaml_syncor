code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0161
Next Token :  find, Posbility: 0.0928
Next Token :  first, Posbility: 0.1191
Next Token :  , Posbility: 0.2227
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0242
Next Token :  search, Posbility: 0.0510
Next Token :  first, Posbility: 0.0579
Next Token :  find, Posbility: 0.2949
Next Token :  , Posbility: 0.3340
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0229
Next Token : helper, Posbility: 0.0260
Next Token : f, Posbility: 0.0430
Next Token : end, Posbility: 0.1167
Next Token : ad, Posbility: 0.2178
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec ad
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : vert, Posbility: 0.0015
Next Token : end, Posbility: 0.0019
Next Token : vers, Posbility: 0.0031
Next Token : _, Posbility: 0.0108
Next Token : verb, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : End, Posbility: 0.0108
Next Token :  =, Posbility: 0.0201
Next Token :  , Posbility: 0.0259
Next Token : s, Posbility: 0.1318
Next Token : _, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : search, Posbility: 0.0400
Next Token : pos, Posbility: 0.0400
Next Token : positions, Posbility: 0.0513
Next Token : end, Posbility: 0.2305
Next Token : ending, Posbility: 0.3359
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0276
Next Token :  =, Posbility: 0.0747
Next Token :  , Posbility: 0.1235
Next Token : s, Posbility: 0.2031
Next Token : _, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : at, Posbility: 0.0403
Next Token : position, Posbility: 0.0586
Next Token : pos, Posbility: 0.0854
Next Token : positions, Posbility: 0.0854
Next Token : with, Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ly, Posbility: 0.0016
Next Token : (, Posbility: 0.0104
Next Token :  =, Posbility: 0.0133
Next Token :  , Posbility: 0.0361
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LY, Posbility: 0.0011
Next Token : li, Posbility: 0.0016
Next Token : y, Posbility: 0.0193
Next Token : l, Posbility: 0.0247
Next Token : ly, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0137
Next Token : (, Posbility: 0.0618
Next Token :  =, Posbility: 0.1309
Next Token : _, Posbility: 0.1895
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0312
Next Token : end, Posbility: 0.0354
Next Token : :, Posbility: 0.0457
Next Token : (, Posbility: 0.2314
Next Token : s, Posbility: 0.3809
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0154
Next Token :  i, Posbility: 0.0537
Next Token :  pos, Posbility: 0.1650
Next Token :  , Posbility: 0.1875
Next Token :  =, Posbility: 0.4492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0062
Next Token :  function, Posbility: 0.0243
Next Token :  match, Posbility: 0.0454
Next Token :  , Posbility: 0.0962
Next Token : 
, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0062
Next Token :    , Posbility: 0.0103
Next Token : 	, Posbility: 0.0103
Next Token :     , Posbility: 0.1416
Next Token :   , Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0168
Next Token : (, Posbility: 0.0192
Next Token : if, Posbility: 0.1602
Next Token : match, Posbility: 0.2988
Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0302
Next Token :  len, Posbility: 0.0640
Next Token :  pos, Posbility: 0.0820
Next Token :  rec, Posbility: 0.2227
Next Token :  , Posbility: 0.3672
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0437
Next Token : (, Posbility: 0.0635
Next Token : end, Posbility: 0.0723
Next Token : ad, Posbility: 0.1348
Next Token : s, Posbility: 0.1348
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0493
Next Token : ', Posbility: 0.0493
Next Token : 1, Posbility: 0.0630
Next Token : _, Posbility: 0.1514
Next Token :  =, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0029
Next Token :  S, Posbility: 0.0029
Next Token :  string, Posbility: 0.0029
Next Token :  , Posbility: 0.2598
Next Token :  String, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.0010
Next Token : s, Posbility: 0.0022
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : split, Posbility: 0.0349
Next Token : sub, Posbility: 0.0508
Next Token : down, Posbility: 0.1221
Next Token : to, Posbility: 0.1777
Next Token : trim, Posbility: 0.2930
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0008
Next Token : (, Posbility: 0.0016
Next Token : Left, Posbility: 0.0018
Next Token : _, Posbility: 0.4316
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Str, Posbility: 0.0001
Next Token : (", Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : (, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0019
Next Token :  ~, Posbility: 0.0019
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0031
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0005
Next Token :   , Posbility: 0.0045
Next Token : 

, Posbility: 0.0095
Next Token :  , Posbility: 0.0095
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :       , Posbility: 0.0005
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0114
Next Token : (, Posbility: 0.0146
Next Token : match, Posbility: 0.1387
Next Token : if, Posbility: 0.2930
Next Token : let, Posbility: 0.4824
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0432
Next Token :  len, Posbility: 0.0554
Next Token :  pos, Posbility: 0.1172
Next Token :  rec, Posbility: 0.1172
Next Token :  , Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0442
Next Token : n, Posbility: 0.0566
Next Token : end, Posbility: 0.0566
Next Token : ad, Posbility: 0.1060
Next Token : s, Posbility: 0.2539
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0183
Next Token : 1, Posbility: 0.0302
Next Token : ,, Posbility: 0.0640
Next Token : _, Posbility: 0.1050
Next Token :  =, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0046
Next Token :  match, Posbility: 0.0046
Next Token : 
, Posbility: 0.0342
Next Token :  , Posbility: 0.2520
Next Token :  String, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Split, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0525
Next Token : split, Posbility: 0.0869
Next Token : down, Posbility: 0.1260
Next Token : trim, Posbility: 0.1836
Next Token : to, Posbility: 0.1836
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token : lower, Posbility: 0.0012
Next Token : list, Posbility: 0.0019
Next Token : Lower, Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0615
Next Token : lower, Posbility: 0.0791
Next Token : string, Posbility: 0.1016
Next Token : lowercase, Posbility: 0.2754
Next Token : list, Posbility: 0.3125
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0003
Next Token :  ', Posbility: 0.0003
Next Token :  ~, Posbility: 0.0021
Next Token : _, Posbility: 0.0228
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token : ., Posbility: 0.0010
Next Token : 
, Posbility: 0.0015
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0013
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0228
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0126
Next Token : List, Posbility: 0.0391
Next Token : if, Posbility: 0.0933
Next Token : match, Posbility: 0.1060
Next Token : let, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0381
Next Token :  len, Posbility: 0.0381
Next Token :  pos, Posbility: 0.1040
Next Token :  rec, Posbility: 0.2197
Next Token :  , Posbility: 0.3633
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0461
Next Token : end, Posbility: 0.0461
Next Token : (, Posbility: 0.0522
Next Token : ad, Posbility: 0.1104
Next Token : s, Posbility: 0.2656
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0170
Next Token : ', Posbility: 0.0219
Next Token : ,, Posbility: 0.0359
Next Token : _, Posbility: 0.0408
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0048
Next Token :  [, Posbility: 0.0216
Next Token : 
, Posbility: 0.0586
Next Token :  String, Posbility: 0.1592
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0112
Next Token : Seq, Posbility: 0.0269
Next Token : s, Posbility: 0.0728
Next Token : Array, Posbility: 0.0938
Next Token : List, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0250
Next Token : sort, Posbility: 0.0469
Next Token : map, Posbility: 0.0771
Next Token : rev, Posbility: 0.3047
Next Token : filter, Posbility: 0.3047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0081
Next Token :  ((, Posbility: 0.0092
Next Token :  ~, Posbility: 0.0361
Next Token : _, Posbility: 0.0864
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0016
Next Token : Fun, Posbility: 0.0018
Next Token : <, Posbility: 0.0023
Next Token : s, Posbility: 0.0284
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0121
Next Token : fn, Posbility: 0.0226
Next Token : function, Posbility: 0.0479
Next Token : String, Posbility: 0.1670
Next Token : fun, Posbility: 0.6602
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0139
Next Token :  v, Posbility: 0.0201
Next Token :  a, Posbility: 0.0259
Next Token :  l, Posbility: 0.0549
Next Token :  , Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0260
Next Token : ch, Posbility: 0.0260
Next Token : s, Posbility: 0.0427
Next Token : c, Posbility: 0.3164
Next Token : x, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token :  i, Posbility: 0.0002
Next Token : ->, Posbility: 0.0005
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : →, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0153
Next Token :  !, Posbility: 0.0153
Next Token : 
, Posbility: 0.0253
Next Token :  String, Posbility: 0.3945
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0097
Next Token : List, Posbility: 0.0437
Next Token : (, Posbility: 0.0635
Next Token : Char, Posbility: 0.0635
Next Token : x, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ==, Posbility: 0.0135
Next Token :  !=, Posbility: 0.0135
Next Token :  >=, Posbility: 0.0173
Next Token :  , Posbility: 0.4473
Next Token :  =, Posbility: 0.4473
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '#, Posbility: 0.0165
Next Token : ~, Posbility: 0.0211
Next Token :  , Posbility: 0.1216
Next Token :  ", Posbility: 0.3301
Next Token :  ', Posbility: 0.4238
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = '
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0422
Next Token : ly, Posbility: 0.1011
Next Token : y, Posbility: 0.1147
Next Token : a, Posbility: 0.1475
Next Token : l, Posbility: 0.4531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = 'l
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = 'a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = 'y
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = 'ly
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = ' 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0109
Next Token :  , Posbility: 0.0139
Next Token : l, Posbility: 0.0229
Next Token : y, Posbility: 0.0294
Next Token : ly, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ., Posbility: 0.0007
Next Token :  , Posbility: 0.0022
Next Token : ";, Posbility: 0.0032
Next Token : ", Posbility: 0.1982
Next Token : "), Posbility: 0.7852
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0019
Next Token :  , Posbility: 0.0035
Next Token :  =, Posbility: 0.0051
Next Token : 
, Posbility: 0.0177
Next Token :  in, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :  , Posbility: 0.0025
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0093
Next Token : List, Posbility: 0.0369
Next Token : match, Posbility: 0.1465
Next Token : if, Posbility: 0.1875
Next Token : let, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0201
Next Token :  len, Posbility: 0.0332
Next Token :  pos, Posbility: 0.0796
Next Token :  rec, Posbility: 0.0796
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0203
Next Token : n, Posbility: 0.0203
Next Token : ad, Posbility: 0.0203
Next Token : x, Posbility: 0.0229
Next Token : s, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0030
Next Token : ', Posbility: 0.0050
Next Token : _, Posbility: 0.0093
Next Token : ,, Posbility: 0.0222
Next Token :  =, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0013
Next Token :  match, Posbility: 0.0035
Next Token : 
, Posbility: 0.0255
Next Token :  String, Posbility: 0.1147
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0027
Next Token : if, Posbility: 0.0031
Next Token : (, Posbility: 0.0035
Next Token : s, Posbility: 0.0095
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0359
Next Token : to, Posbility: 0.0461
Next Token : filter, Posbility: 0.1108
Next Token : rev, Posbility: 0.1826
Next Token : map, Posbility: 0.3418
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0099
Next Token :  String, Posbility: 0.0113
Next Token :  ((, Posbility: 0.0128
Next Token : i, Posbility: 0.0186
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Fun, Posbility: 0.0024
Next Token : ad, Posbility: 0.0039
Next Token : List, Posbility: 0.0039
Next Token : s, Posbility: 0.0050
Next Token : (, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0011
Next Token : fn, Posbility: 0.0014
Next Token : function, Posbility: 0.0154
Next Token : String, Posbility: 0.0175
Next Token : fun, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0021
Next Token :  l, Posbility: 0.0024
Next Token :  v, Posbility: 0.0058
Next Token :  i, Posbility: 0.0107
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0039
Next Token : (, Posbility: 0.0064
Next Token : s, Posbility: 0.0106
Next Token : _, Posbility: 0.0175
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0166
Next Token :  [, Posbility: 0.0166
Next Token :  ", Posbility: 0.0275
Next Token :  String, Posbility: 0.3340
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0189
Next Token : if, Posbility: 0.0311
Next Token : List, Posbility: 0.0581
Next Token : (, Posbility: 0.2031
Next Token : x, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0591
Next Token : ), Posbility: 0.0757
Next Token : ., Posbility: 0.0977
Next Token :  +, Posbility: 0.1611
Next Token :  , Posbility: 0.2656
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0058
Next Token : -, Posbility: 0.0430
Next Token : :, Posbility: 0.0623
Next Token : ::, Posbility: 0.1167
Next Token : ^, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0284
Next Token :  2), Posbility: 0.0469
Next Token : ^, Posbility: 0.0684
Next Token :  , Posbility: 0.0879
Next Token :  ", Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : _, Posbility: 0.0342
Next Token :  , Posbility: 0.0496
Next Token : l, Posbility: 0.0640
Next Token : ly, Posbility: 0.1729
Next Token : y, Posbility: 0.2520
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : $, Posbility: 0.0032
Next Token : s, Posbility: 0.0036
Next Token :  , Posbility: 0.0077
Next Token : ", Posbility: 0.0732
Next Token : "), Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  ~, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token :  =, Posbility: 0.0010
Next Token : 
, Posbility: 0.0046
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.0035
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0159
Next Token : List, Posbility: 0.0625
Next Token : if, Posbility: 0.0806
Next Token : match, Posbility: 0.1030
Next Token : let, Posbility: 0.6719
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0184
Next Token :  len, Posbility: 0.0209
Next Token :  rec, Posbility: 0.0645
Next Token :  pos, Posbility: 0.0825
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0137
Next Token : x, Posbility: 0.0200
Next Token : ad, Posbility: 0.0226
Next Token : (, Posbility: 0.0330
Next Token : s, Posbility: 0.7500
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0024
Next Token : ', Posbility: 0.0024
Next Token : _, Posbility: 0.0058
Next Token : ,, Posbility: 0.0095
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0018
Next Token :  [, Posbility: 0.0018
Next Token : 
, Posbility: 0.0049
Next Token :  String, Posbility: 0.2656
Next Token :  , Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0010
Next Token : Array, Posbility: 0.0019
Next Token : (, Posbility: 0.0035
Next Token : s, Posbility: 0.0084
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0811
Next Token : sort, Posbility: 0.1040
Next Token : filter, Posbility: 0.1338
Next Token : rev, Posbility: 0.1338
Next Token : map, Posbility: 0.2197
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0087
Next Token : _, Posbility: 0.0164
Next Token :  String, Posbility: 0.0186
Next Token : i, Posbility: 0.0347
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0015
Next Token : Int, Posbility: 0.0016
Next Token : s, Posbility: 0.0027
Next Token : List, Posbility: 0.0084
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0007
Next Token : List, Posbility: 0.0013
Next Token : function, Posbility: 0.0031
Next Token : String, Posbility: 0.0178
Next Token : fun, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pos, Posbility: 0.0010
Next Token :  l, Posbility: 0.0015
Next Token :  v, Posbility: 0.0022
Next Token :  i, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0031
Next Token : _, Posbility: 0.0051
Next Token : (, Posbility: 0.0065
Next Token : s, Posbility: 0.0084
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0062
Next Token :  [, Posbility: 0.0102
Next Token :  ", Posbility: 0.0457
Next Token :  String, Posbility: 0.3379
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0201
Next Token : if, Posbility: 0.0427
Next Token : (, Posbility: 0.0796
Next Token : List, Posbility: 0.0903
Next Token : x, Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0154
Next Token :  *, Posbility: 0.0325
Next Token :  =, Posbility: 0.0537
Next Token :  +, Posbility: 0.1138
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0057
Next Token : <, Posbility: 0.0073
Next Token : -, Posbility: 0.0094
Next Token : ::, Posbility: 0.0106
Next Token : ^, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0048
Next Token :  String, Posbility: 0.0055
Next Token :  "'", Posbility: 0.0103
Next Token :  , Posbility: 0.0278
Next Token :  ", Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : s, Posbility: 0.0610
Next Token : e, Posbility: 0.0693
Next Token : l, Posbility: 0.1006
Next Token : Y, Posbility: 0.1138
Next Token : y, Posbility: 0.1465
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0063
Next Token : ly, Posbility: 0.0152
Next Token : s, Posbility: 0.0221
Next Token : ", Posbility: 0.0874
Next Token : "), Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  String, Posbility: 0.0008
Next Token :  [, Posbility: 0.0010
Next Token :  ~, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : List, Posbility: 0.0024
Next Token : (, Posbility: 0.0179
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  |, Posbility: 0.0015
Next Token : 
, Posbility: 0.0036
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0058
Next Token : 

, Posbility: 0.0228
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0007
Next Token :  , Posbility: 0.0032
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0198
Next Token : List, Posbility: 0.0688
Next Token : if, Posbility: 0.0781
Next Token : match, Posbility: 0.1006
Next Token : let, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0139
Next Token :  len, Posbility: 0.0139
Next Token :  rec, Posbility: 0.0486
Next Token :  pos, Posbility: 0.0625
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : positions, Posbility: 0.0103
Next Token : ad, Posbility: 0.0171
Next Token : x, Posbility: 0.0171
Next Token : (, Posbility: 0.0219
Next Token : s, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0015
Next Token : s, Posbility: 0.0019
Next Token : _, Posbility: 0.0040
Next Token : ,, Posbility: 0.0045
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0021
Next Token : 
, Posbility: 0.0058
Next Token :  ", Posbility: 0.0058
Next Token :  String, Posbility: 0.1167
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0008
Next Token : Array, Posbility: 0.0011
Next Token : (, Posbility: 0.0035
Next Token : s, Posbility: 0.0074
Next Token : List, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0292
Next Token : rev, Posbility: 0.0292
Next Token : sort, Posbility: 0.0332
Next Token : filter, Posbility: 0.1484
Next Token : map, Posbility: 0.5859
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0034
Next Token :  String, Posbility: 0.0049
Next Token : _, Posbility: 0.0056
Next Token : i, Posbility: 0.0283
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0005
Next Token : Char, Posbility: 0.0005
Next Token : s, Posbility: 0.0010
Next Token : List, Posbility: 0.0031
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0004
Next Token : List, Posbility: 0.0004
Next Token : function, Posbility: 0.0015
Next Token : String, Posbility: 0.0036
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0004
Next Token :  l, Posbility: 0.0007
Next Token :  v, Posbility: 0.0008
Next Token :  i, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0015
Next Token : _, Posbility: 0.0017
Next Token : (, Posbility: 0.0031
Next Token : s, Posbility: 0.0031
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0035
Next Token :  [, Posbility: 0.0035
Next Token :  ", Posbility: 0.0258
Next Token :  String, Posbility: 0.0898
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0049
Next Token : if, Posbility: 0.0117
Next Token : List, Posbility: 0.0170
Next Token : (, Posbility: 0.0193
Next Token : x, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0023
Next Token :  *, Posbility: 0.0079
Next Token :  =, Posbility: 0.0131
Next Token :  +, Posbility: 0.0354
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : /, Posbility: 0.0002
Next Token : :, Posbility: 0.0002
Next Token : -, Posbility: 0.0006
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ""), Posbility: 0.0013
Next Token : ", Posbility: 0.0015
Next Token :  "'", Posbility: 0.0017
Next Token :  , Posbility: 0.0109
Next Token :  ", Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0087
Next Token : Y, Posbility: 0.0126
Next Token : l, Posbility: 0.0143
Next Token : ly, Posbility: 0.0183
Next Token : y, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 0.0005
Next Token : y, Posbility: 0.0006
Next Token : ", Posbility: 0.0109
Next Token : "), Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0229
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0193
Next Token : if, Posbility: 0.0525
Next Token : List, Posbility: 0.0593
Next Token : match, Posbility: 0.0762
Next Token : let, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0083
Next Token :  first, Posbility: 0.0106
Next Token :  rec, Posbility: 0.0255
Next Token :  pos, Posbility: 0.0420
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : positions, Posbility: 0.0061
Next Token : x, Posbility: 0.0089
Next Token : ad, Posbility: 0.0101
Next Token : (, Posbility: 0.0114
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : s, Posbility: 0.0010
Next Token : ,, Posbility: 0.0019
Next Token : _, Posbility: 0.0022
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0014
Next Token :  ", Posbility: 0.0023
Next Token : 
, Posbility: 0.0038
Next Token :  String, Posbility: 0.0469
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : Array, Posbility: 0.0005
Next Token : (, Posbility: 0.0022
Next Token : s, Posbility: 0.0046
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0090
Next Token : fold, Posbility: 0.0090
Next Token : sort, Posbility: 0.0148
Next Token : filter, Posbility: 0.0850
Next Token : map, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.0017
Next Token :  String, Posbility: 0.0017
Next Token : i, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : s, Posbility: 0.0004
Next Token : List, Posbility: 0.0012
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : function, Posbility: 0.0008
Next Token : String, Posbility: 0.0009
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  l, Posbility: 0.0003
Next Token :  v, Posbility: 0.0003
Next Token :  i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token : s, Posbility: 0.0009
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0011
Next Token :  [, Posbility: 0.0011
Next Token :  ", Posbility: 0.0106
Next Token :  String, Posbility: 0.0225
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0015
Next Token : List, Posbility: 0.0031
Next Token : if, Posbility: 0.0040
Next Token : (, Posbility: 0.0075
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token :  *, Posbility: 0.0019
Next Token :  =, Posbility: 0.0024
Next Token :  +, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ""), Posbility: 0.0004
Next Token :  "'", Posbility: 0.0004
Next Token : ", Posbility: 0.0007
Next Token :  , Posbility: 0.0025
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Y, Posbility: 0.0013
Next Token : e, Posbility: 0.0019
Next Token : l, Posbility: 0.0024
Next Token : ly, Posbility: 0.0051
Next Token : y, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : ", Posbility: 0.0041
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0021
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :  , Posbility: 0.0017
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0166
Next Token : if, Posbility: 0.0352
Next Token : List, Posbility: 0.0452
Next Token : match, Posbility: 0.0510
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0054
Next Token :  first, Posbility: 0.0061
Next Token :  rec, Posbility: 0.0146
Next Token :  pos, Posbility: 0.0273
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : positions, Posbility: 0.0038
Next Token : ad, Posbility: 0.0063
Next Token : x, Posbility: 0.0063
Next Token : (, Posbility: 0.0072
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token : s, Posbility: 0.0007
Next Token : ,, Posbility: 0.0008
Next Token : _, Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0014
Next Token :  ", Posbility: 0.0019
Next Token : 
, Posbility: 0.0031
Next Token :  String, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : Array, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token : s, Posbility: 0.0025
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0037
Next Token : fold, Posbility: 0.0037
Next Token : sort, Posbility: 0.0061
Next Token : filter, Posbility: 0.0454
Next Token : map, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0006
Next Token :  ((, Posbility: 0.0007
Next Token : 
, Posbility: 0.0009
Next Token : i, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : String, Posbility: 0.0003
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  l, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : s, Posbility: 0.0005
Next Token : _, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token :  ", Posbility: 0.0052
Next Token :  String, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0005
Next Token : List, Posbility: 0.0012
Next Token : if, Posbility: 0.0013
Next Token : (, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0005
Next Token :  =, Posbility: 0.0006
Next Token :  *, Posbility: 0.0006
Next Token :  +, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ""), Posbility: 0.0002
Next Token :  "'", Posbility: 0.0002
Next Token : ", Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0004
Next Token : e, Posbility: 0.0006
Next Token : l, Posbility: 0.0009
Next Token : ly, Posbility: 0.0017
Next Token : y, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ", Posbility: 0.0022
Next Token : "), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0170
Next Token : if, Posbility: 0.0359
Next Token : List, Posbility: 0.0405
Next Token : match, Posbility: 0.0405
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0034
Next Token :  first, Posbility: 0.0034
Next Token :  rec, Posbility: 0.0064
Next Token :  pos, Posbility: 0.0153
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0019
Next Token : ad, Posbility: 0.0035
Next Token : x, Posbility: 0.0035
Next Token : (, Posbility: 0.0040
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0004
Next Token : s, Posbility: 0.0004
Next Token : 1, Posbility: 0.0004
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token :  ", Posbility: 0.0010
Next Token : 
, Posbility: 0.0021
Next Token :  String, Posbility: 0.0178
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Array, Posbility: 0.0001
Next Token : (, Posbility: 0.0008
Next Token : s, Posbility: 0.0019
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0018
Next Token : find, Posbility: 0.0018
Next Token : sort, Posbility: 0.0039
Next Token : filter, Posbility: 0.0225
Next Token : map, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : i, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : String, Posbility: 0.0002
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  l, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  ", Posbility: 0.0031
Next Token :  String, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : if, Posbility: 0.0005
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token :  *, Posbility: 0.0003
Next Token : ), Posbility: 0.0003
Next Token :  +, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0001
Next Token :  ""), Posbility: 0.0001
Next Token : ", Posbility: 0.0006
Next Token :  , Posbility: 0.0006
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0003
Next Token : e, Posbility: 0.0003
Next Token : l, Posbility: 0.0004
Next Token : ly, Posbility: 0.0007
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0017
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0110
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0108
Next Token : if, Posbility: 0.0293
Next Token : List, Posbility: 0.0293
Next Token : match, Posbility: 0.0332
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0024
Next Token :  first, Posbility: 0.0024
Next Token :  rec, Posbility: 0.0045
Next Token :  pos, Posbility: 0.0095
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0013
Next Token : x, Posbility: 0.0024
Next Token : (, Posbility: 0.0024
Next Token : ad, Posbility: 0.0024
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token :  ", Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  String, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 0.0015
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0009
Next Token : find, Posbility: 0.0011
Next Token : sort, Posbility: 0.0024
Next Token : filter, Posbility: 0.0108
Next Token : map, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : i, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : String, Posbility: 0.0001
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ", Posbility: 0.0017
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token :  *, Posbility: 0.0002
Next Token : ), Posbility: 0.0003
Next Token :  +, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0001
Next Token :  ""), Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ", Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : l, Posbility: 0.0003
Next Token : ly, Posbility: 0.0004
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0013
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0110
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0111
Next Token : if, Posbility: 0.0208
Next Token : match, Posbility: 0.0236
Next Token : List, Posbility: 0.0266
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0019
Next Token :  first, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0035
Next Token :  pos, Posbility: 0.0084
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0010
Next Token : ad, Posbility: 0.0017
Next Token : (, Posbility: 0.0022
Next Token : x, Posbility: 0.0022
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0010
Next Token :  String, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 0.0012
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0005
Next Token : find, Posbility: 0.0007
Next Token : sort, Posbility: 0.0015
Next Token : filter, Posbility: 0.0066
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : i, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : String, Posbility: 0.0001
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0012
Next Token :  String, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 0.0002
Next Token :  +, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0001
Next Token :  ""), Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ", Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : l, Posbility: 0.0002
Next Token : ly, Posbility: 0.0003
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0010
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0099
Next Token : if, Posbility: 0.0210
Next Token : match, Posbility: 0.0210
Next Token : List, Posbility: 0.0237
Next Token : let, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0015
Next Token :  l, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0024
Next Token :  pos, Posbility: 0.0058
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0009
Next Token : ad, Posbility: 0.0015
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.0017
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  String, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 0.0009
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0004
Next Token : find, Posbility: 0.0006
Next Token : sort, Posbility: 0.0015
Next Token : filter, Posbility: 0.0059
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : String, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0009
Next Token :  String, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 0.0002
Next Token :  +, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ", Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : l, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : ly, Posbility: 0.0002
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0009
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0087
Next Token : List, Posbility: 0.0208
Next Token : match, Posbility: 0.0236
Next Token : if, Posbility: 0.0303
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0013
Next Token :  l, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0017
Next Token :  pos, Posbility: 0.0045
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0008
Next Token : ad, Posbility: 0.0013
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  ", Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  String, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0008
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0003
Next Token : find, Posbility: 0.0004
Next Token : sort, Posbility: 0.0009
Next Token : filter, Posbility: 0.0041
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0006
Next Token :  String, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ", Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : ly, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0009
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0079
Next Token : match, Posbility: 0.0147
Next Token : if, Posbility: 0.0167
Next Token : List, Posbility: 0.0215
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0009
Next Token :  l, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0015
Next Token :  pos, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0009
Next Token : ad, Posbility: 0.0012
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  String, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Array, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0003
Next Token : reverse, Posbility: 0.0003
Next Token : sort, Posbility: 0.0008
Next Token : filter, Posbility: 0.0032
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0006
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : ly, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0007
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0071
Next Token : if, Posbility: 0.0104
Next Token : match, Posbility: 0.0104
Next Token : List, Posbility: 0.0171
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0008
Next Token :  l, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0013
Next Token :  pos, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0008
Next Token : ad, Posbility: 0.0010
Next Token : x, Posbility: 0.0012
Next Token : (, Posbility: 0.0013
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0002
Next Token : find, Posbility: 0.0003
Next Token : sort, Posbility: 0.0006
Next Token : filter, Posbility: 0.0028
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0004
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0006
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0070
Next Token : match, Posbility: 0.0132
Next Token : if, Posbility: 0.0168
Next Token : List, Posbility: 0.0168
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0007
Next Token :  l, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0010
Next Token :  pos, Posbility: 0.0025
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0006
Next Token : ad, Posbility: 0.0008
Next Token : x, Posbility: 0.0008
Next Token : (, Posbility: 0.0010
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0002
Next Token : sort, Posbility: 0.0005
Next Token : filter, Posbility: 0.0022
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0004
Next Token :  String, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0006
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0072
Next Token : match, Posbility: 0.0081
Next Token : if, Posbility: 0.0092
Next Token : List, Posbility: 0.0152
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0007
Next Token :  l, Posbility: 0.0009
Next Token :  rec, Posbility: 0.0009
Next Token :  pos, Posbility: 0.0022
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0006
Next Token : ad, Posbility: 0.0008
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 0.0010
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0002
Next Token : sort, Posbility: 0.0005
Next Token : filter, Posbility: 0.0022
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0004
Next Token :  String, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0005
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : match, Posbility: 0.0092
Next Token : if, Posbility: 0.0134
Next Token : List, Posbility: 0.0151
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0005
Next Token :  l, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0008
Next Token :  pos, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : ad, Posbility: 0.0007
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0005
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0002
Next Token : sort, Posbility: 0.0004
Next Token : filter, Posbility: 0.0017
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0003
Next Token :  String, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0004
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : match, Posbility: 0.0072
Next Token : if, Posbility: 0.0092
Next Token : List, Posbility: 0.0153
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0004
Next Token :  l, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0007
Next Token :  pos, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : ad, Posbility: 0.0006
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0002
Next Token : sort, Posbility: 0.0004
Next Token : filter, Posbility: 0.0019
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0003
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : l, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0005
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0064
Next Token : match, Posbility: 0.0064
Next Token : if, Posbility: 0.0106
Next Token : List, Posbility: 0.0120
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  pos, Posbility: 0.0013
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : ad, Posbility: 0.0005
Next Token : x, Posbility: 0.0006
Next Token : (, Posbility: 0.0007
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : sort, Posbility: 0.0003
Next Token : filter, Posbility: 0.0015
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0003
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0004
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0050
Next Token : if, Posbility: 0.0064
Next Token : (, Posbility: 0.0072
Next Token : List, Posbility: 0.0153
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0004
Next Token :  len, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  pos, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : ad, Posbility: 0.0006
Next Token : (, Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 0.0002
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0001
Next Token : find, Posbility: 0.0001
Next Token : sort, Posbility: 0.0003
Next Token : filter, Posbility: 0.0017
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "-", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0003
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0057
Next Token : match, Posbility: 0.0057
Next Token : if, Posbility: 0.0073
Next Token : List, Posbility: 0.0120
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  l, Posbility: 0.0005
Next Token :  pos, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0004
Next Token : ad, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ", Posbility: 0.0002
Next Token :  String, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.
 score:False
Error type: noerr
---------------------------
Next Token : find, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : sort, Posbility: 0.0002
Next Token : filter, Posbility: 0.0010
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0002
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ^2, Posbility: 0.0000
Next Token : '^, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ^, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^
 score:False
Error type: noerr
---------------------------
Next Token :  "'", Posbility: 0.0000
Next Token :  ""), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0003
Next Token : "), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y")
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0039
Next Token : (, Posbility: 0.0057
Next Token : if, Posbility: 0.0057
Next Token : List, Posbility: 0.0121
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0004
Next Token :  l, Posbility: 0.0005
Next Token :  pos, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : ad, Posbility: 0.0006
Next Token : x, Posbility: 0.0006
Next Token : (, Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb ending with ly and its positions in a given string. *)
let rec adverb_ending_with_ly s =
  let s = String.trim s in
  let s = String.to_list s in
  let s = List.filter (fun x -> x = "ly") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s = List.map (fun x -> x ^ "y") s in
  let s =
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>