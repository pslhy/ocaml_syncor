code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0076
Next Token :  list, Posbility: 0.0266
Next Token :  , Posbility: 0.1533
Next Token :  count, Posbility: 0.2520
Next Token :  rec, Posbility: 0.4727
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0087
Next Token :  loop, Posbility: 0.0184
Next Token :  list, Posbility: 0.0305
Next Token :  , Posbility: 0.1543
Next Token :  count, Posbility: 0.6953
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0085
Next Token : -, Posbility: 0.0261
Next Token :  , Posbility: 0.0713
Next Token :  =, Posbility: 0.0913
Next Token : _, Posbility: 0.7656
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0199
Next Token : oc, Posbility: 0.0255
Next Token : in, Posbility: 0.0327
Next Token : list, Posbility: 0.1670
Next Token : lists, Posbility: 0.5117
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0199
Next Token : (, Posbility: 0.0542
Next Token : _, Posbility: 0.1475
Next Token :  =, Posbility: 0.1885
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0532
Next Token : (, Posbility: 0.0996
Next Token : x, Posbility: 0.1445
Next Token : lst, Posbility: 0.1445
Next Token : lists, Posbility: 0.1865
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0072
Next Token :  l, Posbility: 0.0072
Next Token :  acc, Posbility: 0.0364
Next Token :  , Posbility: 0.0679
Next Token :  =, Posbility: 0.8281
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0082
Next Token :  function, Posbility: 0.0197
Next Token :  match, Posbility: 0.0325
Next Token :  , Posbility: 0.0879
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0064
Next Token :    , Posbility: 0.0083
Next Token : 	, Posbility: 0.0120
Next Token :     , Posbility: 0.1143
Next Token :   , Posbility: 0.8438
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0075
Next Token : List, Posbility: 0.0488
Next Token : if, Posbility: 0.0552
Next Token : let, Posbility: 0.2480
Next Token : match, Posbility: 0.5938
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0007
Next Token : 
, Posbility: 0.0008
Next Token :  !, Posbility: 0.0008
Next Token :  String, Posbility: 0.0019
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0005
Next Token : Seq, Posbility: 0.0007
Next Token : (, Posbility: 0.0018
Next Token : List, Posbility: 0.0596
Next Token : lists, Posbility: 0.9336
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  @, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0024
Next Token :  , Posbility: 0.0028
Next Token :  [, Posbility: 0.0040
Next Token :  [], Posbility: 0.0066
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0004
Next Token :       , Posbility: 0.0011
Next Token :    , Posbility: 0.0014
Next Token :     , Posbility: 0.0532
Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : |[, Posbility: 0.0002
Next Token : [, Posbility: 0.0177
Next Token : [], Posbility: 0.0177
Next Token : |, Posbility: 0.9648
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0011
Next Token :  nil, Posbility: 0.0081
Next Token :  , Posbility: 0.0172
Next Token :  [, Posbility: 0.0284
Next Token :  [], Posbility: 0.9414
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0031
Next Token :    , Posbility: 0.0039
Next Token :  |, Posbility: 0.0074
Next Token :  =>, Posbility: 0.0083
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0179
Next Token : 
, Posbility: 0.0806
Next Token :  {, Posbility: 0.1328
Next Token :  [], Posbility: 0.1328
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0859
Next Token : Map, Posbility: 0.0859
Next Token : List, Posbility: 0.0977
Next Token : Dict, Posbility: 0.1416
Next Token : (), Posbility: 0.1416
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0079
Next Token :  |, Posbility: 0.0114
Next Token :  --, Posbility: 0.0129
Next Token :  , Posbility: 0.0311
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  
 score:False
Error type: noerr
---------------------------
Next Token : when, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0160
Next Token :  list, Posbility: 0.0205
Next Token :  l, Posbility: 0.0339
Next Token :  [, Posbility: 0.1943
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0811
Next Token : hd, Posbility: 0.1040
Next Token : h, Posbility: 0.1182
Next Token : _, Posbility: 0.2207
Next Token : x, Posbility: 0.3203
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0019
Next Token : :, Posbility: 0.0201
Next Token : s, Posbility: 0.0547
Next Token : ::, Posbility: 0.2451
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0005
Next Token : :, Posbility: 0.0017
Next Token : ->, Posbility: 0.0124
Next Token : ::, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0040
Next Token :  l, Posbility: 0.0179
Next Token :  [], Posbility: 0.0261
Next Token :  rest, Posbility: 0.0708
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0160
Next Token : tail, Posbility: 0.0339
Next Token : y, Posbility: 0.0923
Next Token : _, Posbility: 0.1182
Next Token : x, Posbility: 0.6797
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.0019
Next Token : ', Posbility: 0.0227
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0018
Next Token :   , Posbility: 0.0023
Next Token :  =>, Posbility: 0.0062
Next Token :  when, Posbility: 0.0588
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : if, Posbility: 0.0011
Next Token : ::, Posbility: 0.0330
Next Token : ->, Posbility: 0.9648
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0029
Next Token :  {, Posbility: 0.0214
Next Token :  count, Posbility: 0.0957
Next Token :  , Posbility: 0.1582
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0087
Next Token :    , Posbility: 0.0112
Next Token :      , Posbility: 0.0183
Next Token :     , Posbility: 0.4180
Next Token :       , Posbility: 0.5352
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0211
Next Token : List, Posbility: 0.0239
Next Token : match, Posbility: 0.0574
Next Token : (, Posbility: 0.0942
Next Token : let, Posbility: 0.6992
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  tuple, Posbility: 0.0305
Next Token :  l, Posbility: 0.0393
Next Token :  count, Posbility: 0.1064
Next Token :  rec, Posbility: 0.1206
Next Token :  , Posbility: 0.4785
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0299
Next Token : dict, Posbility: 0.0299
Next Token : counts, Posbility: 0.0339
Next Token : x, Posbility: 0.2207
Next Token : (, Posbility: 0.3203
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : l, Posbility: 0.0496
Next Token : key, Posbility: 0.0496
Next Token : k, Posbility: 0.0562
Next Token : count, Posbility: 0.0928
Next Token : x, Posbility: 0.1963
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0240
Next Token : _, Posbility: 0.0309
Next Token : 1,, Posbility: 0.0396
Next Token : ',, Posbility: 0.0508
Next Token : ,, Posbility: 0.7969
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  num, Posbility: 0.0181
Next Token : n, Posbility: 0.0232
Next Token :  occur, Posbility: 0.0383
Next Token :  count, Posbility: 0.1719
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : _, Posbility: 0.0718
Next Token : y, Posbility: 0.0718
Next Token : x, Posbility: 0.1348
Next Token : c, Posbility: 0.1348
Next Token : n, Posbility: 0.3652
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1), Posbility: 0.0024
Next Token : ,, Posbility: 0.0039
Next Token : x, Posbility: 0.0082
Next Token : _, Posbility: 0.0225
Next Token : ), Posbility: 0.9531
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0003
Next Token :  :=, Posbility: 0.0004
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0078
Next Token :  match, Posbility: 0.0212
Next Token : 
, Posbility: 0.0579
Next Token :  count, Posbility: 0.4277
Next Token :  , Posbility: 0.4277
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0206
Next Token : Map, Posbility: 0.0265
Next Token : List, Posbility: 0.1719
Next Token : x, Posbility: 0.2500
Next Token : (, Posbility: 0.3652
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Tuple, Posbility: 0.0079
Next Token :  , Posbility: 0.0168
Next Token : count, Posbility: 0.0216
Next Token : List, Posbility: 0.0752
Next Token : x, Posbility: 0.8086
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0017
Next Token : s, Posbility: 0.0017
Next Token :  , Posbility: 0.0435
Next Token : ::, Posbility: 0.0718
Next Token : ,, Posbility: 0.8750
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1);, Posbility: 0.0067
Next Token :  1), Posbility: 0.0493
Next Token :  1, Posbility: 0.0811
Next Token :  , Posbility: 0.2207
Next Token :  count, Posbility: 0.6016
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0014
Next Token : (, Posbility: 0.0023
Next Token :  1, Posbility: 0.0029
Next Token :  , Posbility: 0.0593
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : cons, Posbility: 0.0001
Next Token : elements, Posbility: 0.0002
Next Token : one, Posbility: 0.0005
Next Token : list, Posbility: 0.0067
Next Token : lists, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0010
Next Token : _, Posbility: 0.0016
Next Token :  [, Posbility: 0.0027
Next Token : (, Posbility: 0.0228
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : []), Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : lists, Posbility: 0.0014
Next Token : (, Posbility: 0.0598
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token : ),, Posbility: 0.0022
Next Token :  +, Posbility: 0.0022
Next Token : );, Posbility: 0.1182
Next Token : ), Posbility: 0.8750
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0014
Next Token : 
, Posbility: 0.0420
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0006
Next Token : 

, Posbility: 0.0007
Next Token :  {, Posbility: 0.0008
Next Token :  , Posbility: 0.0096
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :     , Posbility: 0.0005
Next Token :         , Posbility: 0.0021
Next Token :      , Posbility: 0.0203
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0361
Next Token : match, Posbility: 0.0464
Next Token : List, Posbility: 0.0674
Next Token : (, Posbility: 0.1836
Next Token : let, Posbility: 0.4414
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  key, Posbility: 0.0178
Next Token :  count, Posbility: 0.0293
Next Token :  new, Posbility: 0.0376
Next Token :  rec, Posbility: 0.1309
Next Token :  , Posbility: 0.5898
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0354
Next Token : dict, Posbility: 0.0659
Next Token : (, Posbility: 0.1235
Next Token : d, Posbility: 0.1797
Next Token : x, Posbility: 0.2041
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0400
Next Token : _, Posbility: 0.0513
Next Token : ,, Posbility: 0.0747
Next Token :  =, Posbility: 0.3789
Next Token : s, Posbility: 0.3789
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0153
Next Token : 2, Posbility: 0.0469
Next Token : _, Posbility: 0.1641
Next Token : ', Posbility: 0.2695
Next Token :  =, Posbility: 0.4453
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0092
Next Token :  ((, Posbility: 0.0092
Next Token : 
, Posbility: 0.0413
Next Token :  [, Posbility: 0.0679
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0378
Next Token : Map, Posbility: 0.0430
Next Token : (, Posbility: 0.0801
Next Token : x, Posbility: 0.2793
Next Token : List, Posbility: 0.4609
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token : (, Posbility: 0.0010
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0150
Next Token : filter, Posbility: 0.0280
Next Token : fold, Posbility: 0.0315
Next Token : rev, Posbility: 0.1416
Next Token : map, Posbility: 0.7188
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0068
Next Token :  ((, Posbility: 0.0068
Next Token :  i, Posbility: 0.0112
Next Token : 2, Posbility: 0.0503
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0053
Next Token : n, Posbility: 0.0077
Next Token : f, Posbility: 0.0391
Next Token : x, Posbility: 0.1367
Next Token : (, Posbility: 0.7852
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Tuple, Posbility: 0.0139
Next Token : f, Posbility: 0.0157
Next Token : x, Posbility: 0.0229
Next Token : function, Posbility: 0.0260
Next Token : fun, Posbility: 0.8594
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0093
Next Token :  i, Posbility: 0.0106
Next Token :  v, Posbility: 0.0369
Next Token :  l, Posbility: 0.0688
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0078
Next Token : _, Posbility: 0.0212
Next Token : y, Posbility: 0.0579
Next Token : (, Posbility: 0.1572
Next Token : x, Posbility: 0.7031
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0056
Next Token : _, Posbility: 0.0082
Next Token :  i, Posbility: 0.0092
Next Token : ', Posbility: 0.0134
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : n, Posbility: 0.0015
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0024
Next Token :  tuple, Posbility: 0.0024
Next Token :  ((, Posbility: 0.0040
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0011
Next Token : let, Posbility: 0.0018
Next Token : Tuple, Posbility: 0.0037
Next Token : x, Posbility: 0.0747
Next Token : (, Posbility: 0.9102
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0004
Next Token : Tuple, Posbility: 0.0005
Next Token : List, Posbility: 0.0009
Next Token :  , Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0003
Next Token : ;, Posbility: 0.0003
Next Token : ',, Posbility: 0.0004
Next Token :  , Posbility: 0.0017
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0114
Next Token : 1, Posbility: 0.0239
Next Token :  0, Posbility: 0.0654
Next Token :  1)), Posbility: 0.3750
Next Token :  , Posbility: 0.4824
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : 2, Posbility: 0.0063
Next Token : ())), Posbility: 0.0410
Next Token : x, Posbility: 0.0986
Next Token : n, Posbility: 0.8242
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0046
Next Token : ), Posbility: 0.0126
Next Token : +1), Posbility: 0.0342
Next Token :  +, Posbility: 0.2520
Next Token : )), Posbility: 0.6875
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n))
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  ~, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0025
Next Token : lists, Posbility: 0.0067
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token :  , Posbility: 0.0014
Next Token :  in, Posbility: 0.0850
Next Token : s, Posbility: 0.9141
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token : ;, Posbility: 0.0024
Next Token : 
, Posbility: 0.0067
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  {, Posbility: 0.0005
Next Token : 

, Posbility: 0.0010
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token :         , Posbility: 0.0008
Next Token :   , Posbility: 0.0008
Next Token :      , Posbility: 0.0292
Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ({, Posbility: 0.0361
Next Token : List, Posbility: 0.0410
Next Token : count, Posbility: 0.0410
Next Token : (, Posbility: 0.2676
Next Token : let, Posbility: 0.4395
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0172
Next Token :  res, Posbility: 0.0172
Next Token :  count, Posbility: 0.0466
Next Token :  rec, Posbility: 0.1270
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0596
Next Token : dict, Posbility: 0.0767
Next Token : d, Posbility: 0.1113
Next Token : lists, Posbility: 0.1113
Next Token : x, Posbility: 0.2676
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0079
Next Token : _, Posbility: 0.0214
Next Token : ,, Posbility: 0.0275
Next Token :  =, Posbility: 0.2021
Next Token : s, Posbility: 0.7070
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0176
Next Token : 2, Posbility: 0.0226
Next Token : ', Posbility: 0.0291
Next Token : _, Posbility: 0.1299
Next Token :  =, Posbility: 0.7500
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0023
Next Token :  count, Posbility: 0.0062
Next Token :  [, Posbility: 0.0062
Next Token : 
, Posbility: 0.0457
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0073
Next Token : (, Posbility: 0.0175
Next Token : x, Posbility: 0.0369
Next Token : Map, Posbility: 0.0417
Next Token : List, Posbility: 0.8398
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.1006
Next Token : filter, Posbility: 0.1138
Next Token : fold, Posbility: 0.1465
Next Token : sort, Posbility: 0.1660
Next Token : map, Posbility: 0.2412
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0053
Next Token : 2, Posbility: 0.0069
Next Token : _, Posbility: 0.0100
Next Token : i, Posbility: 0.0449
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0048
Next Token : List, Posbility: 0.0079
Next Token : f, Posbility: 0.0103
Next Token : x, Posbility: 0.0315
Next Token : (, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0010
Next Token :  fun, Posbility: 0.0010
Next Token : fn, Posbility: 0.0012
Next Token : function, Posbility: 0.0024
Next Token : fun, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0038
Next Token :  l, Posbility: 0.0063
Next Token :  v, Posbility: 0.0071
Next Token :  ((, Posbility: 0.0282
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0032
Next Token : t, Posbility: 0.0053
Next Token : _, Posbility: 0.0144
Next Token : x, Posbility: 0.1758
Next Token : (, Posbility: 0.7852
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : a, Posbility: 0.0144
Next Token : y, Posbility: 0.0144
Next Token : k, Posbility: 0.0391
Next Token : _, Posbility: 0.1064
Next Token : x, Posbility: 0.7852
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ',, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 0.0012
Next Token : 1,, Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : _, Posbility: 0.0014
Next Token :  v, Posbility: 0.0038
Next Token :  count, Posbility: 0.0063
Next Token : n, Posbility: 0.0464
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0039
Next Token : c, Posbility: 0.0039
Next Token : y, Posbility: 0.0039
Next Token : _, Posbility: 0.0287
Next Token : n, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2), Posbility: 0.0012
Next Token : _, Posbility: 0.0019
Next Token : )), Posbility: 0.0019
Next Token : 1), Posbility: 0.0085
Next Token : ), Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  k, Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token :  tuple, Posbility: 0.0002
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  {, Posbility: 0.0023
Next Token :  [, Posbility: 0.0063
Next Token :  ((, Posbility: 0.0464
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0034
Next Token : let, Posbility: 0.0056
Next Token : n, Posbility: 0.0253
Next Token : x, Posbility: 0.1133
Next Token : (, Posbility: 0.8398
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0024
Next Token : Tuple, Posbility: 0.0044
Next Token : List, Posbility: 0.0106
Next Token : n, Posbility: 0.0136
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0015
Next Token :  , Posbility: 0.0051
Next Token :  +, Posbility: 0.0051
Next Token : s, Posbility: 0.0084
Next Token : ,, Posbility: 0.9727
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0039
Next Token :  [, Posbility: 0.0039
Next Token :  Some, Posbility: 0.0039
Next Token :  count, Posbility: 0.0065
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0025
Next Token : List, Posbility: 0.0069
Next Token : x, Posbility: 0.0272
Next Token : (, Posbility: 0.0510
Next Token : n, Posbility: 0.9023
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0227
Next Token :  *, Posbility: 0.0292
Next Token : +1), Posbility: 0.1016
Next Token : )), Posbility: 0.2158
Next Token :  +, Posbility: 0.5859
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0060
Next Token :  count, Posbility: 0.0098
Next Token :  1), Posbility: 0.0162
Next Token :  , Posbility: 0.0728
Next Token :  1)), Posbility: 0.8867
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1))
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0006
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0001
Next Token : List, Posbility: 0.0009
Next Token : lists, Posbility: 0.0066
Next Token : (, Posbility: 0.0178
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 0.0067
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  {, Posbility: 0.0003
Next Token : 

, Posbility: 0.0019
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0006
Next Token :     , Posbility: 0.0007
Next Token :   , Posbility: 0.0016
Next Token :      , Posbility: 0.0292
Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0272
Next Token : x, Posbility: 0.0449
Next Token : count, Posbility: 0.0952
Next Token : let, Posbility: 0.2930
Next Token : (, Posbility: 0.4258
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : count, Posbility: 0.0062
Next Token : List, Posbility: 0.0079
Next Token :  , Posbility: 0.0149
Next Token : (, Posbility: 0.0216
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0016
Next Token : ::, Posbility: 0.0073
Next Token :  , Posbility: 0.0889
Next Token : s, Posbility: 0.2412
Next Token : ,, Posbility: 0.6562
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0053
Next Token :  1, Posbility: 0.0087
Next Token :  sum, Posbility: 0.0087
Next Token :  count, Posbility: 0.1748
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0015
Next Token : (, Posbility: 0.0201
Next Token : x, Posbility: 0.1025
Next Token : List, Posbility: 0.1025
Next Token : n, Posbility: 0.7578
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +1), Posbility: 0.0112
Next Token :  , Posbility: 0.0305
Next Token : ,, Posbility: 0.0305
Next Token : ), Posbility: 0.2891
Next Token :  +, Posbility: 0.6133
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0136
Next Token :  1);, Posbility: 0.0136
Next Token :  , Posbility: 0.1006
Next Token :  1), Posbility: 0.1006
Next Token :  count, Posbility: 0.7422
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : all, Posbility: 0.0000
Next Token : lst, Posbility: 0.0000
Next Token : dict, Posbility: 0.0000
Next Token : list, Posbility: 0.0007
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : List, Posbility: 0.0003
Next Token : lists, Posbility: 0.0024
Next Token : (, Posbility: 0.0179
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  +, Posbility: 0.0009
Next Token : )), Posbility: 0.0063
Next Token : );, Posbility: 0.0469
Next Token : ), Posbility: 0.9414
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0042
Next Token :  |, Posbility: 0.0060
Next Token :  in, Posbility: 0.0737
Next Token : 

, Posbility: 0.2910
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)

 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0132
Next Token :     , Posbility: 0.0281
Next Token : in, Posbility: 0.1182
Next Token : let, Posbility: 0.2832
Next Token :   , Posbility: 0.3223
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  
 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0053
Next Token : (, Posbility: 0.0078
Next Token : ;, Posbility: 0.0349
Next Token : in, Posbility: 0.0396
Next Token : |, Posbility: 0.8984
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0061
Next Token :  l, Posbility: 0.0089
Next Token :  [, Posbility: 0.0352
Next Token :  [], Posbility: 0.0952
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0089
Next Token : List, Posbility: 0.0188
Next Token : (, Posbility: 0.0398
Next Token : _, Posbility: 0.3770
Next Token : x, Posbility: 0.4844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0032
Next Token : :, Posbility: 0.0036
Next Token : ::, Posbility: 0.0344
Next Token : s, Posbility: 0.2539
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : :, Posbility: 0.0050
Next Token : x, Posbility: 0.0121
Next Token : ->, Posbility: 0.0226
Next Token : ::, Posbility: 0.9570
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0016
Next Token :  l, Posbility: 0.0024
Next Token :  [, Posbility: 0.0045
Next Token :  [], Posbility: 0.0226
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0025
Next Token : (), Posbility: 0.0061
Next Token : y, Posbility: 0.0129
Next Token : _, Posbility: 0.2598
Next Token : x, Posbility: 0.7070
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0032
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0021
Next Token : ::, Posbility: 0.0024
Next Token :  =, Posbility: 0.0035
Next Token :  when, Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : :, Posbility: 0.0008
Next Token : if, Posbility: 0.0079
Next Token : ::, Posbility: 0.0752
Next Token : ->, Posbility: 0.9141
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0023
Next Token :  ((, Posbility: 0.0064
Next Token :  count, Posbility: 0.0474
Next Token :  , Posbility: 0.3496
Next Token : 
, Posbility: 0.5781
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0005
Next Token :   , Posbility: 0.0012
Next Token :      , Posbility: 0.0036
Next Token :     , Posbility: 0.0075
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0038
Next Token : if, Posbility: 0.0102
Next Token : match, Posbility: 0.0102
Next Token : (, Posbility: 0.0457
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  count, Posbility: 0.0045
Next Token :  ((, Posbility: 0.0058
Next Token :  rec, Posbility: 0.0058
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0017
Next Token : y, Posbility: 0.0027
Next Token : n, Posbility: 0.0074
Next Token : x, Posbility: 0.1162
Next Token : (, Posbility: 0.8594
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : c, Posbility: 0.0011
Next Token : n, Posbility: 0.0021
Next Token : y, Posbility: 0.0051
Next Token : _, Posbility: 0.0108
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0015
Next Token : 1,, Posbility: 0.0031
Next Token : ',, Posbility: 0.0031
Next Token : s, Posbility: 0.0040
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token : n, Posbility: 0.0019
Next Token :  count, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : c, Posbility: 0.0009
Next Token : y, Posbility: 0.0009
Next Token : _, Posbility: 0.0031
Next Token : x, Posbility: 0.0040
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : ,, Posbility: 0.0009
Next Token : 1), Posbility: 0.0015
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ((, Posbility: 0.0009
Next Token : 
, Posbility: 0.0023
Next Token :  count, Posbility: 0.0471
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Count, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (", Posbility: 0.0001
Next Token : x, Posbility: 0.0032
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : count, Posbility: 0.0003
Next Token : List, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : ::, Posbility: 0.0002
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  0), Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  1), Posbility: 0.0066
Next Token :  count, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : forms, Posbility: 0.0000
Next Token : dict, Posbility: 0.0000
Next Token : one, Posbility: 0.0000
Next Token : list, Posbility: 0.0012
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : []), Posbility: 0.0001
Next Token : lists, Posbility: 0.0009
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 0.0374
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : );, Posbility: 0.0017
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0012
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0021
Next Token : if, Posbility: 0.0058
Next Token : match, Posbility: 0.0058
Next Token : (, Posbility: 0.1162
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0006
Next Token :  count, Posbility: 0.0010
Next Token :  new, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0018
Next Token : y, Posbility: 0.0050
Next Token : n, Posbility: 0.0050
Next Token : (, Posbility: 0.0287
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : ,, Posbility: 0.0008
Next Token :  =, Posbility: 0.0757
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0012
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0015
Next Token :  ((, Posbility: 0.0024
Next Token : 
, Posbility: 0.0040
Next Token :  [, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : Map, Posbility: 0.0023
Next Token : (, Posbility: 0.0171
Next Token : x, Posbility: 0.0464
Next Token : List, Posbility: 0.9297
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0019
Next Token : concat, Posbility: 0.0019
Next Token : append, Posbility: 0.0024
Next Token : filter, Posbility: 0.0051
Next Token : map, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : 
, Posbility: 0.0008
Next Token : i, Posbility: 0.0012
Next Token :  ((, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : f, Posbility: 0.0005
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : fn, Posbility: 0.0002
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0002
Next Token :  l, Posbility: 0.0003
Next Token :  v, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0009
Next Token : y, Posbility: 0.0023
Next Token : (, Posbility: 0.0471
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : ', Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0002
Next Token :  (*, Posbility: 0.0003
Next Token :  [, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0003
Next Token : List, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : x, Posbility: 0.0085
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : Tuple, Posbility: 0.0002
Next Token : List, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :  *, Posbility: 0.0005
Next Token : s, Posbility: 0.0005
Next Token :  +, Posbility: 0.0017
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token :  count, Posbility: 0.0009
Next Token :  1)), Posbility: 0.0015
Next Token :  0, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : -, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0032
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0009
Next Token :  , Posbility: 0.0063
Next Token : ), Posbility: 0.0063
Next Token :  +, Posbility: 0.0466
Next Token : )), Posbility: 0.9375
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n))
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : lists, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0025
Next Token : if, Posbility: 0.0041
Next Token : count, Posbility: 0.0041
Next Token : (, Posbility: 0.3691
Next Token : let, Posbility: 0.6094
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0007
Next Token :  new, Posbility: 0.0013
Next Token :  count, Posbility: 0.0022
Next Token :  rec, Posbility: 0.0035
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0011
Next Token : y, Posbility: 0.0024
Next Token : n, Posbility: 0.0051
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : ,, Posbility: 0.0004
Next Token :  =, Posbility: 0.0374
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : 2, Posbility: 0.0005
Next Token : ', Posbility: 0.0008
Next Token : _, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0007
Next Token :  [, Posbility: 0.0019
Next Token :  count, Posbility: 0.0024
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Tuple, Posbility: 0.0002
Next Token : Map, Posbility: 0.0013
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0046
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0024
Next Token : concat, Posbility: 0.0040
Next Token : filter, Posbility: 0.0065
Next Token : fold, Posbility: 0.0065
Next Token : map, Posbility: 0.9688
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0007
Next Token : i, Posbility: 0.0007
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0001
Next Token : function, Posbility: 0.0003
Next Token : fn, Posbility: 0.0003
Next Token : let, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 0.0179
Next Token : (, Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : k, Posbility: 0.0003
Next Token : a, Posbility: 0.0006
Next Token : y, Posbility: 0.0007
Next Token : _, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token : n, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : m, Posbility: 0.0003
Next Token : _, Posbility: 0.0008
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 2), Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 1), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  {, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : let, Posbility: 0.0007
Next Token : n, Posbility: 0.0019
Next Token : x, Posbility: 0.0028
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : Tuple, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : List, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 0.0009
Next Token :  +, Posbility: 0.0028
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token :  1)), Posbility: 0.0005
Next Token :  0, Posbility: 0.0009
Next Token :  count, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token : x, Posbility: 0.0012
Next Token : (, Posbility: 0.0019
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token :  *, Posbility: 0.0009
Next Token :  , Posbility: 0.0066
Next Token : )), Posbility: 0.0066
Next Token :  +, Posbility: 0.9844
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0009
Next Token :  1), Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  count, Posbility: 0.0066
Next Token :  1)), Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1))
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0032
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0024
Next Token : x, Posbility: 0.0045
Next Token : count, Posbility: 0.0066
Next Token : let, Posbility: 0.1167
Next Token : (, Posbility: 0.8633
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Tuple, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : List, Posbility: 0.0012
Next Token : (, Posbility: 0.0059
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : s, Posbility: 0.0022
Next Token :  +, Posbility: 0.0046
Next Token : ,, Posbility: 0.9922
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token :  1), Posbility: 0.0003
Next Token :  1, Posbility: 0.0025
Next Token :  count, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.0013
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0001
Next Token :  *, Posbility: 0.0004
Next Token :  , Posbility: 0.0011
Next Token : ), Posbility: 0.0229
Next Token :  +, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  1, Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token :  1), Posbility: 0.0066
Next Token :  count, Posbility: 0.9766
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : listing, Posbility: 0.0000
Next Token : dict, Posbility: 0.0000
Next Token : lst, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : []), Posbility: 0.0000
Next Token : lists, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : )), Posbility: 0.0024
Next Token :  +, Posbility: 0.0024
Next Token : );, Posbility: 0.0109
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0013
Next Token :  , Posbility: 0.0021
Next Token :  in, Posbility: 0.0427
Next Token : 
, Posbility: 0.3574
Next Token : 

, Posbility: 0.5898
---------------------------
code:
 (* Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. *)
let rec count_lists lists =
  match lists with
  | [] -> ()
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)
  | x :: xs ->
      let (x, n) = (x, count_lists xs) in
      let xs = List.map (fun x -> (x, n)) xs in
      let xs = List.map (fun (x, n) -> (x, n + 1)) xs in
      (x, n + count_lists xs)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :106.49232459068298

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>