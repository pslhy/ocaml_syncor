code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  make, Posbility: 0.0146
Next Token :  list, Posbility: 0.0240
Next Token :  , Posbility: 0.1777
Next Token :  inter, Posbility: 0.2930
Next Token :  rec, Posbility: 0.3770
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  make, Posbility: 0.0199
Next Token :  list, Posbility: 0.0255
Next Token :  loop, Posbility: 0.0327
Next Token :  inter, Posbility: 0.3516
Next Token :  , Posbility: 0.3516
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0493
Next Token : flat, Posbility: 0.0557
Next Token : f, Posbility: 0.0811
Next Token : append, Posbility: 0.0811
Next Token : flatten, Posbility: 0.0811
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0114
Next Token : 3, Posbility: 0.1572
Next Token : _, Posbility: 0.2295
Next Token :  =, Posbility: 0.2295
Next Token :  , Posbility: 0.2598
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0447
Next Token : :, Posbility: 0.0649
Next Token : (, Posbility: 0.0835
Next Token : lst, Posbility: 0.0835
Next Token : x, Posbility: 0.3301
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0054
Next Token : 1, Posbility: 0.0069
Next Token :  =, Posbility: 0.0742
Next Token :  , Posbility: 0.3340
Next Token : s, Posbility: 0.5508
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0079
Next Token : 1, Posbility: 0.0215
Next Token : s, Posbility: 0.0312
Next Token :  =, Posbility: 0.3379
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0023
Next Token : z, Posbility: 0.0023
Next Token : m, Posbility: 0.0030
Next Token : x, Posbility: 0.0219
Next Token : y, Posbility: 0.9297
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : z, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  acc, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  =, Posbility: 0.0203
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : _, Posbility: 0.0015
Next Token : x, Posbility: 0.0022
Next Token : y, Posbility: 0.0058
Next Token : z, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0063
Next Token :  result, Posbility: 0.0104
Next Token :  acc, Posbility: 0.0410
Next Token :  , Posbility: 0.0674
Next Token :  =, Posbility: 0.8242
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0064
Next Token :  function, Posbility: 0.0082
Next Token :  match, Posbility: 0.0369
Next Token :  , Posbility: 0.1001
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0044
Next Token :    , Posbility: 0.0072
Next Token : 	, Posbility: 0.0093
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8359
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0068
Next Token : List, Posbility: 0.0645
Next Token : if, Posbility: 0.1201
Next Token : let, Posbility: 0.1543
Next Token : match, Posbility: 0.6094
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0017
Next Token :  String, Posbility: 0.0027
Next Token : 
, Posbility: 0.0051
Next Token :  [, Posbility: 0.0108
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0064
Next Token : z, Posbility: 0.0083
Next Token : List, Posbility: 0.1006
Next Token : (, Posbility: 0.1143
Next Token : x, Posbility: 0.7461
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  with, Posbility: 0.0013
Next Token : ,, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0025
Next Token :  @, Posbility: 0.0067
Next Token :  , Posbility: 0.0110
Next Token :  with, Posbility: 0.3652
Next Token : ,, Posbility: 0.6016
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : y, Posbility: 0.0374
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.0007
Next Token : z, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  &, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  and, Posbility: 0.0010
Next Token :  with, Posbility: 0.0140
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : z, Posbility: 0.0002
Next Token :  and, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0005
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token :  with, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token : ,, Posbility: 0.0009
Next Token : 
, Posbility: 0.0067
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token : 

, Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0003
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0014
Next Token :     , Posbility: 0.0532
Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0010
Next Token : ([], Posbility: 0.0031
Next Token : (, Posbility: 0.0084
Next Token : [, Posbility: 0.0177
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0214
Next Token :  [], Posbility: 0.0583
Next Token :  , Posbility: 0.0962
Next Token :  [, Posbility: 0.0962
Next Token :  [],, Posbility: 0.7109
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [],
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :    , Posbility: 0.0008
Next Token : [],, Posbility: 0.0159
Next Token :  [], Posbility: 0.0204
Next Token :  , Posbility: 0.0913
Next Token :  [],, Posbility: 0.8672
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [],
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0009
Next Token : [], Posbility: 0.0009
Next Token :  , Posbility: 0.0176
Next Token :  [],, Posbility: 0.0176
Next Token :  [], Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0023
Next Token :   , Posbility: 0.0063
Next Token :  =>, Posbility: 0.0172
Next Token :  |, Posbility: 0.0172
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : →, Posbility: 0.0002
Next Token : ::, Posbility: 0.0008
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token : 
, Posbility: 0.0103
Next Token :  [];, Posbility: 0.0103
Next Token :  , Posbility: 0.0461
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0013
Next Token :   , Posbility: 0.0031
Next Token :  , Posbility: 0.0084
Next Token :  |, Posbility: 0.0138
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []

 score:False
Error type: noerr
---------------------------
Next Token : |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : ;, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0126
Next Token :  [], Posbility: 0.0126
Next Token :  [],, Posbility: 0.1055
Next Token :  [, Posbility: 0.3691
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0320
Next Token : hd, Posbility: 0.0413
Next Token : h, Posbility: 0.0413
Next Token : _, Posbility: 0.0986
Next Token : x, Posbility: 0.7305
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0141
Next Token : ,, Posbility: 0.0918
Next Token :  , Posbility: 0.1943
Next Token : ::, Posbility: 0.3203
Next Token : s, Posbility: 0.3203
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0498
Next Token : ::, Posbility: 0.1055
Next Token : ', Posbility: 0.1738
Next Token : ,, Posbility: 0.1973
Next Token : ',, Posbility: 0.3242
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : y, Posbility: 0.0021
Next Token :  [, Posbility: 0.0031
Next Token :  [], Posbility: 0.0075
Next Token :  [],, Posbility: 0.1172
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (),, Posbility: 0.0005
Next Token : yy, Posbility: 0.0005
Next Token : _, Posbility: 0.0175
Next Token : x, Posbility: 0.0287
Next Token : y, Posbility: 0.9492
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : ,, Posbility: 0.0004
Next Token : ',, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1',, Posbility: 0.0005
Next Token : 1,, Posbility: 0.0009
Next Token : ', Posbility: 0.0024
Next Token : ,, Posbility: 0.0179
Next Token : ',, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0012
Next Token :  [],, Posbility: 0.0015
Next Token :  [], Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 0.0004
Next Token : _, Posbility: 0.0041
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0006
Next Token : ':, Posbility: 0.0007
Next Token : ',, Posbility: 0.0219
Next Token :  , Posbility: 0.0461
Next Token : ', Posbility: 0.9258
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0019
Next Token :  when, Posbility: 0.0019
Next Token :  |, Posbility: 0.0024
Next Token :  =>, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : →, Posbility: 0.0001
Next Token : ::, Posbility: 0.0067
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0015
Next Token :   , Posbility: 0.0029
Next Token :  [, Posbility: 0.0659
Next Token :  , Posbility: 0.4297
Next Token : 
, Posbility: 0.4863
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0081
Next Token :      , Posbility: 0.0092
Next Token :   , Posbility: 0.0104
Next Token :     , Posbility: 0.2363
Next Token :       , Posbility: 0.7266
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0347
Next Token : [, Posbility: 0.0737
Next Token : List, Posbility: 0.1377
Next Token : x, Posbility: 0.2266
Next Token : let, Posbility: 0.4238
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0151
Next Token :  len, Posbility: 0.0320
Next Token :  l, Posbility: 0.0413
Next Token :  rec, Posbility: 0.2090
Next Token :  , Posbility: 0.5000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0288
Next Token : f, Posbility: 0.0369
Next Token : z, Posbility: 0.0417
Next Token : y, Posbility: 0.0781
Next Token : x, Posbility: 0.5078
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0112
Next Token : ', Posbility: 0.0143
Next Token : ,, Posbility: 0.0569
Next Token :  =, Posbility: 0.1543
Next Token : s, Posbility: 0.6914
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0596
Next Token : ',, Posbility: 0.0864
Next Token : ,, Posbility: 0.1108
Next Token :  =, Posbility: 0.2656
Next Token : ', Posbility: 0.3027
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0123
Next Token : _, Posbility: 0.0260
Next Token : ',, Posbility: 0.1924
Next Token : ', Posbility: 0.3594
Next Token :  =, Posbility: 0.3594
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0037
Next Token :  [, Posbility: 0.0165
Next Token : 
, Posbility: 0.0271
Next Token :  inter, Posbility: 0.0271
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0087
Next Token : if, Posbility: 0.0087
Next Token : List, Posbility: 0.0393
Next Token : x, Posbility: 0.1064
Next Token : flatten, Posbility: 0.7891
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token :  [, Posbility: 0.0019
Next Token : _, Posbility: 0.0028
Next Token :  ~, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0002
Next Token : ([], Posbility: 0.0003
Next Token : y, Posbility: 0.0040
Next Token : (, Posbility: 0.0109
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0032
Next Token :  '', Posbility: 0.0037
Next Token : 1, Posbility: 0.0069
Next Token : ', Posbility: 0.4238
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0021
Next Token : ([], Posbility: 0.0021
Next Token : (, Posbility: 0.0153
Next Token : x, Posbility: 0.1445
Next Token : y, Posbility: 0.8320
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0011
Next Token : 
, Posbility: 0.0027
Next Token :  in, Posbility: 0.0039
Next Token : ', Posbility: 0.0369
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.0041
Next Token : z, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0026
Next Token : 
, Posbility: 0.0054
Next Token : ';, Posbility: 0.0061
Next Token :  in, Posbility: 0.4883
Next Token : ', Posbility: 0.4883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.0259
Next Token :  in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0004
Next Token :     , Posbility: 0.0008
Next Token :         , Posbility: 0.0009
Next Token :      , Posbility: 0.0052
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0269
Next Token : if, Posbility: 0.0304
Next Token : List, Posbility: 0.0569
Next Token : x, Posbility: 0.1201
Next Token : let, Posbility: 0.6914
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mut, Posbility: 0.0009
Next Token :  [, Posbility: 0.0013
Next Token :  len, Posbility: 0.0031
Next Token :  rec, Posbility: 0.0084
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0022
Next Token : flat, Posbility: 0.0022
Next Token : x, Posbility: 0.0444
Next Token : z, Posbility: 0.0444
Next Token : y, Posbility: 0.8945
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 0.0007
Next Token : z, Posbility: 0.0009
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0005
Next Token : 1, Posbility: 0.0010
Next Token : ',, Posbility: 0.0012
Next Token :  =, Posbility: 0.0140
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  inter, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : Flatten, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0006
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0002
Next Token : z, Posbility: 0.0014
Next Token : (, Posbility: 0.0050
Next Token : y, Posbility: 0.0371
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0009
Next Token :  , Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : [1], Posbility: 0.0006
Next Token :  '', Posbility: 0.0012
Next Token :  , Posbility: 0.3750
Next Token : ', Posbility: 0.6211
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  '', Posbility: 0.0002
Next Token : ', Posbility: 0.0005
Next Token :  [], Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0003
Next Token : x, Posbility: 0.0009
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0002
Next Token :  '', Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token : ', Posbility: 0.1816
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0009
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ’, Posbility: 0.0001
Next Token : ',, Posbility: 0.0003
Next Token : ';, Posbility: 0.0003
Next Token :  in, Posbility: 0.0601
Next Token : ', Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0095
Next Token : [, Posbility: 0.0201
Next Token : List, Posbility: 0.0201
Next Token : x, Posbility: 0.0703
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  result, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.0085
Next Token : z, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token :  =, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : Flatten, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : z, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ', Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zz, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ’, Posbility: 0.0000
Next Token :  in, Posbility: 0.0059
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0007
Next Token :         , Posbility: 0.0008
Next Token :   , Posbility: 0.0015
Next Token :      , Posbility: 0.0109
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0378
Next Token : List, Posbility: 0.0908
Next Token : [, Posbility: 0.1699
Next Token : let, Posbility: 0.1924
Next Token : x, Posbility: 0.4629
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      x
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs
 score:False
Error type: noerr
---------------------------
Next Token : ':, Posbility: 0.0105
Next Token : ',, Posbility: 0.0532
Next Token :  ++, Posbility: 0.0879
Next Token :  , Posbility: 0.3066
Next Token : ', Posbility: 0.5039
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs'
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0050
Next Token : ::, Posbility: 0.0120
Next Token :  +, Posbility: 0.0136
Next Token :  , Posbility: 0.4512
Next Token :  ++, Posbility: 0.5117
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0004
Next Token :  ~, Posbility: 0.0005
Next Token :  ', Posbility: 0.0008
Next Token :  [, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0003
Next Token : x, Posbility: 0.0024
Next Token : z, Posbility: 0.0040
Next Token : (, Posbility: 0.0067
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ y
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0002
Next Token : ',, Posbility: 0.0003
Next Token : '+, Posbility: 0.0004
Next Token : ';, Posbility: 0.0005
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys'
 score:False
Error type: noerr
---------------------------
Next Token :  --, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token : ++, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  ++, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ z
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs
 score:False
Error type: noerr
---------------------------
Next Token : ');, Posbility: 0.0004
Next Token : 
, Posbility: 0.0036
Next Token : '), Posbility: 0.0036
Next Token : ';, Posbility: 0.0059
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0018
Next Token :  in, Posbility: 0.0021
Next Token :  , Posbility: 0.0024
Next Token : 

, Posbility: 0.1465
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0084
Next Token : let, Posbility: 0.0188
Next Token : |, Posbility: 0.0258
Next Token : in, Posbility: 0.0618
Next Token :   , Posbility: 0.8008
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : ;, Posbility: 0.0159
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0030
Next Token :  [],, Posbility: 0.0105
Next Token :  [], Posbility: 0.0105
Next Token :  [, Posbility: 0.0222
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0032
Next Token : h, Posbility: 0.0067
Next Token : (, Posbility: 0.0110
Next Token : _, Posbility: 0.0820
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0038
Next Token : ',, Posbility: 0.0079
Next Token :  , Posbility: 0.0168
Next Token : ,, Posbility: 0.0356
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1,, Posbility: 0.0183
Next Token :  , Posbility: 0.0388
Next Token : ', Posbility: 0.0820
Next Token : ,, Posbility: 0.2236
Next Token : ',, Posbility: 0.6094
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0003
Next Token :  [, Posbility: 0.0024
Next Token :  [], Posbility: 0.0066
Next Token :  [],, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0003
Next Token : _, Posbility: 0.0176
Next Token : x, Posbility: 0.0176
Next Token : y, Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : ',, Posbility: 0.0008
Next Token : ,, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0035
Next Token : 1,, Posbility: 0.0035
Next Token : ', Posbility: 0.0156
Next Token : ,, Posbility: 0.1157
Next Token : ',, Posbility: 0.8555
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0008
Next Token :  [],, Posbility: 0.0014
Next Token :  [, Posbility: 0.0101
Next Token :  [], Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0020
Next Token : x, Posbility: 0.0398
Next Token : y, Posbility: 0.0398
Next Token : _, Posbility: 0.1079
Next Token : z, Posbility: 0.7969
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0007
Next Token : ',, Posbility: 0.0022
Next Token :  , Posbility: 0.0040
Next Token : ', Posbility: 0.0040
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0065
Next Token : 1, Posbility: 0.0095
Next Token : ',, Posbility: 0.0547
Next Token :  , Posbility: 0.2451
Next Token : ', Posbility: 0.6680
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0041
Next Token : ',, Posbility: 0.0052
Next Token :  |, Posbility: 0.0087
Next Token : ', Posbility: 0.0933
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token : <, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : ::, Posbility: 0.0125
Next Token : ->, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  [, Posbility: 0.0014
Next Token :  match, Posbility: 0.0030
Next Token :  , Posbility: 0.0530
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0005
Next Token :      , Posbility: 0.0008
Next Token :   , Posbility: 0.0040
Next Token :     , Posbility: 0.0140
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : if, Posbility: 0.0105
Next Token : match, Posbility: 0.0105
Next Token : x, Posbility: 0.0173
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0011
Next Token :  new, Posbility: 0.0013
Next Token :  len, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0014
Next Token : (, Posbility: 0.0038
Next Token : y, Posbility: 0.0280
Next Token : z, Posbility: 0.0280
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : ,, Posbility: 0.0015
Next Token : ', Posbility: 0.0022
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0040
Next Token : ',, Posbility: 0.0181
Next Token : ,, Posbility: 0.0297
Next Token :  =, Posbility: 0.1709
Next Token : ', Posbility: 0.7656
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : ',, Posbility: 0.0050
Next Token : ', Posbility: 0.0330
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0024
Next Token :  inter, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0009
Next Token : flat, Posbility: 0.0009
Next Token : x, Posbility: 0.0178
Next Token : flatten, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0005
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : z, Posbility: 0.0003
Next Token : (, Posbility: 0.0025
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0005
Next Token :  [], Posbility: 0.0005
Next Token : 1, Posbility: 0.0008
Next Token : ', Posbility: 0.1187
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0000
Next Token : z, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0179
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token : ', Posbility: 0.0601
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0067
Next Token : z, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : ';, Posbility: 0.0004
Next Token : ',, Posbility: 0.0024
Next Token :  in, Posbility: 0.0085
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : if, Posbility: 0.0024
Next Token : x, Posbility: 0.0066
Next Token : y, Posbility: 0.0066
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  mut, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0176
Next Token : z, Posbility: 0.0176
Next Token : y, Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : z, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0008
Next Token : ',, Posbility: 0.0010
Next Token : 1, Posbility: 0.0012
Next Token :  =, Posbility: 0.0085
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0009
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0005
Next Token :  inter, Posbility: 0.0005
Next Token :  [, Posbility: 0.0007
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : Flatten, Posbility: 0.0003
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.0041
Next Token : flatten, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0009
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0179
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : ',, Posbility: 0.0003
Next Token :  , Posbility: 0.1191
Next Token : ', Posbility: 0.8789
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0085
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0015
Next Token : y, Posbility: 0.0015
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : ',, Posbility: 0.0002
Next Token :  in, Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0004
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0064
Next Token : y, Posbility: 0.0064
Next Token : z, Posbility: 0.0064
Next Token : x, Posbility: 0.0173
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  mut, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0031
Next Token : x, Posbility: 0.0140
Next Token : z, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : ',, Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 0.0046
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  [, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  [], Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : z, Posbility: 0.0002
Next Token : x, Posbility: 0.0019
Next Token : flatten, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0086
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token :  , Posbility: 0.0046
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0140
Next Token : (, Posbility: 0.0381
Next Token : y, Posbility: 0.0381
Next Token : let, Posbility: 0.1035
Next Token : x, Posbility: 0.7656
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0012
Next Token : ++, Posbility: 0.0013
Next Token : ',, Posbility: 0.0040
Next Token :  ++, Posbility: 0.0040
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs'
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0004
Next Token :  +, Posbility: 0.0010
Next Token : ++, Posbility: 0.0015
Next Token :  , Posbility: 0.0140
Next Token :  ++, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0005
Next Token :  ~, Posbility: 0.0006
Next Token :  inter, Posbility: 0.0008
Next Token :  [, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : z, Posbility: 0.0024
Next Token : (, Posbility: 0.0066
Next Token : flatten, Posbility: 0.0066
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ y
 score:False
Error type: noerr
---------------------------
Next Token : ~, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys
 score:False
Error type: noerr
---------------------------
Next Token : '+, Posbility: 0.0002
Next Token : ';, Posbility: 0.0003
Next Token : ++, Posbility: 0.0003
Next Token : ',, Posbility: 0.0004
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys'
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0011
Next Token : 
, Posbility: 0.0015
Next Token :  +, Posbility: 0.0019
Next Token :  , Posbility: 0.0096
Next Token :  ++, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0009
Next Token : y, Posbility: 0.0024
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.0066
Next Token : z, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ z
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs
 score:False
Error type: noerr
---------------------------
Next Token : '), Posbility: 0.0035
Next Token : ';, Posbility: 0.0040
Next Token : 

, Posbility: 0.0065
Next Token : 
, Posbility: 0.0122
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0016
Next Token :  , Posbility: 0.0090
Next Token : 

, Posbility: 0.2637
Next Token :  ++, Posbility: 0.3379
Next Token : 
, Posbility: 0.3828
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0381
Next Token : in, Posbility: 0.0520
Next Token : ;, Posbility: 0.0591
Next Token : let, Posbility: 0.1104
Next Token :   , Posbility: 0.3613
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0015
Next Token : (, Posbility: 0.0026
Next Token : 
, Posbility: 0.0052
Next Token : ;, Posbility: 0.0052
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0017
Next Token :  [],, Posbility: 0.0161
Next Token :  [, Posbility: 0.0208
Next Token :  [], Posbility: 0.0640
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0051
Next Token : (, Posbility: 0.0058
Next Token : head, Posbility: 0.0058
Next Token : _, Posbility: 0.1025
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0063
Next Token : ',, Posbility: 0.0082
Next Token :  , Posbility: 0.0134
Next Token : ,, Posbility: 0.0172
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1,, Posbility: 0.0175
Next Token :  , Posbility: 0.0781
Next Token : ', Posbility: 0.1289
Next Token : ,, Posbility: 0.1660
Next Token : ',, Posbility: 0.5781
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0004
Next Token :  [, Posbility: 0.0012
Next Token :  [],, Posbility: 0.0019
Next Token :  [], Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0008
Next Token : _, Posbility: 0.0452
Next Token : x, Posbility: 0.0452
Next Token : y, Posbility: 0.9062
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : ',, Posbility: 0.0009
Next Token : ,, Posbility: 0.0012
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0017
Next Token : 1,, Posbility: 0.0017
Next Token : ', Posbility: 0.0273
Next Token : ,, Posbility: 0.0579
Next Token : ',, Posbility: 0.9062
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0008
Next Token :  None, Posbility: 0.0014
Next Token :  [, Posbility: 0.0081
Next Token :  [], Posbility: 0.0593
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0033
Next Token : y, Posbility: 0.0146
Next Token : x, Posbility: 0.0659
Next Token : _, Posbility: 0.1084
Next Token : z, Posbility: 0.8008
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : ',, Posbility: 0.0005
Next Token : ', Posbility: 0.0032
Next Token :  , Posbility: 0.0036
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0049
Next Token : 1, Posbility: 0.0134
Next Token : ',, Posbility: 0.0283
Next Token :  , Posbility: 0.2090
Next Token : ', Posbility: 0.7305
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0016
Next Token : ::, Posbility: 0.0016
Next Token :  |, Posbility: 0.0051
Next Token : ', Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : ::, Posbility: 0.0028
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  [, Posbility: 0.0007
Next Token :  match, Posbility: 0.0039
Next Token :  , Posbility: 0.0471
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0010
Next Token :   , Posbility: 0.0017
Next Token :     , Posbility: 0.0075
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0071
Next Token : if, Posbility: 0.0071
Next Token : match, Posbility: 0.0117
Next Token : x, Posbility: 0.0248
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0006
Next Token :  l, Posbility: 0.0006
Next Token :  len, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0015
Next Token : z, Posbility: 0.0084
Next Token : y, Posbility: 0.0108
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : ,, Posbility: 0.0003
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0023
Next Token : ',, Posbility: 0.0038
Next Token : ,, Posbility: 0.0080
Next Token :  =, Posbility: 0.0591
Next Token : ', Posbility: 0.9219
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ',, Posbility: 0.0005
Next Token : ', Posbility: 0.0036
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0007
Next Token :  inter, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : flat, Posbility: 0.0002
Next Token : concat, Posbility: 0.0002
Next Token : x, Posbility: 0.0067
Next Token : flatten, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0179
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0025
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0007
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ',, Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.0041
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  mut, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0066
Next Token : z, Posbility: 0.0109
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token : ',, Posbility: 0.0004
Next Token : 1, Posbility: 0.0009
Next Token :  =, Posbility: 0.0022
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  inter, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : Flatten, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0010
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0003
Next Token : ',, Posbility: 0.0003
Next Token :  , Posbility: 0.0374
Next Token : ', Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0015
Next Token : z, Posbility: 0.0015
Next Token : x, Posbility: 0.0067
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  mut, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.0046
Next Token : z, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  [], Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : x, Posbility: 0.0010
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0017
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0028
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : zz, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0063
Next Token : y, Posbility: 0.0063
Next Token : (, Posbility: 0.0104
Next Token : let, Posbility: 0.0283
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token :  ++, Posbility: 0.0002
Next Token : ',, Posbility: 0.0005
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs'
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0004
Next Token : ++, Posbility: 0.0006
Next Token :  , Posbility: 0.0032
Next Token :  ++, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : !, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : z, Posbility: 0.0003
Next Token : flatten, Posbility: 0.0009
Next Token : (, Posbility: 0.0015
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ y
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys
 score:False
Error type: noerr
---------------------------
Next Token : '+, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys'
 score:False
Error type: noerr
---------------------------
Next Token :  --, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token : ++, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :  ++, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ z
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs
 score:False
Error type: noerr
---------------------------
Next Token : ';, Posbility: 0.0006
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.0028
Next Token : '), Posbility: 0.0028
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0014
Next Token :  , Posbility: 0.0024
Next Token :  ++, Posbility: 0.0138
Next Token : 

, Posbility: 0.4570
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0209
Next Token : in, Posbility: 0.0322
Next Token : ;, Posbility: 0.0532
Next Token : let, Posbility: 0.1445
Next Token :   , Posbility: 0.2246
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0042
Next Token : ;, Posbility: 0.0047
Next Token : (, Posbility: 0.0054
Next Token : 
, Posbility: 0.0137
Next Token : |, Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0014
Next Token :  [, Posbility: 0.0195
Next Token :  [],, Posbility: 0.0322
Next Token :  [], Posbility: 0.0991
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0044
Next Token : head, Posbility: 0.0050
Next Token : (, Posbility: 0.0057
Next Token : _, Posbility: 0.1143
Next Token : x, Posbility: 0.8438
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0063
Next Token :  , Posbility: 0.0134
Next Token : ',, Posbility: 0.0134
Next Token : ,, Posbility: 0.0171
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1,, Posbility: 0.0198
Next Token :  , Posbility: 0.0884
Next Token : ', Posbility: 0.1455
Next Token : ,, Posbility: 0.1875
Next Token : ',, Posbility: 0.5078
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0017
Next Token :  [, Posbility: 0.0019
Next Token :  [],, Posbility: 0.0025
Next Token :  [], Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0009
Next Token : _, Posbility: 0.0284
Next Token : x, Posbility: 0.0284
Next Token : y, Posbility: 0.9414
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token : ',, Posbility: 0.0010
Next Token : ,, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0017
Next Token : 2,, Posbility: 0.0017
Next Token : ', Posbility: 0.0273
Next Token : ,, Posbility: 0.0579
Next Token : ',, Posbility: 0.9062
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0009
Next Token :  None, Posbility: 0.0011
Next Token :  [, Posbility: 0.0082
Next Token :  [], Posbility: 0.0369
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0035
Next Token : y, Posbility: 0.0096
Next Token : x, Posbility: 0.0432
Next Token : _, Posbility: 0.0713
Next Token : z, Posbility: 0.8672
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0004
Next Token : ,, Posbility: 0.0004
Next Token : ', Posbility: 0.0022
Next Token :  , Posbility: 0.0025
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0084
Next Token : 1, Posbility: 0.0084
Next Token : ',, Posbility: 0.0378
Next Token :  , Posbility: 0.1689
Next Token : ', Posbility: 0.7578
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0011
Next Token : ',, Posbility: 0.0021
Next Token :  |, Posbility: 0.0065
Next Token : ', Posbility: 0.0200
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : ::, Posbility: 0.0015
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  [, Posbility: 0.0010
Next Token :  match, Posbility: 0.0034
Next Token :  , Posbility: 0.0530
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0010
Next Token :      , Posbility: 0.0012
Next Token :     , Posbility: 0.0046
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0038
Next Token : (, Posbility: 0.0063
Next Token : match, Posbility: 0.0081
Next Token : x, Posbility: 0.0221
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  len, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : z, Posbility: 0.0031
Next Token : y, Posbility: 0.0067
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : ,, Posbility: 0.0003
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0027
Next Token : ',, Posbility: 0.0030
Next Token : ,, Posbility: 0.0072
Next Token :  =, Posbility: 0.0366
Next Token : ', Posbility: 0.9453
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ',, Posbility: 0.0003
Next Token : ', Posbility: 0.0022
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  inter, Posbility: 0.0006
Next Token :  [, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : flat, Posbility: 0.0003
Next Token : concat, Posbility: 0.0003
Next Token : x, Posbility: 0.0052
Next Token : flatten, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0010
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ',, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.0032
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : z, Posbility: 0.0041
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ',, Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 0.0012
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  inter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flat, Posbility: 0.0001
Next Token : Flatten, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0009
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ',, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token :  , Posbility: 0.0110
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.0041
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  mut, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.0028
Next Token : z, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 0.0007
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0006
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0013
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0019
Next Token : y, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.0109
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : ',, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs'
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token : ++, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  ++, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : z, Posbility: 0.0001
Next Token : flatten, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ y
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys
 score:False
Error type: noerr
---------------------------
Next Token :  --, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ++, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys'
 score:False
Error type: noerr
---------------------------
Next Token :  --, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ++, Posbility: 0.0004
Next Token :  ++, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ z
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs
 score:False
Error type: noerr
---------------------------
Next Token : ';, Posbility: 0.0003
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 0.0015
Next Token : '), Posbility: 0.0015
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0017
Next Token :  , Posbility: 0.0017
Next Token :  ++, Posbility: 0.0024
Next Token : 

, Posbility: 0.4629
Next Token : 
, Posbility: 0.5234
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0203
Next Token : ;, Posbility: 0.0430
Next Token : in, Posbility: 0.0457
Next Token : let, Posbility: 0.1592
Next Token :   , Posbility: 0.2471
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0024
Next Token : (, Posbility: 0.0061
Next Token : in, Posbility: 0.0100
Next Token : 
, Posbility: 0.0121
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0011
Next Token :  [, Posbility: 0.0173
Next Token :  [],, Posbility: 0.0322
Next Token :  [], Posbility: 0.0996
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0035
Next Token : y, Posbility: 0.0051
Next Token : (, Posbility: 0.0058
Next Token : _, Posbility: 0.1030
Next Token : x, Posbility: 0.8594
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0081
Next Token :  , Posbility: 0.0104
Next Token : ',, Posbility: 0.0133
Next Token : ,, Posbility: 0.0220
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1,, Posbility: 0.0091
Next Token :  , Posbility: 0.0405
Next Token : ,, Posbility: 0.1416
Next Token : ', Posbility: 0.1416
Next Token : ',, Posbility: 0.6367
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0009
Next Token :  [, Posbility: 0.0013
Next Token :  [],, Posbility: 0.0015
Next Token :  [], Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : z, Posbility: 0.0005
Next Token : x, Posbility: 0.0084
Next Token : _, Posbility: 0.0178
Next Token : y, Posbility: 0.9727
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token : ',, Posbility: 0.0007
Next Token : ,, Posbility: 0.0013
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0014
Next Token : 2,, Posbility: 0.0020
Next Token : ', Posbility: 0.0280
Next Token : ,, Posbility: 0.0359
Next Token : ',, Posbility: 0.9258
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0004
Next Token :  None, Posbility: 0.0005
Next Token :  [, Posbility: 0.0051
Next Token :  [], Posbility: 0.0228
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0036
Next Token : y, Posbility: 0.0099
Next Token : x, Posbility: 0.0209
Next Token : _, Posbility: 0.0728
Next Token : z, Posbility: 0.8867
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0002
Next Token : ,, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : ', Posbility: 0.0013
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0051
Next Token : 1, Posbility: 0.0051
Next Token : ',, Posbility: 0.0260
Next Token :  , Posbility: 0.0908
Next Token : ', Posbility: 0.8594
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0011
Next Token : ',, Posbility: 0.0024
Next Token :  |, Posbility: 0.0074
Next Token : ', Posbility: 0.0226
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  [, Posbility: 0.0007
Next Token :  match, Posbility: 0.0018
Next Token :  , Posbility: 0.0371
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :      , Posbility: 0.0010
Next Token :     , Posbility: 0.0025
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0024
Next Token : (, Posbility: 0.0050
Next Token : match, Posbility: 0.0050
Next Token : x, Posbility: 0.0176
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token :  l, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : z, Posbility: 0.0017
Next Token : y, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : ,, Posbility: 0.0002
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0019
Next Token : ',, Posbility: 0.0019
Next Token : ,, Posbility: 0.0035
Next Token :  =, Posbility: 0.0227
Next Token : ', Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 0.0010
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  inter, Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flat, Posbility: 0.0002
Next Token : concat, Posbility: 0.0002
Next Token : Flatten, Posbility: 0.0002
Next Token : x, Posbility: 0.0041
Next Token : flatten, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0085
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ';, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0008
Next Token : x, Posbility: 0.0017
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mut, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0019
Next Token : z, Posbility: 0.0019
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 0.0007
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  inter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : Flatten, Posbility: 0.0000
Next Token : x, Posbility: 0.0005
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ',, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : z, Posbility: 0.0003
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 0.0012
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mut, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.0009
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ps, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : st, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0008
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0006
Next Token : (, Posbility: 0.0015
Next Token : y, Posbility: 0.0015
Next Token : let, Posbility: 0.0052
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs'
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token : ++, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  ++, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : flatten, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ y
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys
 score:False
Error type: noerr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : ++, Posbility: 0.0000
Next Token :  --, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys'
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : ++, Posbility: 0.0003
Next Token :  ++, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ z
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs
 score:False
Error type: noerr
---------------------------
Next Token : ';, Posbility: 0.0003
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 0.0010
Next Token : '), Posbility: 0.0013
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : , Posbility: 0.0017
Next Token : 

, Posbility: 0.3730
Next Token : 
, Posbility: 0.6133
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0188
Next Token : ;, Posbility: 0.0352
Next Token : in, Posbility: 0.0398
Next Token : let, Posbility: 0.1226
Next Token :   , Posbility: 0.3125
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token : in, Posbility: 0.0040
Next Token : (, Posbility: 0.0045
Next Token : 
, Posbility: 0.0107
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0007
Next Token :  [, Posbility: 0.0110
Next Token :  [],, Posbility: 0.0266
Next Token :  [], Posbility: 0.0723
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0022
Next Token : (, Posbility: 0.0045
Next Token : y, Posbility: 0.0052
Next Token : _, Posbility: 0.1035
Next Token : x, Posbility: 0.8672
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0064
Next Token : ', Posbility: 0.0064
Next Token : ',, Posbility: 0.0135
Next Token : ,, Posbility: 0.0173
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1,, Posbility: 0.0081
Next Token :  , Posbility: 0.0219
Next Token : ', Posbility: 0.0977
Next Token : ,, Posbility: 0.1260
Next Token : ',, Posbility: 0.7227
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs',
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ..., Posbility: 0.0007
Next Token :  [],, Posbility: 0.0010
Next Token :  [, Posbility: 0.0012
Next Token :  [], Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : z, Posbility: 0.0004
Next Token : x, Posbility: 0.0066
Next Token : _, Posbility: 0.0140
Next Token : y, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : ',, Posbility: 0.0003
Next Token : ,, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1',, Posbility: 0.0006
Next Token : 2,, Posbility: 0.0011
Next Token : ,, Posbility: 0.0137
Next Token : ', Posbility: 0.0177
Next Token : ',, Posbility: 0.9648
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys',
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  [],, Posbility: 0.0003
Next Token :  [, Posbility: 0.0024
Next Token :  [], Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0014
Next Token : y, Posbility: 0.0049
Next Token : x, Posbility: 0.0170
Next Token : _, Posbility: 0.0461
Next Token : z, Posbility: 0.9258
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0002
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : ', Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0026
Next Token : 1, Posbility: 0.0029
Next Token : ',, Posbility: 0.0170
Next Token :  , Posbility: 0.0461
Next Token : ', Posbility: 0.9258
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0008
Next Token : ',, Posbility: 0.0010
Next Token :  |, Posbility: 0.0051
Next Token : ', Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0005
Next Token :  match, Posbility: 0.0009
Next Token :  , Posbility: 0.0259
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0008
Next Token :     , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0010
Next Token : match, Posbility: 0.0021
Next Token : (, Posbility: 0.0027
Next Token : x, Posbility: 0.0109
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  l, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : z, Posbility: 0.0015
Next Token : y, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0008
Next Token : 1, Posbility: 0.0009
Next Token : ,, Posbility: 0.0015
Next Token :  =, Posbility: 0.0075
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  inter, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0001
Next Token : flat, Posbility: 0.0001
Next Token : Flatten, Posbility: 0.0001
Next Token : x, Posbility: 0.0015
Next Token : flatten, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ', Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys z
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :           , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.0009
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0009
Next Token : z, Posbility: 0.0010
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let y
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys'
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' =
 score:False
Error type: noerr
---------------------------
Next Token :  inter, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : Flatten, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : flatten, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten x
 score:False
Error type: noerr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ',, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs'
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' 
 score:False
Error type: noerr
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' y
 score:False
Error type: noerr
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys 
 score:False
Error type: noerr
---------------------------
Next Token : Z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : z, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys z
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ';, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs'
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to interleave 3 lists of the same length into a single flat list. *)
let rec flatten xs ys zs =
  match xs, ys, zs with
  | [], [], [] -> []
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in
      let zs' = flatten xs' ys' zs' in
      xs' ++ ys' ++ zs'
  | xs', ys', zs' ->
      let xs' = flatten xs ys zs' in
      let ys' = flatten xs' ys zs' in

 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>