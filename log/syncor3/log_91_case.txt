code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0137
Next Token :  get, Posbility: 0.0227
Next Token :  make, Posbility: 0.0291
Next Token :  , Posbility: 0.2754
Next Token :  rec, Posbility: 0.4551
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0237
Next Token :  make, Posbility: 0.0344
Next Token :  loop, Posbility: 0.0391
Next Token :  find, Posbility: 0.0728
Next Token :  , Posbility: 0.4746
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0415
Next Token : ax, Posbility: 0.0415
Next Token : gc, Posbility: 0.0471
Next Token : fi, Posbility: 0.0684
Next Token : solve, Posbility: 0.1445
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0137
Next Token :  =, Posbility: 0.0422
Next Token : (, Posbility: 0.0479
Next Token : _, Posbility: 0.1670
Next Token :  , Posbility: 0.6602
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0081
Next Token : ax, Posbility: 0.0464
Next Token : (, Posbility: 0.0596
Next Token : x, Posbility: 0.1260
Next Token : n, Posbility: 0.7266
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0103
Next Token :  i, Posbility: 0.0170
Next Token :  a, Posbility: 0.0762
Next Token :  , Posbility: 0.2656
Next Token :  =, Posbility: 0.5625
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0050
Next Token :  function, Posbility: 0.0119
Next Token :  match, Posbility: 0.0603
Next Token :  , Posbility: 0.0684
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token : 	, Posbility: 0.0082
Next Token :    , Posbility: 0.0105
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0134
Next Token : (, Posbility: 0.0195
Next Token : if, Posbility: 0.2695
Next Token : match, Posbility: 0.3047
Next Token : let, Posbility: 0.3457
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0079
Next Token :  open, Posbility: 0.0277
Next Token :  a, Posbility: 0.0356
Next Token :  rec, Posbility: 0.2637
Next Token :  , Posbility: 0.4922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0508
Next Token : m, Posbility: 0.0737
Next Token : ax, Posbility: 0.1074
Next Token : n, Posbility: 0.1562
Next Token : x, Posbility: 0.1562
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0086
Next Token : _, Posbility: 0.0110
Next Token : 0, Posbility: 0.0142
Next Token : ,, Posbility: 0.1348
Next Token :  =, Posbility: 0.7734
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0135
Next Token :  match, Posbility: 0.0135
Next Token :  1, Posbility: 0.0605
Next Token :  0, Posbility: 0.0996
Next Token :  , Posbility: 0.7383
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ref, Posbility: 0.0493
Next Token : Int, Posbility: 0.0559
Next Token : (, Posbility: 0.0815
Next Token : if, Posbility: 0.1182
Next Token : n, Posbility: 0.3652
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0530
Next Token :  +, Posbility: 0.0874
Next Token :  %, Posbility: 0.1846
Next Token :  mod, Posbility: 0.2373
Next Token :  , Posbility: 0.3047
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0168
Next Token : div, Posbility: 0.0518
Next Token : //, Posbility: 0.0518
Next Token : -, Posbility: 0.2314
Next Token : /, Posbility: 0.5547
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0225
Next Token :  2;, Posbility: 0.0371
Next Token :  100, Posbility: 0.0371
Next Token :  10, Posbility: 0.1011
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0112
Next Token : (, Posbility: 0.0126
Next Token : 5, Posbility: 0.0236
Next Token : 3, Posbility: 0.1060
Next Token : 2, Posbility: 0.7812
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0308
Next Token :  , Posbility: 0.0308
Next Token :  |, Posbility: 0.0308
Next Token :  +, Posbility: 0.0737
Next Token :  in, Posbility: 0.7930
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0007
Next Token : 

, Posbility: 0.0017
Next Token :   , Posbility: 0.0066
Next Token :  , Posbility: 0.0123
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : while, Posbility: 0.0044
Next Token : (, Posbility: 0.0105
Next Token : if, Posbility: 0.0684
Next Token : match, Posbility: 0.0684
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  one, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0017
Next Token :  by, Posbility: 0.0017
Next Token :  a, Posbility: 0.0019
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0019
Next Token : f, Posbility: 0.0021
Next Token : x, Posbility: 0.0024
Next Token : b, Posbility: 0.0122
Next Token : y, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0019
Next Token :  -1, Posbility: 0.0019
Next Token :  0, Posbility: 0.0107
Next Token :  1, Posbility: 0.0107
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0057
Next Token : 2, Posbility: 0.0156
Next Token : (, Posbility: 0.0481
Next Token : if, Posbility: 0.0544
Next Token : n, Posbility: 0.8516
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0037
Next Token :  +, Posbility: 0.0054
Next Token :  mod, Posbility: 0.0166
Next Token :  %, Posbility: 0.0654
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0010
Next Token : ^, Posbility: 0.0011
Next Token : rem, Posbility: 0.0013
Next Token : /, Posbility: 0.1475
Next Token : -, Posbility: 0.8477
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token :  2*, Posbility: 0.0057
Next Token :  1, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0007
Next Token : (, Posbility: 0.0134
Next Token : 2, Posbility: 0.0173
Next Token : n, Posbility: 0.0222
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 0.0024
Next Token :  +, Posbility: 0.0040
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token : 

, Posbility: 0.0259
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0046
Next Token : (, Posbility: 0.0344
Next Token : match, Posbility: 0.1543
Next Token : let, Posbility: 0.2236
Next Token : if, Posbility: 0.5391
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0015
Next Token :  int, Posbility: 0.0015
Next Token :  ((, Posbility: 0.0021
Next Token :  not, Posbility: 0.0107
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0028
Next Token : y, Posbility: 0.0339
Next Token : (, Posbility: 0.0718
Next Token : n, Posbility: 0.1953
Next Token : x, Posbility: 0.6836
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0522
Next Token :  *, Posbility: 0.1426
Next Token :  =, Posbility: 0.1426
Next Token :  +, Posbility: 0.1426
Next Token :  , Posbility: 0.3867
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0021
Next Token : /, Posbility: 0.0179
Next Token : -, Posbility: 0.0203
Next Token : >, Posbility: 0.3594
Next Token : <, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0022
Next Token : >, Posbility: 0.0160
Next Token :  , Posbility: 0.3203
Next Token :  0, Posbility: 0.3203
Next Token :  1, Posbility: 0.3203
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0381
Next Token :  &&, Posbility: 0.0630
Next Token :  or, Posbility: 0.0913
Next Token :  ||, Posbility: 0.3613
Next Token :  then, Posbility: 0.4102
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0032
Next Token :  , Posbility: 0.1729
Next Token : 
, Posbility: 0.1729
Next Token :  Some, Posbility: 0.1729
Next Token :  None, Posbility: 0.4688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0026
Next Token :  , Posbility: 0.0117
Next Token : ;, Posbility: 0.0408
Next Token : 
, Posbility: 0.4375
Next Token :  else, Posbility: 0.4961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0036
Next Token :  [, Posbility: 0.0077
Next Token : 
, Posbility: 0.0344
Next Token :  , Posbility: 0.2539
Next Token :  Some, Posbility: 0.6914
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0192
Next Token :  [, Posbility: 0.0408
Next Token : (, Posbility: 0.0522
Next Token :  ((, Posbility: 0.0522
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : ({, Posbility: 0.0005
Next Token : @@, Posbility: 0.0007
Next Token : ([, Posbility: 0.0009
Next Token : x, Posbility: 0.0075
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Int, Posbility: 0.0015
Next Token : Tuple, Posbility: 0.0019
Next Token :  , Posbility: 0.0084
Next Token : n, Posbility: 0.0095
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0009
Next Token :  *, Posbility: 0.0017
Next Token : ;, Posbility: 0.0017
Next Token :  , Posbility: 0.0109
Next Token : ,, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : y, Posbility: 0.1826
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token :  +, Posbility: 0.0008
Next Token : ,, Posbility: 0.0059
Next Token : );, Posbility: 0.1182
Next Token : ), Posbility: 0.8711
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  >>, Posbility: 0.0041
Next Token :  , Posbility: 0.0127
Next Token :  in, Posbility: 0.0184
Next Token : 

, Posbility: 0.4746
Next Token : 
, Posbility: 0.4746
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0128
Next Token :   , Posbility: 0.0261
Next Token : ;, Posbility: 0.0261
Next Token : in, Posbility: 0.0669
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0155
Next Token :  test, Posbility: 0.0255
Next Token :  main, Posbility: 0.1475
Next Token :  , Posbility: 0.2754
Next Token :  rec, Posbility: 0.3535
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0366
Next Token :  rec, Posbility: 0.0366
Next Token :  iter, Posbility: 0.0415
Next Token :  loop, Posbility: 0.0776
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fi, Posbility: 0.0159
Next Token : f, Posbility: 0.0231
Next Token : gen, Posbility: 0.0231
Next Token : try, Posbility: 0.0261
Next Token : solve, Posbility: 0.5234
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0352
Next Token : 1, Posbility: 0.0398
Next Token :  , Posbility: 0.0659
Next Token : 2, Posbility: 0.0957
Next Token : _, Posbility: 0.6250
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : na, Posbility: 0.0239
Next Token : 2, Posbility: 0.0306
Next Token : loop, Posbility: 0.0347
Next Token : rec, Posbility: 0.0649
Next Token : iter, Posbility: 0.1768
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0120
Next Token :  =, Posbility: 0.0154
Next Token : ative, Posbility: 0.0371
Next Token :  i, Posbility: 0.0420
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0018
Next Token : m, Posbility: 0.0023
Next Token : (, Posbility: 0.0082
Next Token : x, Posbility: 0.0287
Next Token : n, Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0047
Next Token :  max, Posbility: 0.0060
Next Token :  i, Posbility: 0.0099
Next Token :  , Posbility: 0.0447
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0011
Next Token :  fun, Posbility: 0.0013
Next Token :  match, Posbility: 0.0030
Next Token :  , Posbility: 0.0469
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :    , Posbility: 0.0015
Next Token : let, Posbility: 0.0015
Next Token :     , Posbility: 0.0052
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0062
Next Token : (, Posbility: 0.0170
Next Token : match, Posbility: 0.0859
Next Token : if, Posbility: 0.1416
Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0039
Next Token :  v, Posbility: 0.0045
Next Token :  res, Posbility: 0.0065
Next Token :  rec, Posbility: 0.0698
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0072
Next Token : f, Posbility: 0.0135
Next Token : n, Posbility: 0.0325
Next Token : (, Posbility: 0.0369
Next Token : x, Posbility: 0.8359
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0030
Next Token : _, Posbility: 0.0038
Next Token : i, Posbility: 0.0038
Next Token : ,, Posbility: 0.0364
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  match, Posbility: 0.0009
Next Token :  0, Posbility: 0.0066
Next Token :  1, Posbility: 0.0085
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0019
Next Token : if, Posbility: 0.0021
Next Token : solve, Posbility: 0.0051
Next Token : (, Posbility: 0.0096
Next Token : n, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0009
Next Token :  in, Posbility: 0.0009
Next Token : /, Posbility: 0.0012
Next Token :  %, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : >, Posbility: 0.0002
Next Token : //, Posbility: 0.0008
Next Token : -, Posbility: 0.0032
Next Token : /, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0009
Next Token :  2.0, Posbility: 0.0009
Next Token :  4, Posbility: 0.0025
Next Token :  2;, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token : 2,, Posbility: 0.0012
Next Token : 3, Posbility: 0.0036
Next Token : 2, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  and, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  +, Posbility: 0.0052
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0007
Next Token : (, Posbility: 0.0024
Next Token : match, Posbility: 0.0050
Next Token : if, Posbility: 0.0289
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  next, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0008
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  0, Posbility: 0.0004
Next Token :  1, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : if, Posbility: 0.0007
Next Token : x, Posbility: 0.0008
Next Token : (, Posbility: 0.0019
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mod, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  %, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0003
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  2*, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Some, Posbility: 0.0131
Next Token : (, Posbility: 0.0216
Next Token : match, Posbility: 0.0586
Next Token : let, Posbility: 0.1592
Next Token : if, Posbility: 0.7148
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0004
Next Token :  1, Posbility: 0.0004
Next Token :  !, Posbility: 0.0005
Next Token :  not, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : (, Posbility: 0.0066
Next Token : y, Posbility: 0.0066
Next Token : n, Posbility: 0.0108
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0063
Next Token :  =, Posbility: 0.0104
Next Token :  >=, Posbility: 0.0104
Next Token :  <=, Posbility: 0.0282
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0001
Next Token : /, Posbility: 0.0004
Next Token : -, Posbility: 0.0006
Next Token : >, Posbility: 0.0293
Next Token : <, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0003
Next Token :  , Posbility: 0.0066
Next Token :  0, Posbility: 0.0066
Next Token :  1, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  or, Posbility: 0.0023
Next Token :  &&, Posbility: 0.0104
Next Token :  ||, Posbility: 0.0366
Next Token :  then, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0020
Next Token : 
, Posbility: 0.0398
Next Token :  Some, Posbility: 0.0398
Next Token :  , Posbility: 0.1084
Next Token :  None, Posbility: 0.8008
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.0292
Next Token :  else, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0050
Next Token :  match, Posbility: 0.0154
Next Token : 
, Posbility: 0.0693
Next Token :  , Posbility: 0.2412
Next Token :  Some, Posbility: 0.6562
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0005
Next Token :  [, Posbility: 0.0007
Next Token : (, Posbility: 0.0046
Next Token :  ((, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : ({, Posbility: 0.0003
Next Token : ([, Posbility: 0.0003
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Some, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : n, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  0), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0052
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0005
Next Token : ,, Posbility: 0.0014
Next Token : ),, Posbility: 0.0014
Next Token : );, Posbility: 0.0292
Next Token : ), Posbility: 0.9648
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0055
Next Token :  , Posbility: 0.0131
Next Token :  |, Posbility: 0.0520
Next Token : 

, Posbility: 0.2637
Next Token : 
, Posbility: 0.6328
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : while, Posbility: 0.0153
Next Token : (, Posbility: 0.0157
Next Token :   , Posbility: 0.0162
Next Token : [, Posbility: 0.0184
Next Token : let, Posbility: 0.5547
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0140
Next Token :  iter, Posbility: 0.0261
Next Token :  main, Posbility: 0.0337
Next Token :  , Posbility: 0.2480
Next Token :  rec, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0127
Next Token :  loop, Posbility: 0.0184
Next Token :  rec, Posbility: 0.0210
Next Token :  iter, Posbility: 0.0305
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : recursive, Posbility: 0.0031
Next Token : iterate, Posbility: 0.0045
Next Token : gen, Posbility: 0.0074
Next Token : try, Posbility: 0.0096
Next Token : solve, Posbility: 0.8633
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0021
Next Token : ', Posbility: 0.0027
Next Token :  , Posbility: 0.0106
Next Token : 2, Posbility: 0.0176
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0151
Next Token : while, Posbility: 0.0220
Next Token : loop, Posbility: 0.0361
Next Token : rec, Posbility: 0.1113
Next Token : iter, Posbility: 0.3027
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0165
Next Token : 1, Posbility: 0.0240
Next Token :  , Posbility: 0.0508
Next Token : 2, Posbility: 0.4258
Next Token : _, Posbility: 0.4258
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0302
Next Token : bound, Posbility: 0.0342
Next Token : rec, Posbility: 0.0342
Next Token : 2, Posbility: 0.0564
Next Token : opt, Posbility: 0.0723
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0056
Next Token : n, Posbility: 0.0072
Next Token :  =, Posbility: 0.0072
Next Token : _, Posbility: 0.0135
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : m, Posbility: 0.0003
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0019
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0004
Next Token :  i, Posbility: 0.0004
Next Token :  max, Posbility: 0.0005
Next Token :  , Posbility: 0.0085
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  Some, Posbility: 0.0004
Next Token :  match, Posbility: 0.0012
Next Token :  , Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token : let, Posbility: 0.0006
Next Token :    , Posbility: 0.0008
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0054
Next Token : try, Posbility: 0.0114
Next Token : match, Posbility: 0.0309
Next Token : if, Posbility: 0.0398
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0010
Next Token :  res, Posbility: 0.0014
Next Token :  v, Posbility: 0.0016
Next Token :  rec, Posbility: 0.0254
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0024
Next Token : f, Posbility: 0.0031
Next Token : n, Posbility: 0.0035
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0006
Next Token : 0, Posbility: 0.0009
Next Token : _, Posbility: 0.0012
Next Token : ,, Posbility: 0.0059
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0005
Next Token :  1, Posbility: 0.0015
Next Token :  0, Posbility: 0.0019
Next Token :  Some, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0005
Next Token : try, Posbility: 0.0005
Next Token : if, Posbility: 0.0019
Next Token : (, Posbility: 0.0028
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0002
Next Token :  %, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0002
Next Token :  4, Posbility: 0.0002
Next Token :  2.0, Posbility: 0.0003
Next Token :  2;, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0001
Next Token : 2,, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : 3, Posbility: 0.0015
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  +, Posbility: 0.0022
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : try, Posbility: 0.0014
Next Token : match, Posbility: 0.0050
Next Token : if, Posbility: 0.0291
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  mut, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : opt, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2*, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0140
Next Token : Some, Posbility: 0.0229
Next Token : let, Posbility: 0.0801
Next Token : match, Posbility: 0.0801
Next Token : if, Posbility: 0.7617
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0005
Next Token :  0, Posbility: 0.0006
Next Token :  1, Posbility: 0.0006
Next Token :  not, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0040
Next Token : n, Posbility: 0.0046
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0030
Next Token :  =, Posbility: 0.0050
Next Token :  >=, Posbility: 0.0175
Next Token :  <=, Posbility: 0.0175
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : /, Posbility: 0.0001
Next Token : >, Posbility: 0.0179
Next Token : <, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0003
Next Token :  , Posbility: 0.0066
Next Token :  0, Posbility: 0.0178
Next Token :  1, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  &&, Posbility: 0.0065
Next Token :  ||, Posbility: 0.0178
Next Token :  then, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token : 
, Posbility: 0.0151
Next Token :  , Posbility: 0.0410
Next Token :  Some, Posbility: 0.1118
Next Token :  None, Posbility: 0.8281
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token :  , Posbility: 0.0011
Next Token : 
, Posbility: 0.0179
Next Token :  else, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0030
Next Token :  match, Posbility: 0.0118
Next Token : 
, Posbility: 0.0320
Next Token :  , Posbility: 0.2090
Next Token :  Some, Posbility: 0.7305
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0011
Next Token :  [, Posbility: 0.0015
Next Token :  ((, Posbility: 0.0058
Next Token : (, Posbility: 0.0085
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : ({, Posbility: 0.0005
Next Token : ([, Posbility: 0.0008
Next Token : x, Posbility: 0.0017
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : Some, Posbility: 0.0017
Next Token : n, Posbility: 0.0036
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  +, Posbility: 0.0019
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0002
Next Token :  0), Posbility: 0.0002
Next Token :  Some, Posbility: 0.0008
Next Token : y, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0007
Next Token : n, Posbility: 0.0013
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )., Posbility: 0.0010
Next Token : ,, Posbility: 0.0012
Next Token : ),, Posbility: 0.0012
Next Token : );, Posbility: 0.0123
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  ||, Posbility: 0.0067
Next Token :  , Posbility: 0.0087
Next Token :  |, Posbility: 0.0388
Next Token : 

, Posbility: 0.2227
Next Token : 
, Posbility: 0.6875
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0131
Next Token : ```, Posbility: 0.0203
Next Token : (, Posbility: 0.0216
Next Token : *, Posbility: 0.0216
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0056
Next Token :  main, Posbility: 0.0118
Next Token :  iter, Posbility: 0.0171
Next Token :  , Posbility: 0.1118
Next Token :  rec, Posbility: 0.8242
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0075
Next Token :  loop, Posbility: 0.0085
Next Token :  rec, Posbility: 0.0124
Next Token :  iter, Posbility: 0.0181
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0020
Next Token : iterate, Posbility: 0.0025
Next Token : try, Posbility: 0.0061
Next Token : gen, Posbility: 0.0061
Next Token : solve, Posbility: 0.9023
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0004
Next Token : 1, Posbility: 0.0008
Next Token :  , Posbility: 0.0040
Next Token : 2, Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gen, Posbility: 0.0061
Next Token : loop, Posbility: 0.0130
Next Token : rec, Posbility: 0.0583
Next Token : opt, Posbility: 0.1089
Next Token : iter, Posbility: 0.5547
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token : 3, Posbility: 0.0029
Next Token :  , Posbility: 0.0130
Next Token : 2, Posbility: 0.0581
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0141
Next Token : bound, Posbility: 0.0141
Next Token : fast, Posbility: 0.0160
Next Token : rec, Posbility: 0.0339
Next Token : opt, Posbility: 0.4121
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0056
Next Token : 1, Posbility: 0.0152
Next Token :  , Posbility: 0.0684
Next Token : 2, Posbility: 0.3066
Next Token : _, Posbility: 0.5703
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0233
Next Token : bound, Posbility: 0.0233
Next Token : rec, Posbility: 0.0383
Next Token : 2, Posbility: 0.0493
Next Token : opt, Posbility: 0.0635
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0027
Next Token :  =, Posbility: 0.0039
Next Token : n, Posbility: 0.0093
Next Token : _, Posbility: 0.0120
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (), Posbility: 0.0002
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0017
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0032
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token :    , Posbility: 0.0005
Next Token : let, Posbility: 0.0005
Next Token :     , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0027
Next Token : try, Posbility: 0.0027
Next Token : match, Posbility: 0.0074
Next Token : if, Posbility: 0.0200
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  v, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0009
Next Token : y, Posbility: 0.0010
Next Token : n, Posbility: 0.0013
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : 0, Posbility: 0.0005
Next Token : 1, Posbility: 0.0006
Next Token : ,, Posbility: 0.0025
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  1, Posbility: 0.0007
Next Token :  Some, Posbility: 0.0008
Next Token :  0, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token : if, Posbility: 0.0010
Next Token : (, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : /, Posbility: 0.0001
Next Token :  %, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  4, Posbility: 0.0003
Next Token :  2;, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 5, Posbility: 0.0001
Next Token : 3, Posbility: 0.0013
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  and, Posbility: 0.0003
Next Token :  +, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : try, Posbility: 0.0003
Next Token : match, Posbility: 0.0006
Next Token : if, Posbility: 0.0097
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  mut, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2*, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : Some, Posbility: 0.0103
Next Token : match, Posbility: 0.0170
Next Token : let, Posbility: 0.0281
Next Token : if, Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0002
Next Token :  1, Posbility: 0.0003
Next Token :  0, Posbility: 0.0004
Next Token :  not, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : n, Posbility: 0.0015
Next Token : (, Posbility: 0.0017
Next Token : y, Posbility: 0.0025
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0012
Next Token :  =, Posbility: 0.0019
Next Token :  <=, Posbility: 0.0052
Next Token :  >=, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : >, Posbility: 0.0036
Next Token : <, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token :  0, Posbility: 0.0067
Next Token :  1, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  &&, Posbility: 0.0066
Next Token :  ||, Posbility: 0.0085
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token : 
, Posbility: 0.0062
Next Token :  , Posbility: 0.0170
Next Token :  Some, Posbility: 0.0461
Next Token :  None, Posbility: 0.9258
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token :  or, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0059
Next Token :  else, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token :  match, Posbility: 0.0038
Next Token : 
, Posbility: 0.0102
Next Token :  , Posbility: 0.0586
Next Token :  Some, Posbility: 0.9180
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0004
Next Token :  [, Posbility: 0.0007
Next Token : (, Posbility: 0.0031
Next Token :  ((, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : ({, Posbility: 0.0001
Next Token : (0,, Posbility: 0.0002
Next Token : ([, Posbility: 0.0003
Next Token : x, Posbility: 0.0006
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Option, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : Some, Posbility: 0.0006
Next Token : n, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :  +, Posbility: 0.0012
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token : y, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0004
Next Token : x, Posbility: 0.0004
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0004
Next Token :  +, Posbility: 0.0004
Next Token : )), Posbility: 0.0008
Next Token : );, Posbility: 0.0019
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0015
Next Token :  , Posbility: 0.0028
Next Token :  |, Posbility: 0.0032
Next Token : 

, Posbility: 0.1982
Next Token : 
, Posbility: 0.7852
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0123
Next Token : ```, Posbility: 0.0216
Next Token : (, Posbility: 0.0378
Next Token : *, Posbility: 0.0457
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0040
Next Token :  main, Posbility: 0.0075
Next Token :  iter, Posbility: 0.0160
Next Token :  , Posbility: 0.0811
Next Token :  rec, Posbility: 0.8711
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0053
Next Token :  loop, Posbility: 0.0068
Next Token :  rec, Posbility: 0.0078
Next Token :  iter, Posbility: 0.0145
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0018
Next Token : iterate, Posbility: 0.0020
Next Token : try, Posbility: 0.0049
Next Token : gen, Posbility: 0.0049
Next Token : solve, Posbility: 0.9258
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0004
Next Token : 1, Posbility: 0.0008
Next Token :  , Posbility: 0.0031
Next Token : 2, Posbility: 0.0046
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gen, Posbility: 0.0035
Next Token : loop, Posbility: 0.0083
Next Token : rec, Posbility: 0.0330
Next Token : opt, Posbility: 0.0698
Next Token : iter, Posbility: 0.7500
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0013
Next Token : 3, Posbility: 0.0018
Next Token :  , Posbility: 0.0073
Next Token : 2, Posbility: 0.0255
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0053
Next Token : loop, Posbility: 0.0077
Next Token : rec, Posbility: 0.0210
Next Token : iter, Posbility: 0.0270
Next Token : opt, Posbility: 0.6953
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : 3, Posbility: 0.0026
Next Token :  , Posbility: 0.0152
Next Token : 2, Posbility: 0.0322
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fast, Posbility: 0.0053
Next Token : loop, Posbility: 0.0068
Next Token : iter, Posbility: 0.0184
Next Token : rec, Posbility: 0.0184
Next Token : opt, Posbility: 0.6914
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0040
Next Token : 1, Posbility: 0.0084
Next Token :  , Posbility: 0.0481
Next Token : 2, Posbility: 0.1680
Next Token : _, Posbility: 0.7539
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fast, Posbility: 0.0120
Next Token : iter, Posbility: 0.0175
Next Token : 2, Posbility: 0.0255
Next Token : rec, Posbility: 0.0327
Next Token : opt, Posbility: 0.4512
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token : n, Posbility: 0.0017
Next Token :  =, Posbility: 0.0031
Next Token : _, Posbility: 0.0066
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : (), Posbility: 0.0002
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0009
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token :    , Posbility: 0.0004
Next Token : let, Posbility: 0.0004
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token : match, Posbility: 0.0009
Next Token : if, Posbility: 0.0052
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ,, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  4, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 5, Posbility: 0.0001
Next Token : 3, Posbility: 0.0009
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0025
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  %, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0004
Next Token : match, Posbility: 0.0012
Next Token : (, Posbility: 0.0025
Next Token : let, Posbility: 0.0046
Next Token : if, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  not, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  <=, Posbility: 0.0004
Next Token :  >=, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : >, Posbility: 0.0002
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  0, Posbility: 0.0019
Next Token :  1, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  &&, Posbility: 0.0006
Next Token :  ||, Posbility: 0.0008
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0007
Next Token :  Some, Posbility: 0.0009
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token :  then, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0013
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 0.0013
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : ([, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (0,, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Some, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : );, Posbility: 0.0003
Next Token : )), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : , Posbility: 0.0028
Next Token : 

, Posbility: 0.2207
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0103
Next Token : ```, Posbility: 0.0170
Next Token : *, Posbility: 0.0298
Next Token : (, Posbility: 0.0405
Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0041
Next Token :  main, Posbility: 0.0052
Next Token :  iter, Posbility: 0.0125
Next Token :  , Posbility: 0.0815
Next Token :  rec, Posbility: 0.8789
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0042
Next Token :  rec, Posbility: 0.0061
Next Token :  loop, Posbility: 0.0061
Next Token :  iter, Posbility: 0.0115
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iterate, Posbility: 0.0016
Next Token : f, Posbility: 0.0020
Next Token : gen, Posbility: 0.0043
Next Token : try, Posbility: 0.0049
Next Token : solve, Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0004
Next Token : 1, Posbility: 0.0008
Next Token :  , Posbility: 0.0036
Next Token : 2, Posbility: 0.0036
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gen, Posbility: 0.0032
Next Token : loop, Posbility: 0.0060
Next Token : rec, Posbility: 0.0237
Next Token : opt, Posbility: 0.0645
Next Token : iter, Posbility: 0.7852
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0011
Next Token : 3, Posbility: 0.0016
Next Token :  , Posbility: 0.0065
Next Token : 2, Posbility: 0.0177
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0029
Next Token : loop, Posbility: 0.0054
Next Token : rec, Posbility: 0.0167
Next Token : iter, Posbility: 0.0354
Next Token : opt, Posbility: 0.8047
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : 3, Posbility: 0.0010
Next Token :  , Posbility: 0.0066
Next Token : 2, Posbility: 0.0075
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0012
Next Token : none, Posbility: 0.0018
Next Token : rec, Posbility: 0.0018
Next Token : iter, Posbility: 0.0104
Next Token : opt, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : 2, Posbility: 0.0035
Next Token :  , Posbility: 0.0203
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0009
Next Token : int, Posbility: 0.0009
Next Token : none, Posbility: 0.0013
Next Token : iter, Posbility: 0.0039
Next Token : opt, Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : 1, Posbility: 0.0018
Next Token : 2, Posbility: 0.0219
Next Token :  , Posbility: 0.0361
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0025
Next Token : 2, Posbility: 0.0029
Next Token : rec, Posbility: 0.0029
Next Token : iter, Posbility: 0.0069
Next Token : opt, Posbility: 0.9062
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  =, Posbility: 0.0024
Next Token : _, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token : let, Posbility: 0.0004
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0001
Next Token : match, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0019
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  4, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0008
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0001
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : let, Posbility: 0.0008
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0001
Next Token :  >=, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  0, Posbility: 0.0007
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Then, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  &&, Posbility: 0.0001
Next Token :  ||, Posbility: 0.0001
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  True, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (0,, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0002
Next Token : );, Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : , Posbility: 0.0036
Next Token : 

, Posbility: 0.2207
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0061
Next Token : ```, Posbility: 0.0147
Next Token : *, Posbility: 0.0214
Next Token : (, Posbility: 0.0332
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0023
Next Token :  main, Posbility: 0.0026
Next Token :  iter, Posbility: 0.0090
Next Token :  , Posbility: 0.0583
Next Token :  rec, Posbility: 0.9141
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0033
Next Token :  rec, Posbility: 0.0043
Next Token :  loop, Posbility: 0.0049
Next Token :  iter, Posbility: 0.0081
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solver, Posbility: 0.0013
Next Token : f, Posbility: 0.0018
Next Token : gen, Posbility: 0.0034
Next Token : try, Posbility: 0.0044
Next Token : solve, Posbility: 0.9453
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0003
Next Token : 1, Posbility: 0.0006
Next Token : 2, Posbility: 0.0022
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gen, Posbility: 0.0021
Next Token : loop, Posbility: 0.0035
Next Token : rec, Posbility: 0.0156
Next Token : opt, Posbility: 0.0481
Next Token : iter, Posbility: 0.8555
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0011
Next Token : s, Posbility: 0.0013
Next Token :  , Posbility: 0.0045
Next Token : 2, Posbility: 0.0096
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0022
Next Token : loop, Posbility: 0.0028
Next Token : rec, Posbility: 0.0076
Next Token : iter, Posbility: 0.0299
Next Token : opt, Posbility: 0.8750
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0002
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0019
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0005
Next Token : optional, Posbility: 0.0005
Next Token : none, Posbility: 0.0008
Next Token : iter, Posbility: 0.0066
Next Token : opt, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0002
Next Token : none, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : iter, Posbility: 0.0005
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0076
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0003
Next Token : op, Posbility: 0.0003
Next Token : none, Posbility: 0.0003
Next Token : iter, Posbility: 0.0010
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token :  =, Posbility: 0.0009
Next Token : 2, Posbility: 0.0044
Next Token :  , Posbility: 0.0417
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inf, Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token : int, Posbility: 0.0006
Next Token : iter, Posbility: 0.0017
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  =, Posbility: 0.0019
Next Token : _, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token : let, Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0012
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  %, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : let, Posbility: 0.0003
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  ||, Posbility: 0.0000
Next Token :  &&, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  True, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (0,, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token : , Posbility: 0.0035
Next Token : 

, Posbility: 0.2432
Next Token : 
, Posbility: 0.7500
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0046
Next Token : *, Posbility: 0.0110
Next Token : ```, Posbility: 0.0125
Next Token : (, Posbility: 0.0161
Next Token : let, Posbility: 0.8750
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0011
Next Token :  main, Posbility: 0.0011
Next Token :  iter, Posbility: 0.0056
Next Token :  , Posbility: 0.0415
Next Token :  rec, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0021
Next Token :  rec, Posbility: 0.0027
Next Token :  loop, Posbility: 0.0034
Next Token :  iter, Posbility: 0.0050
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solver, Posbility: 0.0009
Next Token : f, Posbility: 0.0011
Next Token : gen, Posbility: 0.0021
Next Token : try, Posbility: 0.0031
Next Token : solve, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gen, Posbility: 0.0014
Next Token : loop, Posbility: 0.0018
Next Token : rec, Posbility: 0.0090
Next Token : opt, Posbility: 0.0276
Next Token : iter, Posbility: 0.9141
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0007
Next Token : s, Posbility: 0.0009
Next Token :  , Posbility: 0.0036
Next Token : 2, Posbility: 0.0052
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0014
Next Token : all, Posbility: 0.0018
Next Token : rec, Posbility: 0.0029
Next Token : iter, Posbility: 0.0217
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : none, Posbility: 0.0003
Next Token : iter, Posbility: 0.0025
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inf, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token : op, Posbility: 0.0003
Next Token : iter, Posbility: 0.0003
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  =, Posbility: 0.0017
Next Token : _, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0006
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token :  then, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (0,, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0029
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7930
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0048
Next Token : in, Posbility: 0.0058
Next Token : ```, Posbility: 0.0090
Next Token : (, Posbility: 0.0108
Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0007
Next Token :  main, Posbility: 0.0008
Next Token :  iter, Posbility: 0.0044
Next Token :  , Posbility: 0.0327
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0016
Next Token :  loop, Posbility: 0.0024
Next Token :  iter, Posbility: 0.0035
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solver, Posbility: 0.0006
Next Token : f, Posbility: 0.0008
Next Token : gen, Posbility: 0.0013
Next Token : try, Posbility: 0.0021
Next Token : solve, Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0004
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0011
Next Token : recursive, Posbility: 0.0011
Next Token : rec, Posbility: 0.0063
Next Token : opt, Posbility: 0.0221
Next Token : iter, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 0.0025
Next Token : 2, Posbility: 0.0025
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0008
Next Token : all, Posbility: 0.0014
Next Token : rec, Posbility: 0.0014
Next Token : iter, Posbility: 0.0154
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : all, Posbility: 0.0002
Next Token : iter, Posbility: 0.0017
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : o, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token : _, Posbility: 0.0076
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  
 score:False
Error type: noerr
---------------------------
Next Token : {, Posbility: 0.0000
Next Token : match, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0004
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x =
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n /
 score:False
Error type: noerr
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 
 score:False
Error type: noerr
---------------------------
Next Token : 8, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n -
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x
 score:False
Error type: noerr
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in

 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  
 score:False
Error type: noerr
---------------------------
Next Token : If, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  not, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  >=, Posbility: 0.0000
Next Token :  <=, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x <
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  else, Posbility: 0.0000
Next Token :  Then, Posbility: 0.0000
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None
 score:False
Error type: noerr
---------------------------
Next Token : else, Posbility: 0.0000
Next Token :  then, Posbility: 0.0000
Next Token :  otherwise, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else
 score:False
Error type: noerr
---------------------------
Next Token : Some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (0,, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x,
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, 
 score:False
Error type: noerr
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y
 score:False
Error type: noerr
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token : );, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0028
Next Token : 

, Posbility: 0.2217
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)

 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0042
Next Token : ", Posbility: 0.0055
Next Token : ```, Posbility: 0.0096
Next Token : (, Posbility: 0.0102
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0007
Next Token :  main, Posbility: 0.0009
Next Token :  iter, Posbility: 0.0035
Next Token :  , Posbility: 0.0291
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0011
Next Token :  loop, Posbility: 0.0017
Next Token :  iter, Posbility: 0.0024
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : solver, Posbility: 0.0004
Next Token : f, Posbility: 0.0005
Next Token : gen, Posbility: 0.0006
Next Token : try, Posbility: 0.0013
Next Token : solve, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0008
Next Token : loop, Posbility: 0.0009
Next Token : rec, Posbility: 0.0044
Next Token : opt, Posbility: 0.0154
Next Token : iter, Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : s, Posbility: 0.0004
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0004
Next Token : rec, Posbility: 0.0009
Next Token : all, Posbility: 0.0010
Next Token : iter, Posbility: 0.0084
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : all, Posbility: 0.0001
Next Token : iter, Posbility: 0.0006
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0012
Next Token : _, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x =
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n /
 score:False
Error type: noerr
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 
 score:False
Error type: noerr
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Let, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. *)
let rec solve n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = n - x in
  if x < 1 then None else Some (x, y)
let rec solve_iter_opt_opt_opt_opt_opt_opt_opt_opt n =
  let x = n / 2 in
  let y = 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>