code:
 (* Write a function to find cubes of individual elements in a list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0126
Next Token :  list, Posbility: 0.0126
Next Token :  find, Posbility: 0.0500
Next Token :  , Posbility: 0.2871
Next Token :  rec, Posbility: 0.5391
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0176
Next Token :  list, Posbility: 0.0176
Next Token :  loop, Posbility: 0.0256
Next Token :  find, Posbility: 0.1670
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : add, Posbility: 0.0084
Next Token : map, Posbility: 0.0084
Next Token : square, Posbility: 0.0122
Next Token : f, Posbility: 0.0177
Next Token : cube, Posbility: 0.7539
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : d, Posbility: 0.0109
Next Token :  =, Posbility: 0.0378
Next Token :  , Posbility: 0.1328
Next Token : _, Posbility: 0.1328
Next Token : s, Posbility: 0.5938
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0132
Next Token :  i, Posbility: 0.0170
Next Token : _, Posbility: 0.1826
Next Token :  =, Posbility: 0.3008
Next Token :  , Posbility: 0.3867
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0410
Next Token : :, Posbility: 0.0869
Next Token : (, Posbility: 0.1118
Next Token : n, Posbility: 0.1621
Next Token : x, Posbility: 0.3027
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0066
Next Token :  i, Posbility: 0.0159
Next Token :  , Posbility: 0.0913
Next Token :  =, Posbility: 0.3184
Next Token : s, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0025
Next Token :  i, Posbility: 0.0077
Next Token :  acc, Posbility: 0.0098
Next Token :  , Posbility: 0.0728
Next Token :  =, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0027
Next Token :  function, Posbility: 0.0044
Next Token :  match, Posbility: 0.0684
Next Token :  , Posbility: 0.0776
Next Token : 
, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0045
Next Token :    , Posbility: 0.0094
Next Token : 	, Posbility: 0.0094
Next Token :     , Posbility: 0.1147
Next Token :   , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0058
Next Token : List, Posbility: 0.0332
Next Token : let, Posbility: 0.1157
Next Token : if, Posbility: 0.1484
Next Token : match, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0007
Next Token :  !, Posbility: 0.0008
Next Token : 
, Posbility: 0.0009
Next Token :  String, Posbility: 0.0046
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0019
Next Token : Seq, Posbility: 0.0022
Next Token : (, Posbility: 0.0059
Next Token : List, Posbility: 0.1045
Next Token : x, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  with, Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  @, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0030
Next Token :  , Posbility: 0.0043
Next Token :  [, Posbility: 0.0081
Next Token :  [], Posbility: 0.0464
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :       , Posbility: 0.0016
Next Token :    , Posbility: 0.0018
Next Token :     , Posbility: 0.0757
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0219
Next Token : [], Posbility: 0.0464
Next Token : |, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0064
Next Token :  , Posbility: 0.0175
Next Token :  [, Posbility: 0.0175
Next Token :  [], Posbility: 0.9531
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0039
Next Token :    , Posbility: 0.0064
Next Token :  |, Posbility: 0.0082
Next Token :  =>, Posbility: 0.0106
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0009
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0038
Next Token :  0, Posbility: 0.0038
Next Token :  [, Posbility: 0.0038
Next Token :  , Posbility: 0.0464
Next Token :  [], Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0021
Next Token :   , Posbility: 0.0044
Next Token :  , Posbility: 0.0136
Next Token :  |, Posbility: 0.0154
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0044
Next Token :  a, Posbility: 0.0072
Next Token :  [], Posbility: 0.0118
Next Token :  [, Posbility: 0.3047
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0157
Next Token : h, Posbility: 0.0229
Next Token : (, Posbility: 0.0260
Next Token : _, Posbility: 0.1162
Next Token : x, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0031
Next Token : :, Posbility: 0.0176
Next Token : s, Posbility: 0.0289
Next Token : ::, Posbility: 0.3516
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0007
Next Token : if, Posbility: 0.0010
Next Token : :, Posbility: 0.0019
Next Token : ->, Posbility: 0.0330
Next Token : ::, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0010
Next Token :  new, Posbility: 0.0012
Next Token :  [], Posbility: 0.0052
Next Token :  rest, Posbility: 0.1050
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0122
Next Token : y, Posbility: 0.0139
Next Token : tail, Posbility: 0.0157
Next Token : _, Posbility: 0.0703
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 0.0009
Next Token : ', Posbility: 0.0032
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0179
Next Token : 1, Posbility: 0.0179
Next Token :  when, Posbility: 0.0334
Next Token : ', Posbility: 0.0378
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : if, Posbility: 0.0017
Next Token : ::, Posbility: 0.0022
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0036
Next Token :  1, Posbility: 0.0098
Next Token : 
, Posbility: 0.1187
Next Token :  [, Posbility: 0.3223
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0231
Next Token : List, Posbility: 0.0625
Next Token : cube, Posbility: 0.0708
Next Token : (, Posbility: 0.1030
Next Token : x, Posbility: 0.6719
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0107
Next Token : ^, Posbility: 0.0138
Next Token : s, Posbility: 0.0330
Next Token :  *, Posbility: 0.3125
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : Ã—, Posbility: 0.0015
Next Token : x, Posbility: 0.0046
Next Token : :, Posbility: 0.0439
Next Token : ^, Posbility: 0.4707
Next Token : ::, Posbility: 0.4707
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0017
Next Token : !, Posbility: 0.0027
Next Token : :, Posbility: 0.0031
Next Token :  [, Posbility: 0.0122
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0011
Next Token : square, Posbility: 0.0014
Next Token : x, Posbility: 0.0986
Next Token : (, Posbility: 0.1621
Next Token : cube, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cube
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0011
Next Token :  ((, Posbility: 0.0011
Next Token :  [, Posbility: 0.0015
Next Token : (, Posbility: 0.0178
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : ([, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.1826
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0033
Next Token :  +, Posbility: 0.0033
Next Token :  , Posbility: 0.0089
Next Token : 

, Posbility: 0.4844
Next Token : 
, Posbility: 0.4844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0217
Next Token : (, Posbility: 0.0315
Next Token : in, Posbility: 0.0337
Next Token :   , Posbility: 0.0972
Next Token : let, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0084
Next Token :  find, Posbility: 0.0422
Next Token :  main, Posbility: 0.0791
Next Token :  , Posbility: 0.3125
Next Token :  rec, Posbility: 0.4551
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0256
Next Token :  rec, Posbility: 0.0330
Next Token :  count, Posbility: 0.0422
Next Token :  find, Posbility: 0.0791
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : add, Posbility: 0.0076
Next Token : map, Posbility: 0.0076
Next Token : print, Posbility: 0.0098
Next Token : square, Posbility: 0.0161
Next Token : cube, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0131
Next Token : d, Posbility: 0.0168
Next Token :  , Posbility: 0.1602
Next Token : _, Posbility: 0.1602
Next Token : s, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0298
Next Token : ', Posbility: 0.0718
Next Token :  , Posbility: 0.0918
Next Token : 2, Posbility: 0.1182
Next Token : _, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0366
Next Token : list, Posbility: 0.0684
Next Token : iter, Posbility: 0.0684
Next Token : rec, Posbility: 0.0776
Next Token : of, Posbility: 0.0996
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0005
Next Token :  a, Posbility: 0.0009
Next Token :  =, Posbility: 0.0039
Next Token :  , Posbility: 0.0289
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0564
Next Token : lists, Posbility: 0.0564
Next Token : cube, Posbility: 0.0564
Next Token : elements, Posbility: 0.0933
Next Token : list, Posbility: 0.2236
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0131
Next Token : _, Posbility: 0.0459
Next Token :  l, Posbility: 0.0459
Next Token :  =, Posbility: 0.0972
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0165
Next Token : lst, Posbility: 0.0240
Next Token : ls, Posbility: 0.0240
Next Token : (, Posbility: 0.0449
Next Token : x, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : list, Posbility: 0.0014
Next Token :  =, Posbility: 0.0292
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0011
Next Token :  list, Posbility: 0.0011
Next Token : _, Posbility: 0.0024
Next Token :  , Posbility: 0.0139
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  list, Posbility: 0.0018
Next Token :  [, Posbility: 0.0048
Next Token : 
, Posbility: 0.4922
Next Token :  , Posbility: 0.4922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0132
Next Token : 
, Posbility: 0.0168
Next Token : x, Posbility: 0.0192
Next Token : List, Posbility: 0.0859
Next Token : cube, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0147
Next Token :  ~, Posbility: 0.0189
Next Token : _, Posbility: 0.0311
Next Token :  [, Posbility: 0.1089
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0021
Next Token : [0, Posbility: 0.0035
Next Token : List, Posbility: 0.0293
Next Token : x, Posbility: 0.2773
Next Token : (, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0110
Next Token : list, Posbility: 0.0141
Next Token : Array, Posbility: 0.0205
Next Token : map, Posbility: 0.0383
Next Token : List, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.0017
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0172
Next Token : filter, Posbility: 0.0250
Next Token : of, Posbility: 0.0322
Next Token : rev, Posbility: 0.0530
Next Token : map, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token :  ~, Posbility: 0.0045
Next Token :  i, Posbility: 0.0057
Next Token : _, Posbility: 0.0065
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Cube, Posbility: 0.0322
Next Token : f, Posbility: 0.0469
Next Token : x, Posbility: 0.1855
Next Token : cube, Posbility: 0.2100
Next Token : (, Posbility: 0.4453
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0088
Next Token : function, Posbility: 0.0099
Next Token : Cube, Posbility: 0.0099
Next Token : cube, Posbility: 0.0113
Next Token : fun, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0033
Next Token :  a, Posbility: 0.0115
Next Token :  v, Posbility: 0.0189
Next Token :  i, Posbility: 0.0403
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0103
Next Token : e, Posbility: 0.0103
Next Token : y, Posbility: 0.0103
Next Token : n, Posbility: 0.0170
Next Token : x, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : i, Posbility: 0.0004
Next Token : ->, Posbility: 0.0006
Next Token : s, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0022
Next Token :  Some, Posbility: 0.0098
Next Token :  1, Posbility: 0.0161
Next Token :  [, Posbility: 0.0723
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0131
Next Token : Cube, Posbility: 0.0315
Next Token : (, Posbility: 0.0518
Next Token : cube, Posbility: 0.0518
Next Token : x, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0703
Next Token : **, Posbility: 0.0703
Next Token : *, Posbility: 0.1162
Next Token : ^, Posbility: 0.1914
Next Token :  *, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  100), Posbility: 0.0002
Next Token :  4), Posbility: 0.0002
Next Token :  2), Posbility: 0.0004
Next Token :  3), Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : 3, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : )), Posbility: 0.0007
Next Token :  +, Posbility: 0.0008
Next Token : ), Posbility: 0.0229
Next Token :  *, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0044
Next Token :  *, Posbility: 0.0056
Next Token : ));, Posbility: 0.0072
Next Token : )), Posbility: 0.0286
Next Token : ), Posbility: 0.9492
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : cube, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : )), Posbility: 0.0040
Next Token : );, Posbility: 0.0067
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0024
Next Token :  (*, Posbility: 0.0039
Next Token :  , Posbility: 0.0121
Next Token : 

, Posbility: 0.4551
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0109
Next Token : ```, Posbility: 0.0140
Next Token : (, Posbility: 0.0261
Next Token : 

, Posbility: 0.0315
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0106
Next Token :  list, Posbility: 0.0137
Next Token :  main, Posbility: 0.0327
Next Token :  , Posbility: 0.3516
Next Token :  rec, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0243
Next Token :  count, Posbility: 0.0243
Next Token :  rec, Posbility: 0.0311
Next Token :  find, Posbility: 0.0452
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0046
Next Token : map, Posbility: 0.0046
Next Token : print, Posbility: 0.0067
Next Token : square, Posbility: 0.0076
Next Token : cube, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : d, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token : _, Posbility: 0.0289
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : ', Posbility: 0.0009
Next Token : 2, Posbility: 0.0025
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0034
Next Token : iter, Posbility: 0.0034
Next Token : with, Posbility: 0.0038
Next Token : rec, Posbility: 0.0056
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0317
Next Token : array, Posbility: 0.0361
Next Token : int, Posbility: 0.0461
Next Token : set, Posbility: 0.0593
Next Token : list, Posbility: 0.3867
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0050
Next Token :  , Posbility: 0.0366
Next Token : 2, Posbility: 0.0996
Next Token : ', Posbility: 0.0996
Next Token : _, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : with, Posbility: 0.0469
Next Token : rec, Posbility: 0.0469
Next Token : 2, Posbility: 0.0532
Next Token : opt, Posbility: 0.0684
Next Token : of, Posbility: 0.0879
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : lists, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0006
Next Token : int, Posbility: 0.0048
Next Token : cube, Posbility: 0.0129
Next Token : list, Posbility: 0.2598
Next Token : lists, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0010
Next Token :  l, Posbility: 0.0010
Next Token : _, Posbility: 0.0022
Next Token :  =, Posbility: 0.0942
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0063
Next Token : (, Posbility: 0.0072
Next Token : lists, Posbility: 0.0118
Next Token : xl, Posbility: 0.0134
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0004
Next Token : _, Posbility: 0.0004
Next Token : sl, Posbility: 0.0028
Next Token :  =, Posbility: 0.0040
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0012
Next Token :  , Posbility: 0.0089
Next Token : _, Posbility: 0.0089
Next Token : s, Posbility: 0.1777
Next Token :  =, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  [, Posbility: 0.0006
Next Token :   , Posbility: 0.0010
Next Token : 
, Posbility: 0.3184
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0035
Next Token : (, Posbility: 0.0057
Next Token : 
, Posbility: 0.0095
Next Token : List, Posbility: 0.1152
Next Token : cube, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  ((, Posbility: 0.0043
Next Token : _, Posbility: 0.4961
Next Token :  , Posbility: 0.4961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token : cube, Posbility: 0.0031
Next Token : List, Posbility: 0.0051
Next Token : x, Posbility: 0.0123
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : cube, Posbility: 0.0021
Next Token : 
, Posbility: 0.0040
Next Token : x, Posbility: 0.0045
Next Token : Map, Posbility: 0.0095
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0030
Next Token : fold, Posbility: 0.0104
Next Token : flatten, Posbility: 0.0134
Next Token : flat, Posbility: 0.0284
Next Token : map, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0022
Next Token :  ((, Posbility: 0.0022
Next Token : 2, Posbility: 0.0040
Next Token : _, Posbility: 0.0045
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : square, Posbility: 0.0008
Next Token : x, Posbility: 0.0155
Next Token : List, Posbility: 0.0155
Next Token : cube, Posbility: 0.1147
Next Token : (, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : function, Posbility: 0.0012
Next Token : Cube, Posbility: 0.0018
Next Token : cube, Posbility: 0.0248
Next Token : List, Posbility: 0.0361
Next Token : fun, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0014
Next Token :  [, Posbility: 0.0020
Next Token :  list, Posbility: 0.0056
Next Token :  l, Posbility: 0.0466
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0050
Next Token : (, Posbility: 0.0064
Next Token : xl, Posbility: 0.0064
Next Token : y, Posbility: 0.0106
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0004
Next Token : list, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token :  , Posbility: 0.4980
Next Token : s, Posbility: 0.4980
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0004
Next Token : 2, Posbility: 0.0009
Next Token : 1, Posbility: 0.0022
Next Token : _, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  list, Posbility: 0.0005
Next Token :  [, Posbility: 0.0051
Next Token : 
, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0010
Next Token : (, Posbility: 0.0204
Next Token : x, Posbility: 0.1504
Next Token : cube, Posbility: 0.4082
Next Token : List, Posbility: 0.4082
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flatten, Posbility: 0.0003
Next Token : iter, Posbility: 0.0004
Next Token : flat, Posbility: 0.0015
Next Token : fold, Posbility: 0.0109
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : 2, Posbility: 0.0009
Next Token :  ((, Posbility: 0.0009
Next Token :  (*, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : Cube, Posbility: 0.0002
Next Token : x, Posbility: 0.0040
Next Token : cube, Posbility: 0.0109
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : lambda, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : cube, Posbility: 0.0003
Next Token : fn, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0001
Next Token :  a, Posbility: 0.0004
Next Token :  i, Posbility: 0.0012
Next Token :  v, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0003
Next Token : e, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : y, Posbility: 0.0229
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : ->, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : cube, Posbility: 0.0007
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : *, Posbility: 0.0006
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : *, Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0001
Next Token :  *, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : )), Posbility: 0.0008
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ))), Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : )), Posbility: 0.0110
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token : )), Posbility: 0.0006
Next Token : );, Posbility: 0.0010
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0005
Next Token :  (*, Posbility: 0.0005
Next Token :  , Posbility: 0.0033
Next Token : 

, Posbility: 0.3750
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)

 score:False
Error type: noerr
---------------------------
Next Token : Let, Posbility: 0.0076
Next Token : val, Posbility: 0.0161
Next Token : 

, Posbility: 0.0234
Next Token : (, Posbility: 0.0364
Next Token : let, Posbility: 0.6055
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0071
Next Token :  list, Posbility: 0.0071
Next Token :  main, Posbility: 0.0281
Next Token :  , Posbility: 0.2656
Next Token :  rec, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0140
Next Token :  rec, Posbility: 0.0179
Next Token :  list, Posbility: 0.0261
Next Token :  find, Posbility: 0.0295
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0041
Next Token : map, Posbility: 0.0041
Next Token : print, Posbility: 0.0077
Next Token : square, Posbility: 0.0077
Next Token : cube, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : d, Posbility: 0.0015
Next Token :  , Posbility: 0.0066
Next Token : _, Posbility: 0.0178
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 0.0004
Next Token : 2, Posbility: 0.0019
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0030
Next Token : from, Posbility: 0.0038
Next Token : list, Posbility: 0.0043
Next Token : with, Posbility: 0.0049
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _3_, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0237
Next Token : tuple, Posbility: 0.0237
Next Token : sets, Posbility: 0.0269
Next Token : list, Posbility: 0.2891
Next Token : lists, Posbility: 0.2891
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0012
Next Token : 2, Posbility: 0.0019
Next Token :  =, Posbility: 0.0625
Next Token :  , Posbility: 0.4629
Next Token : _, Posbility: 0.4629
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0037
Next Token : in, Posbility: 0.0079
Next Token : with, Posbility: 0.0101
Next Token : and, Posbility: 0.0275
Next Token : of, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0061
Next Token : tuple, Posbility: 0.0061
Next Token : list, Posbility: 0.0167
Next Token : cube, Posbility: 0.0167
Next Token : lists, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  of, Posbility: 0.0017
Next Token : 2, Posbility: 0.0028
Next Token :  =, Posbility: 0.0442
Next Token : _, Posbility: 0.0566
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0005
Next Token : y, Posbility: 0.0009
Next Token : lists, Posbility: 0.0013
Next Token : (, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : sl, Posbility: 0.0001
Next Token :  =, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0052
Next Token : s, Posbility: 0.0109
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :   , Posbility: 0.0008
Next Token : 
, Posbility: 0.1187
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0012
Next Token : 
, Posbility: 0.0019
Next Token : (, Posbility: 0.0024
Next Token : List, Posbility: 0.0085
Next Token : cube, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  ((, Posbility: 0.0014
Next Token : _, Posbility: 0.0757
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : cube, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token : List, Posbility: 0.0006
Next Token : x, Posbility: 0.0015
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fun, Posbility: 0.0013
Next Token : cube, Posbility: 0.0017
Next Token : Map, Posbility: 0.0024
Next Token : 
, Posbility: 0.0052
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0003
Next Token : flatten, Posbility: 0.0005
Next Token : fold, Posbility: 0.0013
Next Token : flat, Posbility: 0.0032
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0008
Next Token :  ((, Posbility: 0.0013
Next Token : 
, Posbility: 0.0025
Next Token : 2, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : x, Posbility: 0.0008
Next Token : List, Posbility: 0.0032
Next Token : cube, Posbility: 0.0046
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0002
Next Token : cube, Posbility: 0.0002
Next Token : function, Posbility: 0.0007
Next Token : List, Posbility: 0.0036
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0008
Next Token :  [[, Posbility: 0.0013
Next Token :  [, Posbility: 0.0015
Next Token :  l, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0019
Next Token : ls, Posbility: 0.0024
Next Token : (, Posbility: 0.0031
Next Token : y, Posbility: 0.0052
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : sl, Posbility: 0.0003
Next Token :  , Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0014
Next Token : _, Posbility: 0.0038
Next Token : 1, Posbility: 0.0063
Next Token : s, Posbility: 0.0593
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  list, Posbility: 0.0003
Next Token :  [, Posbility: 0.0009
Next Token : 
, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0009
Next Token : (, Posbility: 0.0023
Next Token : x, Posbility: 0.0023
Next Token : cube, Posbility: 0.0471
Next Token : List, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0001
Next Token : flatten, Posbility: 0.0001
Next Token : fold, Posbility: 0.0006
Next Token : flat, Posbility: 0.0009
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  ((, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : Cube, Posbility: 0.0001
Next Token : List, Posbility: 0.0010
Next Token : cube, Posbility: 0.0046
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : lambda, Posbility: 0.0001
Next Token : fn, Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  v, Posbility: 0.0006
Next Token :  list, Posbility: 0.0010
Next Token :  l, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0008
Next Token : ls, Posbility: 0.0008
Next Token : (, Posbility: 0.0014
Next Token : y, Posbility: 0.0752
Next Token : x, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : i, Posbility: 0.0002
Next Token : s, Posbility: 0.0757
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0001
Next Token : (, Posbility: 0.0024
Next Token : cube, Posbility: 0.0024
Next Token : List, Posbility: 0.0179
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : *, Posbility: 0.0002
Next Token :  +, Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : s, Posbility: 0.0013
Next Token :  *, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : ), Posbility: 0.0007
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : Cube, Posbility: 0.0000
Next Token : cube, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0002
Next Token : )), Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 0.0017
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0006
Next Token : 
, Posbility: 0.0007
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : cube, Posbility: 0.0014
Next Token : List, Posbility: 0.0106
Next Token : (, Posbility: 0.0289
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  *, Posbility: 0.0009
Next Token : )), Posbility: 0.0025
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : cube, Posbility: 0.0002
Next Token : List, Posbility: 0.0015
Next Token : (, Posbility: 0.0085
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : )), Posbility: 0.0004
Next Token : );, Posbility: 0.0005
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0004
Next Token : , Posbility: 0.0010
Next Token :  , Posbility: 0.0026
Next Token : 

, Posbility: 0.3457
Next Token : 
, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0072
Next Token : 

, Posbility: 0.0120
Next Token : val, Posbility: 0.0135
Next Token : (, Posbility: 0.0287
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0021
Next Token :  test, Posbility: 0.0023
Next Token :  main, Posbility: 0.0064
Next Token :  , Posbility: 0.1289
Next Token :  rec, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0059
Next Token :  list, Posbility: 0.0110
Next Token :  rec, Posbility: 0.0110
Next Token :  find, Posbility: 0.0125
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0020
Next Token : print, Posbility: 0.0030
Next Token : lists, Posbility: 0.0034
Next Token : square, Posbility: 0.0043
Next Token : cube, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : d, Posbility: 0.0005
Next Token :  , Posbility: 0.0031
Next Token : _, Posbility: 0.0109
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 0.0003
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0016
Next Token : from, Posbility: 0.0019
Next Token : with, Posbility: 0.0021
Next Token : list, Posbility: 0.0024
Next Token : of, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0205
Next Token : tuple, Posbility: 0.0298
Next Token : sets, Posbility: 0.0491
Next Token : list, Posbility: 0.0718
Next Token : lists, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0005
Next Token : 2, Posbility: 0.0034
Next Token :  =, Posbility: 0.0093
Next Token :  , Posbility: 0.1455
Next Token : _, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0030
Next Token : with, Posbility: 0.0049
Next Token : and, Posbility: 0.0133
Next Token : lists, Posbility: 0.0171
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : _4_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sets, Posbility: 0.0113
Next Token : tuple, Posbility: 0.0239
Next Token : list, Posbility: 0.0308
Next Token : cube, Posbility: 0.0508
Next Token : lists, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0007
Next Token :  =, Posbility: 0.0010
Next Token : 2, Posbility: 0.0095
Next Token :  , Posbility: 0.0177
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0018
Next Token : with, Posbility: 0.0049
Next Token : lists, Posbility: 0.0071
Next Token : and, Posbility: 0.0320
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : strings, Posbility: 0.0009
Next Token : sets, Posbility: 0.0009
Next Token : int, Posbility: 0.0024
Next Token : list, Posbility: 0.0024
Next Token : lists, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  ..., Posbility: 0.0015
Next Token : _, Posbility: 0.0024
Next Token :  =, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : lists, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sl, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token : s, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0009
Next Token : 
, Posbility: 0.1641
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : 
, Posbility: 0.0041
Next Token : cube, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : 
, Posbility: 0.0015
Next Token : _, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : cube, Posbility: 0.0001
Next Token : \, Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : fun, Posbility: 0.0003
Next Token : 
, Posbility: 0.0067
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : flat, Posbility: 0.0001
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token : 2, Posbility: 0.0015
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : cube, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : xxx, Posbility: 0.0005
Next Token : xl, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : sl, Posbility: 0.0004
Next Token :  , Posbility: 0.0124
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : 1, Posbility: 0.0014
Next Token : _, Posbility: 0.0037
Next Token : s, Posbility: 0.0947
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : 
, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token : cube, Posbility: 0.0009
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : cube, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0004
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  vs, Posbility: 0.0001
Next Token :  l, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0002
Next Token : xl, Posbility: 0.0003
Next Token : xy, Posbility: 0.0004
Next Token : y, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : sl, Posbility: 0.0003
Next Token :  , Posbility: 0.1191
Next Token : s, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0048
Next Token : 1, Posbility: 0.0054
Next Token : _, Posbility: 0.0130
Next Token : 2, Posbility: 0.0583
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0110
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cube, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0067
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0000
Next Token : concat, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : )), Posbility: 0.0004
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ))), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : )), Posbility: 0.0046
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0012
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : 

, Posbility: 0.0005
Next Token : );, Posbility: 0.0005
Next Token : )), Posbility: 0.0009
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token : , Posbility: 0.0010
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.3184
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0056
Next Token : ```, Posbility: 0.0072
Next Token : val, Posbility: 0.0105
Next Token : (, Posbility: 0.0209
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0012
Next Token :  list, Posbility: 0.0014
Next Token :  main, Posbility: 0.0029
Next Token :  , Posbility: 0.0835
Next Token :  rec, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0042
Next Token :  list, Posbility: 0.0070
Next Token :  rec, Posbility: 0.0070
Next Token :  find, Posbility: 0.0089
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0010
Next Token : print, Posbility: 0.0016
Next Token : lists, Posbility: 0.0016
Next Token : square, Posbility: 0.0024
Next Token : cube, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : d, Posbility: 0.0004
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0010
Next Token : with, Posbility: 0.0010
Next Token : list, Posbility: 0.0011
Next Token : from, Posbility: 0.0011
Next Token : of, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0145
Next Token : tuple, Posbility: 0.0164
Next Token : sets, Posbility: 0.0271
Next Token : list, Posbility: 0.0393
Next Token : lists, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 0.0008
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0011
Next Token : with, Posbility: 0.0019
Next Token : and, Posbility: 0.0031
Next Token : lists, Posbility: 0.0085
Next Token : of, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _4_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0003
Next Token : _3_, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0023
Next Token : array, Posbility: 0.0023
Next Token : tuple, Posbility: 0.0023
Next Token : list, Posbility: 0.0172
Next Token : lists, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0004
Next Token : with, Posbility: 0.0005
Next Token : lists, Posbility: 0.0025
Next Token : and, Posbility: 0.0028
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _3_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0009
Next Token : array, Posbility: 0.0009
Next Token : strings, Posbility: 0.0015
Next Token : list, Posbility: 0.0066
Next Token : lists, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : with, Posbility: 0.0002
Next Token : lists, Posbility: 0.0004
Next Token : and, Posbility: 0.0028
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sets, Posbility: 0.0001
Next Token : int, Posbility: 0.0002
Next Token : strings, Posbility: 0.0002
Next Token : list, Posbility: 0.0006
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0011
Next Token :  ..., Posbility: 0.0024
Next Token : _, Posbility: 0.0031
Next Token :  =, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : s, Posbility: 0.0007
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :   , Posbility: 0.0009
Next Token : 
, Posbility: 0.1328
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0001
Next Token : \, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : 
, Posbility: 0.0032
Next Token : cube, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : 
, Posbility: 0.0022
Next Token : _, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : 
, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : fun, Posbility: 0.0002
Next Token : 
, Posbility: 0.0046
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bind, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : cube, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : function, Posbility: 0.0007
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : xl, Posbility: 0.0000
Next Token : xxx, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : s, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0000
Next Token : bind, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0001
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  vs, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xl, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : xy, Posbility: 0.0001
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : sl, Posbility: 0.0001
Next Token :  , Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0015
Next Token : s, Posbility: 0.0066
Next Token : _, Posbility: 0.0066
Next Token : 2, Posbility: 0.0066
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : xxx, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.2695
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ))), Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0006
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0022
Next Token :  , Posbility: 0.0098
Next Token :  in, Posbility: 0.0142
Next Token : 

, Posbility: 0.3652
Next Token : 
, Posbility: 0.6016
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0095
Next Token : val, Posbility: 0.0101
Next Token : in, Posbility: 0.0130
Next Token : (, Posbility: 0.0201
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0009
Next Token :  list, Posbility: 0.0012
Next Token :  main, Posbility: 0.0020
Next Token :  , Posbility: 0.0664
Next Token :  rec, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0034
Next Token :  list, Posbility: 0.0049
Next Token :  rec, Posbility: 0.0049
Next Token :  find, Posbility: 0.0056
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0008
Next Token : print, Posbility: 0.0010
Next Token : lists, Posbility: 0.0010
Next Token : square, Posbility: 0.0017
Next Token : cube, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : d, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0006
Next Token : with, Posbility: 0.0006
Next Token : list, Posbility: 0.0007
Next Token : from, Posbility: 0.0007
Next Token : of, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0079
Next Token : strings, Posbility: 0.0090
Next Token : sets, Posbility: 0.0168
Next Token : list, Posbility: 0.0245
Next Token : lists, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0004
Next Token : with, Posbility: 0.0010
Next Token : and, Posbility: 0.0013
Next Token : lists, Posbility: 0.0019
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token : _3_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0009
Next Token : strings, Posbility: 0.0024
Next Token : sets, Posbility: 0.0024
Next Token : list, Posbility: 0.0065
Next Token : lists, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : with, Posbility: 0.0002
Next Token : and, Posbility: 0.0006
Next Token : lists, Posbility: 0.0009
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _3_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0001
Next Token : sets, Posbility: 0.0001
Next Token : strings, Posbility: 0.0003
Next Token : list, Posbility: 0.0007
Next Token : lists, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : with, Posbility: 0.0001
Next Token : lists, Posbility: 0.0001
Next Token : and, Posbility: 0.0006
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _3_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0001
Next Token : tuple, Posbility: 0.0001
Next Token : strings, Posbility: 0.0003
Next Token : list, Posbility: 0.0007
Next Token : lists, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0001
Next Token : with, Posbility: 0.0001
Next Token : lists, Posbility: 0.0004
Next Token : and, Posbility: 0.0012
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0001
Next Token : sets, Posbility: 0.0001
Next Token : strings, Posbility: 0.0001
Next Token : list, Posbility: 0.0009
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 0.0045
Next Token :  =, Posbility: 0.0178
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :   , Posbility: 0.0007
Next Token : 
, Posbility: 0.0674
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cube, Posbility: 0.0001
Next Token : \, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0019
Next Token : cube, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : \, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : fun, Posbility: 0.0001
Next Token : 
, Posbility: 0.0019
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bind, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : cube, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xl, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  , Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bind, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xxx, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token :  , Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token : 2, Posbility: 0.0025
Next Token : _, Posbility: 0.0028
Next Token : s, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xxx, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sl, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.1826
Next Token : s, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (__, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ))), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ))), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0007
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : )), Posbility: 0.0004
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0012
Next Token :  in, Posbility: 0.0089
Next Token :  , Posbility: 0.0349
Next Token : 

, Posbility: 0.3320
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0053
Next Token : in, Posbility: 0.0064
Next Token : module, Posbility: 0.0064
Next Token : (, Posbility: 0.0154
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0003
Next Token :  list, Posbility: 0.0005
Next Token :  main, Posbility: 0.0005
Next Token :  , Posbility: 0.0292
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0015
Next Token :  list, Posbility: 0.0021
Next Token :  find, Posbility: 0.0024
Next Token :  rec, Posbility: 0.0024
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0004
Next Token : print, Posbility: 0.0004
Next Token : lists, Posbility: 0.0005
Next Token : square, Posbility: 0.0009
Next Token : cube, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cube
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : with, Posbility: 0.0003
Next Token : list, Posbility: 0.0003
Next Token : all, Posbility: 0.0004
Next Token : from, Posbility: 0.0004
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0001
Next Token : _3_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0033
Next Token : strings, Posbility: 0.0054
Next Token : sets, Posbility: 0.0089
Next Token : list, Posbility: 0.0146
Next Token : lists, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0002
Next Token : with, Posbility: 0.0003
Next Token : and, Posbility: 0.0003
Next Token : lists, Posbility: 0.0006
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _4_, Posbility: 0.0000
Next Token : _3_, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0004
Next Token : strings, Posbility: 0.0007
Next Token : sets, Posbility: 0.0012
Next Token : list, Posbility: 0.0015
Next Token : lists, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : with, Posbility: 0.0001
Next Token : and, Posbility: 0.0002
Next Token : lists, Posbility: 0.0002
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _3_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0001
Next Token : sets, Posbility: 0.0001
Next Token : strings, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : with, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : and, Posbility: 0.0001
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _4_, Posbility: 0.0000
Next Token : _3_, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0000
Next Token : sets, Posbility: 0.0000
Next Token : strings, Posbility: 0.0001
Next Token : list, Posbility: 0.0002
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : with, Posbility: 0.0000
Next Token : and, Posbility: 0.0003
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _3_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sets, Posbility: 0.0000
Next Token : array, Posbility: 0.0000
Next Token : strings, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : with, Posbility: 0.0000
Next Token : lists, Posbility: 0.0002
Next Token : and, Posbility: 0.0006
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : array, Posbility: 0.0000
Next Token : sets, Posbility: 0.0000
Next Token : strings, Posbility: 0.0001
Next Token : list, Posbility: 0.0006
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 0.0035
Next Token :  =, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0007
Next Token : 
, Posbility: 0.0601
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : \, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token : cube, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cube
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0012
Next Token : _, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes 
 score:False
Error type: noerr
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : fun, Posbility: 0.0001
Next Token : 
, Posbility: 0.0013
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bind, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : cube, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xl, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  , Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bind, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : fold, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  vs, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xl, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token :  , Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token : _, Posbility: 0.0006
Next Token : s, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : flat, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: noerr
---------------------------
Next Token : Fun, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  vs, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xxx, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : sl, Posbility: 0.0000
Next Token :  , Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (
 score:False
Error type: noerr
---------------------------
Next Token : func, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : xy, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0052
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token :  *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cube, Posbility: 0.0000
Next Token : z, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token : )), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : z, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : ))), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : )), Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ))), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : )), Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find cubes of individual elements in a list. *)
let rec cubes xs =
  match xs with
  | [] -> []
  | x :: xs -> x :: cubes xs
let rec cubes_of_list xs = cubes (List.map (fun x -> x * x * x) xs)
let rec cubes_of_list_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs)
let rec cubes_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) xs)
let rec cubes_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists xs = cubes (List.map (fun xs -> List.map (fun xs -> List.map (fun xs -> List.map (fun x -> x * x * x) xs) xs) xs) x
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>