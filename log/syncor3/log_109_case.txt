code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  negative, Posbility: 0.0089
Next Token :  sort, Posbility: 0.0452
Next Token :  re, Posbility: 0.0742
Next Token :  , Posbility: 0.2021
Next Token :  rec, Posbility: 0.5508
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0280
Next Token :  sort, Posbility: 0.0405
Next Token :  loop, Posbility: 0.0461
Next Token :  re, Posbility: 0.0522
Next Token :  , Posbility: 0.4941
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0366
Next Token : perm, Posbility: 0.0415
Next Token : helper, Posbility: 0.0532
Next Token : quick, Posbility: 0.0684
Next Token : swap, Posbility: 0.1279
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0260
Next Token : s, Posbility: 0.0260
Next Token :  =, Posbility: 0.0549
Next Token :  , Posbility: 0.2793
Next Token : _, Posbility: 0.4609
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0342
Next Token : pos, Posbility: 0.0342
Next Token : sort, Posbility: 0.0342
Next Token : elements, Posbility: 0.0498
Next Token : neg, Posbility: 0.0820
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pos, Posbility: 0.0192
Next Token :  =, Posbility: 0.0359
Next Token :  , Posbility: 0.0591
Next Token : s, Posbility: 0.0859
Next Token : _, Posbility: 0.7227
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : before, Posbility: 0.0059
Next Token : neg, Posbility: 0.0059
Next Token : to, Posbility: 0.0161
Next Token : and, Posbility: 0.0437
Next Token : pos, Posbility: 0.8789
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0117
Next Token : (, Posbility: 0.0248
Next Token :  =, Posbility: 0.1611
Next Token : _, Posbility: 0.1826
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0304
Next Token : n, Posbility: 0.0728
Next Token : x, Posbility: 0.1060
Next Token : (, Posbility: 0.1357
Next Token : arr, Posbility: 0.5391
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0287
Next Token :  a, Posbility: 0.0325
Next Token :  i, Posbility: 0.0688
Next Token :  =, Posbility: 0.0884
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0024
Next Token : ind, Posbility: 0.0030
Next Token : (, Posbility: 0.0082
Next Token : idx, Posbility: 0.0106
Next Token : n, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0050
Next Token :  pos, Posbility: 0.0199
Next Token :  , Posbility: 0.0422
Next Token :  i, Posbility: 0.0422
Next Token :  =, Posbility: 0.8477
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0035
Next Token :  function, Posbility: 0.0045
Next Token :  match, Posbility: 0.0260
Next Token :  , Posbility: 0.0908
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0051
Next Token :    , Posbility: 0.0066
Next Token : 	, Posbility: 0.0139
Next Token :     , Posbility: 0.1025
Next Token :   , Posbility: 0.8594
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0045
Next Token : (, Posbility: 0.0074
Next Token : let, Posbility: 0.1162
Next Token : match, Posbility: 0.2461
Next Token : if, Posbility: 0.5898
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  0, Posbility: 0.0017
Next Token :  !, Posbility: 0.0019
Next Token :  not, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0009
Next Token : arr, Posbility: 0.0065
Next Token : Array, Posbility: 0.0065
Next Token : (, Posbility: 0.0176
Next Token : n, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0233
Next Token :  >=, Posbility: 0.0386
Next Token :  <=, Posbility: 0.1729
Next Token :  , Posbility: 0.2852
Next Token :  =, Posbility: 0.4688
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token :  [], Posbility: 0.0023
Next Token :  , Posbility: 0.0063
Next Token :  1, Posbility: 0.0469
Next Token :  0, Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0020
Next Token :  , Posbility: 0.0078
Next Token :  ||, Posbility: 0.0396
Next Token : 
, Posbility: 0.0447
Next Token :  then, Posbility: 0.8984
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0040
Next Token :  None, Posbility: 0.0065
Next Token :  [], Posbility: 0.0201
Next Token : 
, Posbility: 0.3555
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0229
Next Token : (), Posbility: 0.0229
Next Token : (, Posbility: 0.0260
Next Token : return, Posbility: 0.1167
Next Token : arr, Posbility: 0.7578
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0109
Next Token : ;, Posbility: 0.0179
Next Token :  , Posbility: 0.0334
Next Token :  else, Posbility: 0.2471
Next Token : 
, Posbility: 0.6719
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :       , Posbility: 0.0007
Next Token :  , Posbility: 0.0012
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 0.0001
Next Token : let, Posbility: 0.0005
Next Token : elif, Posbility: 0.0006
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0024
Next Token :  match, Posbility: 0.0110
Next Token :  {, Posbility: 0.0557
Next Token : 
, Posbility: 0.3203
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : begin, Posbility: 0.0170
Next Token : (, Posbility: 0.0405
Next Token : let, Posbility: 0.0591
Next Token : swap, Posbility: 0.0977
Next Token : if, Posbility: 0.7188
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0014
Next Token :  0, Posbility: 0.0016
Next Token :  int, Posbility: 0.0016
Next Token :  not, Posbility: 0.0107
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Arr, Posbility: 0.0136
Next Token : Array, Posbility: 0.0610
Next Token : (, Posbility: 0.0786
Next Token : n, Posbility: 0.2734
Next Token : arr, Posbility: 0.5117
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0], Posbility: 0.0488
Next Token : [, Posbility: 0.1030
Next Token :  , Posbility: 0.1328
Next Token :  [, Posbility: 0.1328
Next Token : ., Posbility: 0.4629
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (0), Posbility: 0.0204
Next Token : [0, Posbility: 0.0432
Next Token : (, Posbility: 0.2197
Next Token : [, Posbility: 0.3184
Next Token : [0], Posbility: 0.3613
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0029
Next Token :  =, Posbility: 0.0240
Next Token :  <=, Posbility: 0.0510
Next Token :  >=, Posbility: 0.2930
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ≤, Posbility: 0.0015
Next Token : ≥, Posbility: 0.0019
Next Token : /, Posbility: 0.0040
Next Token : >, Posbility: 0.2207
Next Token : <, Posbility: 0.7695
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0022
Next Token :  , Posbility: 0.0061
Next Token :  0.0, Posbility: 0.0101
Next Token : >, Posbility: 0.0742
Next Token :  0, Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ||, Posbility: 0.0040
Next Token : 
, Posbility: 0.0065
Next Token :  and, Posbility: 0.0065
Next Token :  &&, Posbility: 0.1157
Next Token :  then, Posbility: 0.8555
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0033
Next Token :  {, Posbility: 0.0048
Next Token :  [, Posbility: 0.0079
Next Token : 
, Posbility: 0.4883
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0259
Next Token : 
, Posbility: 0.1025
Next Token : arr, Posbility: 0.1025
Next Token : (, Posbility: 0.1689
Next Token : swap, Posbility: 0.5195
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token :  ~, Posbility: 0.0008
Next Token :  , Posbility: 0.0259
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_
 score:False
Error type: noerr
---------------------------
Next Token : ne, Posbility: 0.0000
Next Token : pair, Posbility: 0.0000
Next Token : negative, Posbility: 0.0000
Next Token : pos, Posbility: 0.0025
Next Token : neg, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  pos, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : po, Posbility: 0.0000
Next Token : positive, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0125
Next Token :  [, Posbility: 0.0160
Next Token :  ~, Posbility: 0.0264
Next Token : (, Posbility: 0.0557
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0013
Next Token : Array, Posbility: 0.0022
Next Token : ([, Posbility: 0.0269
Next Token : arr, Posbility: 0.0728
Next Token : (, Posbility: 0.8867
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : array, Posbility: 0.0228
Next Token : Arr, Posbility: 0.0228
Next Token : List, Posbility: 0.0376
Next Token : arr, Posbility: 0.1162
Next Token : Array, Posbility: 0.7578
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2., Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : init, Posbility: 0.0625
Next Token : tail, Posbility: 0.0625
Next Token : rev, Posbility: 0.0908
Next Token : (, Posbility: 0.1030
Next Token : remove, Posbility: 0.1328
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : At, Posbility: 0.0093
Next Token :  1, Posbility: 0.0251
Next Token :  0, Posbility: 0.2383
Next Token : _, Posbility: 0.3066
Next Token :  , Posbility: 0.3945
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0], Posbility: 0.0027
Next Token : (0), Posbility: 0.0034
Next Token : (, Posbility: 0.0693
Next Token : n, Posbility: 0.0693
Next Token : arr, Posbility: 0.8438
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0023
Next Token :  , Posbility: 0.0062
Next Token :  0), Posbility: 0.0170
Next Token :  0, Posbility: 0.0459
Next Token : ., Posbility: 0.9258
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0198
Next Token : (0)), Posbility: 0.0198
Next Token : [0];, Posbility: 0.0417
Next Token : [0]), Posbility: 0.3496
Next Token : [0], Posbility: 0.5117
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1, Posbility: 0.0022
Next Token :  0, Posbility: 0.0031
Next Token :  0), Posbility: 0.0031
Next Token :  1), Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : ::, Posbility: 0.0005
Next Token : (, Posbility: 0.0085
Next Token : arr, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0022
Next Token :  , Posbility: 0.0099
Next Token : );, Posbility: 0.0162
Next Token : ;, Posbility: 0.0728
Next Token : ), Posbility: 0.8906
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr)
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  (1, Posbility: 0.0039
Next Token :  0, Posbility: 0.0173
Next Token :  1, Posbility: 0.0173
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : (--, Posbility: 0.0003
Next Token : -, Posbility: 0.0007
Next Token : n, Posbility: 0.1816
Next Token : (, Posbility: 0.8164
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : -1, Posbility: 0.0002
Next Token : Array, Posbility: 0.0003
Next Token : -, Posbility: 0.0028
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0027
Next Token : -1, Posbility: 0.0045
Next Token :  –, Posbility: 0.0045
Next Token : -1), Posbility: 0.1172
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : +1), Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : −, Posbility: 0.0036
Next Token : -, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  2), Posbility: 0.0005
Next Token :  1, Posbility: 0.0023
Next Token :  1);, Posbility: 0.0471
Next Token :  1), Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0015
Next Token :  |, Posbility: 0.0017
Next Token :  , Posbility: 0.0181
Next Token :  else, Posbility: 0.1040
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : elif, Posbility: 0.0001
Next Token : |, Posbility: 0.0002
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  do, Posbility: 0.0002
Next Token :   , Posbility: 0.0015
Next Token :  {, Posbility: 0.0036
Next Token : 
, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0493
Next Token : Array, Posbility: 0.0493
Next Token : arr, Posbility: 0.1338
Next Token : swap, Posbility: 0.3652
Next Token : if, Posbility: 0.3652
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  !, Posbility: 0.0010
Next Token :  not, Posbility: 0.0019
Next Token :  0, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Arr, Posbility: 0.0003
Next Token : (, Posbility: 0.0063
Next Token : Array, Posbility: 0.0063
Next Token : n, Posbility: 0.0466
Next Token : arr, Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : [, Posbility: 0.0017
Next Token : [0], Posbility: 0.0022
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1], Posbility: 0.0051
Next Token : (0), Posbility: 0.0291
Next Token : (, Posbility: 0.0374
Next Token : [, Posbility: 0.1670
Next Token : [0], Posbility: 0.7500
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0008
Next Token :  ==, Posbility: 0.0012
Next Token :  =, Posbility: 0.0630
Next Token :  >=, Posbility: 0.4668
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : ≥, Posbility: 0.0036
Next Token : <, Posbility: 0.0085
Next Token : >, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  and, Posbility: 0.0005
Next Token :   , Posbility: 0.0006
Next Token :  &&, Posbility: 0.0041
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0011
Next Token :  {, Posbility: 0.0016
Next Token :  [, Posbility: 0.0021
Next Token : 
, Posbility: 0.0330
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0022
Next Token : Array, Posbility: 0.0162
Next Token : (, Posbility: 0.0439
Next Token : arr, Posbility: 0.0439
Next Token : swap, Posbility: 0.8867
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ped, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_
 score:False
Error type: noerr
---------------------------
Next Token : negative, Posbility: 0.0001
Next Token : positive, Posbility: 0.0001
Next Token : ne, Posbility: 0.0001
Next Token : pos, Posbility: 0.1191
Next Token : neg, Posbility: 0.8789
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg
 score:False
Error type: noerr
---------------------------
Next Token : pos, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_
 score:False
Error type: noerr
---------------------------
Next Token : po, Posbility: 0.0000
Next Token : plus, Posbility: 0.0000
Next Token : positive, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0006
Next Token :  ~, Posbility: 0.0006
Next Token : (, Posbility: 0.0019
Next Token :  ((, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos 
 score:False
Error type: noerr
---------------------------
Next Token : ([], Posbility: 0.0003
Next Token : Array, Posbility: 0.0024
Next Token : ([, Posbility: 0.0040
Next Token : arr, Posbility: 0.0109
Next Token : (, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Arr, Posbility: 0.0011
Next Token : 
, Posbility: 0.0019
Next Token : List, Posbility: 0.0066
Next Token : arr, Posbility: 0.0084
Next Token : Array, Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0262
Next Token : prepend, Posbility: 0.0337
Next Token : insert, Posbility: 0.0918
Next Token : add, Posbility: 0.4102
Next Token : remove, Posbility: 0.4102
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0005
Next Token :  1, Posbility: 0.0007
Next Token : _, Posbility: 0.0137
Next Token :  0, Posbility: 0.0226
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (-1), Posbility: 0.0008
Next Token : -, Posbility: 0.0061
Next Token : n, Posbility: 0.0061
Next Token : (, Posbility: 0.0747
Next Token : arr, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [0]., Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : [0], Posbility: 0.0013
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (0), Posbility: 0.0002
Next Token : [0]), Posbility: 0.0007
Next Token : [, Posbility: 0.0009
Next Token : [1], Posbility: 0.0015
Next Token : [0], Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0003
Next Token :  1, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0004
Next Token :  0, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : []), Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : Array, Posbility: 0.0007
Next Token : (, Posbility: 0.0067
Next Token : arr, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0007
Next Token : ;, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : ., Posbility: 0.0032
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr)
 score:False
Error type: noerr
---------------------------
Next Token :  (1, Posbility: 0.0017
Next Token :  ((, Posbility: 0.0022
Next Token :  1, Posbility: 0.0022
Next Token :  0, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (-1), Posbility: 0.0002
Next Token : (0), Posbility: 0.0008
Next Token : n, Posbility: 0.0293
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 0, Posbility: 0.0004
Next Token : -, Posbility: 0.0007
Next Token : arr, Posbility: 0.0009
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1), Posbility: 0.0003
Next Token : ), Posbility: 0.0007
Next Token : -1), Posbility: 0.0012
Next Token :  +, Posbility: 0.1816
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : −, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : /, Posbility: 0.0001
Next Token : +1), Posbility: 0.0007
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  1);, Posbility: 0.0025
Next Token :  2), Posbility: 0.0025
Next Token :  1), Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0137
Next Token :  ++, Posbility: 0.0226
Next Token :  else, Posbility: 0.0479
Next Token :  , Posbility: 0.1147
Next Token : 
, Posbility: 0.7500
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0013
Next Token : else, Posbility: 0.0015
Next Token : end, Posbility: 0.0065
Next Token :     , Posbility: 0.0084
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  
 score:False
Error type: noerr
---------------------------
Next Token : ++, Posbility: 0.0007
Next Token : @, Posbility: 0.0008
Next Token : [, Posbility: 0.0023
Next Token : |, Posbility: 0.0669
Next Token : else, Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fail, Posbility: 0.0006
Next Token :   , Posbility: 0.0026
Next Token :  {, Posbility: 0.0048
Next Token : 
, Posbility: 0.0664
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0361
Next Token : (, Posbility: 0.0986
Next Token : if, Posbility: 0.2676
Next Token : arr, Posbility: 0.2676
Next Token : swap, Posbility: 0.2676
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : ped, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : ne, Posbility: 0.0000
Next Token : negative, Posbility: 0.0000
Next Token : pos, Posbility: 0.0006
Next Token : neg, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  pos, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_
 score:False
Error type: noerr
---------------------------
Next Token : post, Posbility: 0.0000
Next Token : ps, Posbility: 0.0000
Next Token : positive, Posbility: 0.0000
Next Token : neg, Posbility: 0.0000
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0012
Next Token :  ~, Posbility: 0.0015
Next Token : (, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos 
 score:False
Error type: noerr
---------------------------
Next Token : Arr, Posbility: 0.0003
Next Token : ([, Posbility: 0.0009
Next Token : Array, Posbility: 0.0112
Next Token : arr, Posbility: 0.3711
Next Token : (, Posbility: 0.6133
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : array, Posbility: 0.0018
Next Token : Arr, Posbility: 0.0037
Next Token : List, Posbility: 0.0102
Next Token : arr, Posbility: 0.0586
Next Token : Array, Posbility: 0.9141
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0046
Next Token : insert, Posbility: 0.0142
Next Token : append, Posbility: 0.0233
Next Token : add, Posbility: 0.0300
Next Token : remove, Posbility: 0.8750
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0012
Next Token :  1, Posbility: 0.0086
Next Token : _, Posbility: 0.0386
Next Token :  0, Posbility: 0.1729
Next Token :  , Posbility: 0.7734
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0009
Next Token : (-1), Posbility: 0.0014
Next Token : n, Posbility: 0.0173
Next Token : (, Posbility: 0.0286
Next Token : arr, Posbility: 0.9453
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0001
Next Token : [1], Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : [0], Posbility: 0.0036
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0037
Next Token : [0]), Posbility: 0.0037
Next Token : (0), Posbility: 0.0061
Next Token : [1], Posbility: 0.0742
Next Token : [0], Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0]
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  0), Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  0, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : []), Posbility: 0.0000
Next Token : Array, Posbility: 0.0001
Next Token : (, Posbility: 0.0010
Next Token : arr, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : ),, Posbility: 0.0007
Next Token : );, Posbility: 0.0041
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr)
 score:False
Error type: noerr
---------------------------
Next Token :  0;, Posbility: 0.0012
Next Token :  1, Posbility: 0.0024
Next Token :  ((, Posbility: 0.0031
Next Token :  0, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) 
 score:False
Error type: noerr
---------------------------
Next Token : (0);, Posbility: 0.0002
Next Token : (0), Posbility: 0.0005
Next Token : arr, Posbility: 0.0005
Next Token : n, Posbility: 0.0229
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : swap, Posbility: 0.0007
Next Token : arr, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  -1), Posbility: 0.0004
Next Token : -1), Posbility: 0.0015
Next Token :  +, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -2, Posbility: 0.0000
Next Token : +1), Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : −, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0008
Next Token :  1)), Posbility: 0.0008
Next Token :  2), Posbility: 0.0022
Next Token :  1);, Posbility: 0.1187
Next Token :  1), Posbility: 0.8750
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  >>, Posbility: 0.0080
Next Token :  ++, Posbility: 0.0280
Next Token :  , Posbility: 0.0593
Next Token : 
, Posbility: 0.3867
Next Token : 

, Posbility: 0.4961
---------------------------
code:
 (* Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. *)
let rec swap_neg_pos arr n =
  if n = 0 then arr
  else if arr.[0] < 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else if arr.[0] > 0 then swap_neg_pos (Array.remove arr.[0] arr) (n - 1)
  else swap_neg_pos (Array.remove arr.[0] arr) (n - 1)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :53.51890754699707

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>