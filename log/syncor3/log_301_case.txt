code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  convert, Posbility: 0.0137
Next Token :  binary, Posbility: 0.0137
Next Token :  count, Posbility: 0.1016
Next Token :  , Posbility: 0.3125
Next Token :  rec, Posbility: 0.3555
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0182
Next Token :  convert, Posbility: 0.0265
Next Token :  find, Posbility: 0.0299
Next Token :  count, Posbility: 0.2500
Next Token :  , Posbility: 0.4688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : solve, Posbility: 0.0135
Next Token : f, Posbility: 0.0222
Next Token : helper, Posbility: 0.0366
Next Token : min, Posbility: 0.2109
Next Token : swap, Posbility: 0.3066
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0508
Next Token : (, Posbility: 0.0576
Next Token :  , Posbility: 0.1777
Next Token : s, Posbility: 0.2578
Next Token : _, Posbility: 0.3320
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : bits, Posbility: 0.0243
Next Token : digits, Posbility: 0.0243
Next Token : string, Posbility: 0.0312
Next Token : min, Posbility: 0.0515
Next Token : count, Posbility: 0.3359
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0304
Next Token : (, Posbility: 0.0442
Next Token : _, Posbility: 0.1206
Next Token :  =, Posbility: 0.2246
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : b, Posbility: 0.0325
Next Token : (, Posbility: 0.1445
Next Token : x, Posbility: 0.1641
Next Token : n, Posbility: 0.2109
Next Token : s, Posbility: 0.3066
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0315
Next Token :  i, Posbility: 0.0359
Next Token : 1, Posbility: 0.0859
Next Token :  , Posbility: 0.2334
Next Token :  =, Posbility: 0.4355
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0044
Next Token :  function, Posbility: 0.0082
Next Token :  match, Posbility: 0.0540
Next Token :  , Posbility: 0.0786
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0063
Next Token : 	, Posbility: 0.0104
Next Token :    , Posbility: 0.0118
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0070
Next Token : (, Posbility: 0.0131
Next Token : if, Posbility: 0.2617
Next Token : let, Posbility: 0.2969
Next Token : match, Posbility: 0.3809
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0024
Next Token :  [, Posbility: 0.0034
Next Token :  string, Posbility: 0.0073
Next Token :  String, Posbility: 0.4512
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0280
Next Token : Int, Posbility: 0.0317
Next Token : Char, Posbility: 0.0522
Next Token : List, Posbility: 0.0859
Next Token : s, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0014
Next Token :  , Posbility: 0.0030
Next Token :  =, Posbility: 0.0030
Next Token : ., Posbility: 0.0464
Next Token :  with, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0035
Next Token :  , Posbility: 0.0051
Next Token :  [, Posbility: 0.0065
Next Token :  [], Posbility: 0.0065
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :       , Posbility: 0.0024
Next Token :    , Posbility: 0.0031
Next Token :     , Posbility: 0.1318
Next Token :   , Posbility: 0.8594
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0016
Next Token : [, Posbility: 0.0216
Next Token : ", Posbility: 0.0244
Next Token : [], Posbility: 0.0277
Next Token : |, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "0", Posbility: 0.0527
Next Token :  , Posbility: 0.1118
Next Token :  ", Posbility: 0.1118
Next Token :  [], Posbility: 0.2363
Next Token :  "", Posbility: 0.3906
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | ""
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0086
Next Token :  when, Posbility: 0.0086
Next Token :  =>, Posbility: 0.0161
Next Token :  |, Posbility: 0.0439
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0004
Next Token :  =>, Posbility: 0.0004
Next Token : ::, Posbility: 0.0179
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0354
Next Token :  [], Posbility: 0.0354
Next Token :  , Posbility: 0.0962
Next Token :  1, Posbility: 0.0962
Next Token :  0, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0023
Next Token :   , Posbility: 0.0056
Next Token :  |, Posbility: 0.0119
Next Token :  , Posbility: 0.0153
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0108
Next Token :  "0", Posbility: 0.0229
Next Token :  a, Posbility: 0.0294
Next Token :  ", Posbility: 0.1025
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0141
Next Token : c, Posbility: 0.1338
Next Token : s, Posbility: 0.1514
Next Token : x, Posbility: 0.1719
Next Token : _, Posbility: 0.4121
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0064
Next Token :   , Posbility: 0.0154
Next Token : ::, Posbility: 0.0371
Next Token :  when, Posbility: 0.0610
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0007
Next Token :  =>, Posbility: 0.0018
Next Token : if, Posbility: 0.1289
Next Token : ::, Posbility: 0.2119
Next Token : ->, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0086
Next Token :  match, Posbility: 0.0386
Next Token :  1, Posbility: 0.1729
Next Token :  , Posbility: 0.2852
Next Token : 
, Posbility: 0.4688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0072
Next Token :   , Posbility: 0.0120
Next Token :      , Posbility: 0.0173
Next Token :       , Posbility: 0.3086
Next Token :     , Posbility: 0.6523
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0232
Next Token : (, Posbility: 0.0298
Next Token : if, Posbility: 0.0630
Next Token : match, Posbility: 0.0630
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0221
Next Token :  count, Posbility: 0.0284
Next Token :  len, Posbility: 0.0603
Next Token :  rec, Posbility: 0.0771
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0645
Next Token : x, Posbility: 0.0645
Next Token : c, Posbility: 0.0645
Next Token : n, Posbility: 0.1357
Next Token : s, Posbility: 0.2246
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0593
Next Token : 1,, Posbility: 0.0593
Next Token : 1, Posbility: 0.2070
Next Token : ', Posbility: 0.2070
Next Token :  =, Posbility: 0.2656
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0084
Next Token :  match, Posbility: 0.0084
Next Token : 
, Posbility: 0.0139
Next Token :  String, Posbility: 0.4570
Next Token :  , Posbility: 0.4570
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0189
Next Token : Int, Posbility: 0.0515
Next Token : Char, Posbility: 0.0850
Next Token : List, Posbility: 0.2617
Next Token : s, Posbility: 0.3809
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0173
Next Token :  |, Posbility: 0.0222
Next Token :  , Posbility: 0.0322
Next Token : ., Posbility: 0.2383
Next Token :  in, Posbility: 0.5742
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0007
Next Token :   , Posbility: 0.0015
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0140
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :   , Posbility: 0.0010
Next Token :       , Posbility: 0.0084
Next Token :    , Posbility: 0.0123
Next Token :     , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0334
Next Token : match, Posbility: 0.0806
Next Token : swap, Posbility: 0.0908
Next Token : if, Posbility: 0.1328
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0240
Next Token :  count, Posbility: 0.0240
Next Token :  len, Posbility: 0.0309
Next Token :  rec, Posbility: 0.0654
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0625
Next Token : swap, Posbility: 0.0625
Next Token : x, Posbility: 0.0708
Next Token : n, Posbility: 0.1504
Next Token : s, Posbility: 0.2793
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0483
Next Token : _, Posbility: 0.0620
Next Token : ', Posbility: 0.0796
Next Token : 1, Posbility: 0.1025
Next Token :  =, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0238
Next Token :  string, Posbility: 0.0305
Next Token : 
, Posbility: 0.0503
Next Token :  String, Posbility: 0.1758
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0356
Next Token : if, Posbility: 0.0457
Next Token : Int, Posbility: 0.0588
Next Token : List, Posbility: 0.1807
Next Token : s, Posbility: 0.3828
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0410
Next Token :  with, Posbility: 0.0466
Next Token :  , Posbility: 0.1118
Next Token :  in, Posbility: 0.1631
Next Token : ., Posbility: 0.2363
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0527
Next Token : [0], Posbility: 0.0767
Next Token : [, Posbility: 0.0869
Next Token : (, Posbility: 0.1260
Next Token : [0, Posbility: 0.1836
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ..., Posbility: 0.0025
Next Token :  ..., Posbility: 0.0046
Next Token : :, Posbility: 0.0142
Next Token :  , Posbility: 0.3672
Next Token : ., Posbility: 0.6055
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ], Posbility: 0.0013
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ], Posbility: 0.0967
Next Token : s, Posbility: 0.1094
Next Token : -1], Posbility: 0.1094
Next Token : (, Posbility: 0.1406
Next Token : 1], Posbility: 0.2314
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..1]
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Length, Posbility: 0.0320
Next Token : length, Posbility: 0.0527
Next Token : string, Posbility: 0.0767
Next Token : s, Posbility: 0.1631
Next Token : String, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0012
Next Token : len, Posbility: 0.0015
Next Token : get, Posbility: 0.0019
Next Token : Length, Posbility: 0.0067
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1), Posbility: 0.0005
Next Token : -1), Posbility: 0.0006
Next Token : /, Posbility: 0.0012
Next Token : (, Posbility: 0.2217
Next Token :  , Posbility: 0.7734
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : /, Posbility: 0.0034
Next Token : (, Posbility: 0.0136
Next Token : -, Posbility: 0.0288
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0042
Next Token : ), Posbility: 0.0078
Next Token :  -1), Posbility: 0.0347
Next Token : -1), Posbility: 0.0447
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : âˆ’, Posbility: 0.0002
Next Token : div, Posbility: 0.0005
Next Token : -2, Posbility: 0.0018
Next Token : /, Posbility: 0.0474
Next Token : -, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0002
Next Token :  2), Posbility: 0.0024
Next Token :  1, Posbility: 0.0066
Next Token :  , Posbility: 0.0109
Next Token :  1), Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0005
Next Token :  , Posbility: 0.0065
Next Token : ],, Posbility: 0.0107
Next Token : ];, Posbility: 0.0138
Next Token : ], Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  with, Posbility: 0.0010
Next Token :  |, Posbility: 0.0012
Next Token :  , Posbility: 0.0024
Next Token : 
, Posbility: 0.0052
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 0.0035
Next Token : 

, Posbility: 0.0058
Next Token :  , Posbility: 0.0139
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token :       , Posbility: 0.0019
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0284
Next Token : match, Posbility: 0.0771
Next Token : if, Posbility: 0.0991
Next Token : swap, Posbility: 0.0991
Next Token : let, Posbility: 0.6484
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0112
Next Token :  i, Posbility: 0.0112
Next Token :  count, Posbility: 0.0143
Next Token :  rec, Posbility: 0.0500
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0299
Next Token : c, Posbility: 0.0299
Next Token : n, Posbility: 0.0435
Next Token : swap, Posbility: 0.0493
Next Token : s, Posbility: 0.6797
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0101
Next Token : _, Posbility: 0.0129
Next Token : ', Posbility: 0.0129
Next Token : 1, Posbility: 0.0214
Next Token :  =, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0051
Next Token :  ", Posbility: 0.0137
Next Token : 
, Posbility: 0.0374
Next Token :  String, Posbility: 0.1670
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0076
Next Token : (, Posbility: 0.0182
Next Token : if, Posbility: 0.0182
Next Token : List, Posbility: 0.0299
Next Token : s, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0090
Next Token :  *, Posbility: 0.0116
Next Token :  +, Posbility: 0.0131
Next Token :  in, Posbility: 0.0192
Next Token : ., Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0151
Next Token : split, Posbility: 0.0219
Next Token : (, Posbility: 0.0674
Next Token : [0, Posbility: 0.2080
Next Token : [, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0070
Next Token : 2., Posbility: 0.0147
Next Token : String, Posbility: 0.1797
Next Token : (, Posbility: 0.2305
Next Token : 1., Posbility: 0.5508
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0057
Next Token : -1], Posbility: 0.0422
Next Token : ], Posbility: 0.0894
Next Token : String, Posbility: 0.1895
Next Token : (, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token : s, Posbility: 0.0006
Next Token : (, Posbility: 0.0028
Next Token : String, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : index, Posbility: 0.0002
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0001
Next Token : -1), Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : -, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0022
Next Token :  -1), Posbility: 0.0022
Next Token :  +, Posbility: 0.0059
Next Token : )], Posbility: 0.1177
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : -2, Posbility: 0.0003
Next Token : /, Posbility: 0.0004
Next Token : )], Posbility: 0.0004
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  2), Posbility: 0.0009
Next Token :  1, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  1), Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token : ];, Posbility: 0.0015
Next Token : ],, Posbility: 0.0019
Next Token : ], Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  +, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0007
Next Token : 

, Posbility: 0.0045
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0009
Next Token :       , Posbility: 0.0012
Next Token :    , Posbility: 0.0046
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0293
Next Token : match, Posbility: 0.0703
Next Token : if, Posbility: 0.0796
Next Token : swap, Posbility: 0.1689
Next Token : let, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0084
Next Token :  a, Posbility: 0.0095
Next Token :  count, Posbility: 0.0138
Next Token :  rec, Posbility: 0.0330
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0306
Next Token : c, Posbility: 0.0347
Next Token : n, Posbility: 0.0447
Next Token : swap, Posbility: 0.0571
Next Token : s, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0081
Next Token : 0, Posbility: 0.0081
Next Token : ', Posbility: 0.0104
Next Token : 1, Posbility: 0.0171
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0056
Next Token : 
, Posbility: 0.0151
Next Token :  ", Posbility: 0.0151
Next Token :  String, Posbility: 0.1118
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0039
Next Token : List, Posbility: 0.0092
Next Token : if, Posbility: 0.0092
Next Token : (, Posbility: 0.0105
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0043
Next Token :  *, Posbility: 0.0049
Next Token :  +, Posbility: 0.0081
Next Token :  in, Posbility: 0.0322
Next Token : ., Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [", Posbility: 0.0055
Next Token : (, Posbility: 0.0103
Next Token : [0], Posbility: 0.0278
Next Token : [0, Posbility: 0.3379
Next Token : [, Posbility: 0.5586
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0386
Next Token : String, Posbility: 0.0386
Next Token : (, Posbility: 0.0820
Next Token : 1., Posbility: 0.3672
Next Token : 2., Posbility: 0.4160
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1], Posbility: 0.0009
Next Token : -1], Posbility: 0.0053
Next Token : ], Posbility: 0.0165
Next Token : String, Posbility: 0.0737
Next Token : (, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : 2, Posbility: 0.0007
Next Token : (, Posbility: 0.0013
Next Token : String, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : index, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1), Posbility: 0.0000
Next Token : -1), Posbility: 0.0001
Next Token : )], Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : -, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0009
Next Token :  -1), Posbility: 0.0014
Next Token :  +, Posbility: 0.0023
Next Token : )], Posbility: 0.0471
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token : -2, Posbility: 0.0002
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0001
Next Token :  1, Posbility: 0.0025
Next Token :  , Posbility: 0.0025
Next Token :  2), Posbility: 0.0025
Next Token :  1), Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0001
Next Token : ],, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ];, Posbility: 0.0006
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  ..., Posbility: 0.0007
Next Token : 

, Posbility: 0.0046
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0013
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0219
Next Token : if, Posbility: 0.0525
Next Token : match, Posbility: 0.0525
Next Token : swap, Posbility: 0.0981
Next Token : let, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0030
Next Token :  a, Posbility: 0.0044
Next Token :  count, Posbility: 0.0049
Next Token :  rec, Posbility: 0.0118
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0101
Next Token : c, Posbility: 0.0101
Next Token : n, Posbility: 0.0166
Next Token : swap, Posbility: 0.0166
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0017
Next Token : _, Posbility: 0.0019
Next Token : 0, Posbility: 0.0022
Next Token : 1, Posbility: 0.0040
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0013
Next Token :  ", Posbility: 0.0031
Next Token : 
, Posbility: 0.0035
Next Token :  String, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0005
Next Token : List, Posbility: 0.0007
Next Token : if, Posbility: 0.0013
Next Token : (, Posbility: 0.0019
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : [0, Posbility: 0.0004
Next Token :  +, Posbility: 0.0007
Next Token :  in, Posbility: 0.0076
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0022
Next Token : [", Posbility: 0.0022
Next Token : [0], Posbility: 0.0060
Next Token : [0, Posbility: 0.3691
Next Token : [, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0018
Next Token : ., Posbility: 0.0033
Next Token : 2., Posbility: 0.0131
Next Token : 1., Posbility: 0.2637
Next Token : 3, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ..., Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1], Posbility: 0.0004
Next Token : -1], Posbility: 0.0027
Next Token : ], Posbility: 0.0045
Next Token : String, Posbility: 0.0139
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : index, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : -, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0004
Next Token :  +, Posbility: 0.0005
Next Token :  -1), Posbility: 0.0015
Next Token : )], Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -2, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0001
Next Token :  1, Posbility: 0.0009
Next Token :  2), Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0004
Next Token :  , Posbility: 0.0025
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0012
Next Token :   , Posbility: 0.0015
Next Token :    , Posbility: 0.0046
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0193
Next Token : if, Posbility: 0.0317
Next Token : match, Posbility: 0.0408
Next Token : swap, Posbility: 0.0525
Next Token : let, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0021
Next Token :  a, Posbility: 0.0031
Next Token :  count, Posbility: 0.0039
Next Token :  rec, Posbility: 0.0073
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0081
Next Token : c, Posbility: 0.0081
Next Token : n, Posbility: 0.0104
Next Token : swap, Posbility: 0.0133
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0010
Next Token : _, Posbility: 0.0013
Next Token : 0, Posbility: 0.0017
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0006
Next Token :  ", Posbility: 0.0017
Next Token : 
, Posbility: 0.0022
Next Token :  String, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0003
Next Token : List, Posbility: 0.0004
Next Token : if, Posbility: 0.0007
Next Token : (, Posbility: 0.0012
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : [0, Posbility: 0.0003
Next Token :  +, Posbility: 0.0003
Next Token :  in, Posbility: 0.0036
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0], Posbility: 0.0007
Next Token : [", Posbility: 0.0014
Next Token : (, Posbility: 0.0018
Next Token : [0, Posbility: 0.1465
Next Token : [, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0013
Next Token : 3, Posbility: 0.0051
Next Token : 2., Posbility: 0.0058
Next Token : 1., Posbility: 0.0085
Next Token : 4, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0008
Next Token : ], Posbility: 0.0052
Next Token : String, Posbility: 0.0096
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0003
Next Token :  +, Posbility: 0.0004
Next Token :  -1), Posbility: 0.0009
Next Token : )], Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  2), Posbility: 0.0003
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0008
Next Token :   , Posbility: 0.0012
Next Token :    , Posbility: 0.0036
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0197
Next Token : if, Posbility: 0.0286
Next Token : match, Posbility: 0.0366
Next Token : swap, Posbility: 0.0471
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0019
Next Token :  a, Posbility: 0.0031
Next Token :  count, Posbility: 0.0031
Next Token :  rec, Posbility: 0.0057
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0064
Next Token : c, Posbility: 0.0064
Next Token : n, Posbility: 0.0082
Next Token : swap, Posbility: 0.0082
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0007
Next Token : _, Posbility: 0.0009
Next Token : 0, Posbility: 0.0013
Next Token : 1, Posbility: 0.0022
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  ", Posbility: 0.0010
Next Token : 
, Posbility: 0.0013
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : if, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 0.0019
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0003
Next Token : [", Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : [0, Posbility: 0.0330
Next Token : [, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0021
Next Token : 2., Posbility: 0.0045
Next Token : 1., Posbility: 0.0084
Next Token : 3, Posbility: 0.0095
Next Token : 5, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1], Posbility: 0.0001
Next Token : -1], Posbility: 0.0008
Next Token : ], Posbility: 0.0031
Next Token : String, Posbility: 0.0085
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : string, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  -1), Posbility: 0.0006
Next Token : )], Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  2), Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0144
Next Token : (, Posbility: 0.0164
Next Token : match, Posbility: 0.0237
Next Token : swap, Posbility: 0.0305
Next Token : let, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0013
Next Token :  a, Posbility: 0.0019
Next Token :  count, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0035
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0031
Next Token : x, Posbility: 0.0040
Next Token : n, Posbility: 0.0051
Next Token : swap, Posbility: 0.0051
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : 0, Posbility: 0.0008
Next Token : 1, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ", Posbility: 0.0006
Next Token : 
, Posbility: 0.0008
Next Token :  String, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  in, Posbility: 0.0010
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0001
Next Token : [6], Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : [0, Posbility: 0.0229
Next Token : [, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0007
Next Token : 4, Posbility: 0.0008
Next Token : 2., Posbility: 0.0009
Next Token : 1., Posbility: 0.0012
Next Token : 6, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0005
Next Token : ], Posbility: 0.0052
Next Token : String, Posbility: 0.0096
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  -1), Posbility: 0.0006
Next Token : )], Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0115
Next Token : (, Posbility: 0.0147
Next Token : match, Posbility: 0.0167
Next Token : swap, Posbility: 0.0243
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0008
Next Token :  a, Posbility: 0.0013
Next Token :  count, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0022
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0031
Next Token : c, Posbility: 0.0031
Next Token : swap, Posbility: 0.0040
Next Token : n, Posbility: 0.0051
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : 0, Posbility: 0.0006
Next Token : 1, Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token :  String, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  in, Posbility: 0.0006
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [", Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : [7], Posbility: 0.0004
Next Token : [0, Posbility: 0.0229
Next Token : [, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0004
Next Token : 3, Posbility: 0.0005
Next Token : 6, Posbility: 0.0008
Next Token : 1., Posbility: 0.0022
Next Token : 7, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0002
Next Token : -1], Posbility: 0.0010
Next Token : ], Posbility: 0.0045
Next Token : String, Posbility: 0.0096
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  -1), Posbility: 0.0008
Next Token : )], Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0036
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0160
Next Token : (, Posbility: 0.0205
Next Token : match, Posbility: 0.0232
Next Token : swap, Posbility: 0.0383
Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0017
Next Token :  a, Posbility: 0.0027
Next Token :  count, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0045
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0039
Next Token : c, Posbility: 0.0051
Next Token : n, Posbility: 0.0065
Next Token : swap, Posbility: 0.0065
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : _, Posbility: 0.0006
Next Token : 0, Posbility: 0.0010
Next Token : 1, Posbility: 0.0017
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0003
Next Token :  ", Posbility: 0.0010
Next Token : 
, Posbility: 0.0012
Next Token :  String, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 0.0013
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [8], Posbility: 0.0002
Next Token : [", Posbility: 0.0002
Next Token : (, Posbility: 0.0013
Next Token : [0, Posbility: 0.0292
Next Token : [, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0003
Next Token : 2., Posbility: 0.0004
Next Token : 7, Posbility: 0.0007
Next Token : 1., Posbility: 0.0015
Next Token : 8, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0008
Next Token : ], Posbility: 0.0031
Next Token : String, Posbility: 0.0075
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  -1), Posbility: 0.0006
Next Token : )], Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0036
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0143
Next Token : (, Posbility: 0.0208
Next Token : match, Posbility: 0.0208
Next Token : swap, Posbility: 0.0342
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0017
Next Token :  a, Posbility: 0.0024
Next Token :  count, Posbility: 0.0024
Next Token :  rec, Posbility: 0.0035
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0031
Next Token : c, Posbility: 0.0040
Next Token : swap, Posbility: 0.0051
Next Token : n, Posbility: 0.0065
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : 0, Posbility: 0.0008
Next Token : 1, Posbility: 0.0015
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  ", Posbility: 0.0008
Next Token : 
, Posbility: 0.0009
Next Token :  String, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  in, Posbility: 0.0008
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [1:, Posbility: 0.0003
Next Token : [9], Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : [0, Posbility: 0.0124
Next Token : [, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 7, Posbility: 0.0004
Next Token : 2., Posbility: 0.0004
Next Token : 8, Posbility: 0.0010
Next Token : 1., Posbility: 0.0017
Next Token : 9, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0005
Next Token : -1], Posbility: 0.0019
Next Token : ], Posbility: 0.0035
Next Token : String, Posbility: 0.0157
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : index, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  -1), Posbility: 0.0012
Next Token : )], Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0001
Next Token :  2), Posbility: 0.0001
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ];, Posbility: 0.0002
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0097
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0007
Next Token :   , Posbility: 0.0010
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0270
Next Token : if, Posbility: 0.0347
Next Token : match, Posbility: 0.0393
Next Token : swap, Posbility: 0.0649
Next Token : let, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0027
Next Token :  a, Posbility: 0.0039
Next Token :  count, Posbility: 0.0050
Next Token :  rec, Posbility: 0.0064
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0081
Next Token : c, Posbility: 0.0081
Next Token : swap, Posbility: 0.0104
Next Token : n, Posbility: 0.0133
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0008
Next Token : _, Posbility: 0.0010
Next Token : 0, Posbility: 0.0015
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token : 
, Posbility: 0.0024
Next Token :  ", Posbility: 0.0028
Next Token :  String, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : swap, Posbility: 0.0003
Next Token : List, Posbility: 0.0004
Next Token : if, Posbility: 0.0008
Next Token : (, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0002
Next Token : [0, Posbility: 0.0003
Next Token :  +, Posbility: 0.0004
Next Token :  in, Posbility: 0.0028
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [10,, Posbility: 0.0025
Next Token : [!, Posbility: 0.0036
Next Token : [10], Posbility: 0.0077
Next Token : [0, Posbility: 0.0830
Next Token : [, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0015
Next Token : 9, Posbility: 0.0015
Next Token : a, Posbility: 0.0035
Next Token : 1., Posbility: 0.0084
Next Token : 10, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : ..., Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0005
Next Token : ], Posbility: 0.0024
Next Token : String, Posbility: 0.0085
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  -1), Posbility: 0.0009
Next Token : )], Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : -10, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ];, Posbility: 0.0003
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0032
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0131
Next Token : match, Posbility: 0.0131
Next Token : (, Posbility: 0.0148
Next Token : swap, Posbility: 0.0243
Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0008
Next Token :  a, Posbility: 0.0012
Next Token :  count, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0021
Next Token : c, Posbility: 0.0021
Next Token : swap, Posbility: 0.0040
Next Token : n, Posbility: 0.0051
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : 0, Posbility: 0.0005
Next Token : 1, Posbility: 0.0009
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0006
Next Token : 
, Posbility: 0.0007
Next Token :  String, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : swap, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [", Posbility: 0.0002
Next Token : [11], Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : [0, Posbility: 0.0110
Next Token : [, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 12, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : 10, Posbility: 0.0012
Next Token : 1., Posbility: 0.0017
Next Token : 11, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0002
Next Token : ], Posbility: 0.0010
Next Token : String, Posbility: 0.0036
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  -1), Posbility: 0.0003
Next Token : )], Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -10, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :       , Posbility: 0.0003
Next Token :    , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0081
Next Token : match, Posbility: 0.0092
Next Token : (, Posbility: 0.0118
Next Token : swap, Posbility: 0.0172
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  count, Posbility: 0.0005
Next Token :  a, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : c, Posbility: 0.0010
Next Token : swap, Posbility: 0.0019
Next Token : n, Posbility: 0.0025
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [12], Posbility: 0.0004
Next Token : [0, Posbility: 0.0036
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0002
Next Token : 10, Posbility: 0.0002
Next Token : 11, Posbility: 0.0002
Next Token : 1., Posbility: 0.0002
Next Token : 12, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0006
Next Token : String, Posbility: 0.0017
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0002
Next Token : )], Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0000
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0057
Next Token : match, Posbility: 0.0057
Next Token : (, Posbility: 0.0093
Next Token : swap, Posbility: 0.0136
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  count, Posbility: 0.0004
Next Token :  a, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0009
Next Token : c, Posbility: 0.0009
Next Token : swap, Posbility: 0.0017
Next Token : n, Posbility: 0.0025
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [13], Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : [0, Posbility: 0.0041
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : 10, Posbility: 0.0003
Next Token : 12, Posbility: 0.0003
Next Token : 14, Posbility: 0.0005
Next Token : 13, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0003
Next Token : String, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0002
Next Token :  -1), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0027
Next Token : match, Posbility: 0.0031
Next Token : (, Posbility: 0.0058
Next Token : swap, Posbility: 0.0066
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0004
Next Token : c, Posbility: 0.0005
Next Token : swap, Posbility: 0.0008
Next Token : n, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [", Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [14], Posbility: 0.0007
Next Token : [0, Posbility: 0.0025
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 4, Posbility: 0.0001
Next Token : 15, Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token : 13, Posbility: 0.0001
Next Token : 14, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0003
Next Token : String, Posbility: 0.0009
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0024
Next Token : match, Posbility: 0.0031
Next Token : swap, Posbility: 0.0051
Next Token : (, Posbility: 0.0058
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : c, Posbility: 0.0003
Next Token : swap, Posbility: 0.0005
Next Token : n, Posbility: 0.0009
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [14], Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [15], Posbility: 0.0001
Next Token : [0, Posbility: 0.0008
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 17, Posbility: 0.0000
Next Token : 16, Posbility: 0.0001
Next Token : 14, Posbility: 0.0001
Next Token : 15, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0001
Next Token : -1], Posbility: 0.0001
Next Token : ], Posbility: 0.0008
Next Token : String, Posbility: 0.0028
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Math, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0002
Next Token :  -1), Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : âˆ’, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0099
Next Token : match, Posbility: 0.0128
Next Token : (, Posbility: 0.0238
Next Token : swap, Posbility: 0.0347
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0008
Next Token :  a, Posbility: 0.0010
Next Token :  count, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0019
Next Token : x, Posbility: 0.0021
Next Token : swap, Posbility: 0.0040
Next Token : n, Posbility: 0.0051
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ", Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  String, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : swap, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token :  in, Posbility: 0.0005
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [", Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : [16], Posbility: 0.0007
Next Token : [0, Posbility: 0.0124
Next Token : [, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 8, Posbility: 0.0001
Next Token : 1., Posbility: 0.0002
Next Token : 15, Posbility: 0.0003
Next Token : 17, Posbility: 0.0006
Next Token : 16, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0001
Next Token : ], Posbility: 0.0008
Next Token : String, Posbility: 0.0012
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]", Posbility: 0.0000
Next Token : ][, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :       , Posbility: 0.0002
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0072
Next Token : match, Posbility: 0.0072
Next Token : (, Posbility: 0.0135
Next Token : swap, Posbility: 0.0153
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : c, Posbility: 0.0008
Next Token : swap, Posbility: 0.0017
Next Token : n, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : [!, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [0, Posbility: 0.0028
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 20, Posbility: 0.0000
Next Token : 16, Posbility: 0.0001
Next Token : 18, Posbility: 0.0001
Next Token : 1., Posbility: 0.0001
Next Token : 17, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17.
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : String, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  1)), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0019
Next Token : match, Posbility: 0.0024
Next Token : swap, Posbility: 0.0040
Next Token : (, Posbility: 0.0066
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : c, Posbility: 0.0003
Next Token : swap, Posbility: 0.0005
Next Token : n, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : swap, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.
 score:False
Error type: noerr
---------------------------
Next Token : [", Posbility: 0.0000
Next Token : to, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : [0, Posbility: 0.0010
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: noerr
---------------------------
Next Token : 20, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 19, Posbility: 0.0001
Next Token : 17, Posbility: 0.0001
Next Token : 18, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18
 score:False
Error type: noerr
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18.
 score:False
Error type: noerr
---------------------------
Next Token : 2., Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..
 score:False
Error type: noerr
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : String, Posbility: 0.0004
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(
 score:False
Error type: noerr
---------------------------
Next Token : Math, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.
 score:False
Error type: noerr
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length
 score:False
Error type: noerr
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s 
 score:False
Error type: noerr
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s -
 score:False
Error type: noerr
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  1)), Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)
 score:False
Error type: noerr
---------------------------
Next Token : ][, Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)]
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0008
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0022
Next Token : match, Posbility: 0.0022
Next Token : swap, Posbility: 0.0040
Next Token : (, Posbility: 0.0058
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : swap, Posbility: 0.0005
Next Token : n, Posbility: 0.0009
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token : [31, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [0, Posbility: 0.0010
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: noerr
---------------------------
Next Token : 39, Posbility: 0.0000
Next Token : 1., Posbility: 0.0000
Next Token : 20, Posbility: 0.0001
Next Token : 18, Posbility: 0.0001
Next Token : 19, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19
 score:False
Error type: noerr
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19.
 score:False
Error type: noerr
---------------------------
Next Token : ã€‚, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..
 score:False
Error type: noerr
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0001
Next Token : ], Posbility: 0.0004
Next Token : String, Posbility: 0.0019
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.
 score:False
Error type: noerr
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length
 score:False
Error type: noerr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s
 score:False
Error type: noerr
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0002
Next Token :  -1), Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s 
 score:False
Error type: noerr
---------------------------
Next Token : âˆ’, Posbility: 0.0000
Next Token : -1), Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s -
 score:False
Error type: noerr
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)
 score:False
Error type: noerr
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)]
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0028
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0071
Next Token : if, Posbility: 0.0091
Next Token : (, Posbility: 0.0170
Next Token : swap, Posbility: 0.0219
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0010
Next Token : c, Posbility: 0.0010
Next Token : swap, Posbility: 0.0022
Next Token : n, Posbility: 0.0036
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  "", Posbility: 0.0001
Next Token :  ", Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.
 score:False
Error type: noerr
---------------------------
Next Token : [2:, Posbility: 0.0001
Next Token : [!, Posbility: 0.0003
Next Token : [0, Posbility: 0.0013
Next Token : [20], Posbility: 0.0229
Next Token : [, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: noerr
---------------------------
Next Token : 30, Posbility: 0.0001
Next Token : 2., Posbility: 0.0001
Next Token : 10, Posbility: 0.0001
Next Token : 1., Posbility: 0.0003
Next Token : 20, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20
 score:False
Error type: noerr
---------------------------
Next Token : ], Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20.
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..
 score:False
Error type: noerr
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0003
Next Token : String, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(
 score:False
Error type: noerr
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token : Math, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.
 score:False
Error type: noerr
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length
 score:False
Error type: noerr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s
 score:False
Error type: noerr
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s 
 score:False
Error type: noerr
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s -
 score:False
Error type: noerr
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1)), Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)
 score:False
Error type: noerr
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0001
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)]
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0045
Next Token : match, Posbility: 0.0045
Next Token : swap, Posbility: 0.0095
Next Token : (, Posbility: 0.0107
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  res, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : c, Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : swap, Posbility: 0.0013
Next Token : n, Posbility: 0.0019
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : swap, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.
 score:False
Error type: noerr
---------------------------
Next Token : [!, Posbility: 0.0000
Next Token : [31, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : [0, Posbility: 0.0013
Next Token : [, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: noerr
---------------------------
Next Token : 23, Posbility: 0.0000
Next Token : 20, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 1., Posbility: 0.0002
Next Token : 21, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21.
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ã€‚, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..
 score:False
Error type: noerr
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : String, Posbility: 0.0006
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(
 score:False
Error type: noerr
---------------------------
Next Token : Math, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.
 score:False
Error type: noerr
---------------------------
Next Token : é•¿åº¦, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : strlen, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length
 score:False
Error type: noerr
---------------------------
Next Token : )], Posbility: 0.0000
Next Token :  -1), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s
 score:False
Error type: noerr
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : )], Posbility: 0.0001
Next Token :  -1), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s 
 score:False
Error type: noerr
---------------------------
Next Token : -1), Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : )], Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s -
 score:False
Error type: noerr
---------------------------
Next Token :  2), Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1)), Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)
 score:False
Error type: noerr
---------------------------
Next Token : ]., Posbility: 0.0000
Next Token : ]", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ];, Posbility: 0.0000
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)]
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0017
Next Token : match, Posbility: 0.0017
Next Token : swap, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : swap, Posbility: 0.0004
Next Token : n, Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.
 score:False
Error type: noerr
---------------------------
Next Token : [31, Posbility: 0.0000
Next Token : [2:, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [0, Posbility: 0.0002
Next Token : [, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[
 score:False
Error type: noerr
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 23, Posbility: 0.0001
Next Token : 21, Posbility: 0.0001
Next Token : 22, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ]., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22.
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ã€‚, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : ], Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22..
 score:False
Error type: noerr
---------------------------
Next Token : (-1), Posbility: 0.0000
Next Token : -1], Posbility: 0.0000
Next Token : ], Posbility: 0.0001
Next Token : String, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22..(
 score:False
Error type: noerr
---------------------------
Next Token : Math, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token : string, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22..(String
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count minimum number of swaps required to convert one binary number represented as a string to another. *)
let rec swap_count s =
  match s with
  | "" -> 0
  | _ ->
    let s = s in
    let s = s.[0..(String.length s - 1)] in
    let s = s.[1..(String.length s - 1)] in
    let s = s.[2..(String.length s - 1)] in
    let s = s.[3..(String.length s - 1)] in
    let s = s.[4..(String.length s - 1)] in
    let s = s.[5..(String.length s - 1)] in
    let s = s.[6..(String.length s - 1)] in
    let s = s.[7..(String.length s - 1)] in
    let s = s.[8..(String.length s - 1)] in
    let s = s.[9..(String.length s - 1)] in
    let s = s.[10..(String.length s - 1)] in
    let s = s.[11..(String.length s - 1)] in
    let s = s.[12..(String.length s - 1)] in
    let s = s.[13..(String.length s - 1)] in
    let s = s.[14..(String.length s - 1)] in
    let s = s.[15..(String.length s - 1)] in
    let s = s.[16..(String.length s - 1)] in
    let s = s.[17..(String.length s - 1)] in
    let s = s.[18..(String.length s - 1)] in
    let s = s.[19..(String.length s - 1)] in
    let s = s.[20..(String.length s - 1)] in
    let s = s.[21..(String.length s - 1)] in
    let s = s.[22..(String.
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>