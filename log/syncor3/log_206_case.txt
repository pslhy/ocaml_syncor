code:
 (* Write a function to find common first element in given list of tuple. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0135
Next Token :  first, Posbility: 0.0684
Next Token :  find, Posbility: 0.0684
Next Token :  , Posbility: 0.2393
Next Token :  rec, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0166
Next Token :  is, Posbility: 0.0188
Next Token :  first, Posbility: 0.0510
Next Token :  find, Posbility: 0.2930
Next Token :  , Posbility: 0.4277
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0203
Next Token : fold, Posbility: 0.0229
Next Token : helper, Posbility: 0.0229
Next Token : f, Posbility: 0.0801
Next Token : common, Posbility: 0.4082
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0086
Next Token : 1, Posbility: 0.0160
Next Token :  =, Posbility: 0.0559
Next Token :  , Posbility: 0.1045
Next Token : _, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0242
Next Token : head, Posbility: 0.0310
Next Token : elem, Posbility: 0.0398
Next Token : element, Posbility: 0.1387
Next Token : first, Posbility: 0.4844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0178
Next Token :  el, Posbility: 0.0178
Next Token :  , Posbility: 0.1689
Next Token :  =, Posbility: 0.2793
Next Token : _, Posbility: 0.4590
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0195
Next Token : tuple, Posbility: 0.0284
Next Token : elt, Posbility: 0.0532
Next Token : elem, Posbility: 0.0684
Next Token : element, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0240
Next Token :  l, Posbility: 0.0654
Next Token : _, Posbility: 0.1377
Next Token :  =, Posbility: 0.1377
Next Token :  , Posbility: 0.4824
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0364
Next Token : :, Posbility: 0.0469
Next Token : (, Posbility: 0.1631
Next Token : lst, Posbility: 0.1631
Next Token : x, Posbility: 0.2100
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0039
Next Token :  l, Posbility: 0.0050
Next Token :  =, Posbility: 0.1455
Next Token :  , Posbility: 0.1650
Next Token : s, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0028
Next Token :  acc, Posbility: 0.0028
Next Token :  a, Posbility: 0.0036
Next Token :  , Posbility: 0.0820
Next Token :  =, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0045
Next Token :  function, Posbility: 0.0178
Next Token :  match, Posbility: 0.0483
Next Token :  , Posbility: 0.0620
Next Token : 
, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0054
Next Token : 	, Posbility: 0.0101
Next Token :    , Posbility: 0.0114
Next Token :     , Posbility: 0.1572
Next Token :   , Posbility: 0.8008
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0060
Next Token : List, Posbility: 0.0187
Next Token : if, Posbility: 0.1216
Next Token : let, Posbility: 0.2002
Next Token : match, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0011
Next Token :  !, Posbility: 0.0017
Next Token :  String, Posbility: 0.0095
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0046
Next Token : (, Posbility: 0.0098
Next Token : Seq, Posbility: 0.0098
Next Token : List, Posbility: 0.1738
Next Token : x, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  with, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  @, Posbility: 0.0009
Next Token : 
, Posbility: 0.0009
Next Token : ., Posbility: 0.0009
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token :  , Posbility: 0.0055
Next Token :  [, Posbility: 0.0070
Next Token :  [], Posbility: 0.0588
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0015
Next Token :    , Posbility: 0.0020
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : [, Posbility: 0.0250
Next Token : [], Posbility: 0.0322
Next Token : |, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0017
Next Token :  nil, Posbility: 0.0061
Next Token :  , Posbility: 0.0352
Next Token :  [, Posbility: 0.0452
Next Token :  [], Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0039
Next Token :    , Posbility: 0.0050
Next Token :  =>, Posbility: 0.0106
Next Token :  |, Posbility: 0.0106
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0002
Next Token : ::, Posbility: 0.0022
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  error, Posbility: 0.0977
Next Token :  fail, Posbility: 0.0977
Next Token :  [], Posbility: 0.1611
Next Token :  , Posbility: 0.2656
Next Token :  None, Posbility: 0.2656
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0013
Next Token :   , Posbility: 0.0024
Next Token :  |, Posbility: 0.0058
Next Token :  , Posbility: 0.0074
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [{, Posbility: 0.0047
Next Token :  a, Posbility: 0.0054
Next Token :  [], Posbility: 0.0114
Next Token :  [, Posbility: 0.3320
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0293
Next Token : hd, Posbility: 0.0483
Next Token : _, Posbility: 0.1914
Next Token : (, Posbility: 0.2168
Next Token : x, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0052
Next Token : :, Posbility: 0.0182
Next Token : s, Posbility: 0.0233
Next Token : ::, Posbility: 0.2500
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : if, Posbility: 0.0011
Next Token : :, Posbility: 0.0021
Next Token : ->, Posbility: 0.0420
Next Token : ::, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0012
Next Token :  others, Posbility: 0.0012
Next Token :  [], Posbility: 0.0088
Next Token :  rest, Posbility: 0.0830
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0182
Next Token : tail, Posbility: 0.0182
Next Token : y, Posbility: 0.0264
Next Token : _, Posbility: 0.1338
Next Token : x, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : x, Posbility: 0.0009
Next Token : _, Posbility: 0.0012
Next Token : ', Posbility: 0.0040
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0364
Next Token : _, Posbility: 0.0466
Next Token : 1, Posbility: 0.0601
Next Token : ', Posbility: 0.0679
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : if, Posbility: 0.0032
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0092
Next Token :  match, Posbility: 0.0413
Next Token :  , Posbility: 0.2373
Next Token : 
, Posbility: 0.3047
Next Token :  Some, Posbility: 0.3906
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0016
Next Token :  {, Posbility: 0.0020
Next Token :  ((, Posbility: 0.0029
Next Token : (, Posbility: 0.0752
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0004
Next Token : ([, Posbility: 0.0004
Next Token : <, Posbility: 0.0011
Next Token : (, Posbility: 0.2676
Next Token : x, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0053
Next Token :  |, Posbility: 0.0112
Next Token :  , Posbility: 0.0645
Next Token : 

, Posbility: 0.4199
Next Token : 
, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0126
Next Token : (, Posbility: 0.0283
Next Token : ;, Posbility: 0.0364
Next Token :   , Posbility: 0.1738
Next Token : let, Posbility: 0.5039
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0286
Next Token :  find, Posbility: 0.0535
Next Token :  main, Posbility: 0.0684
Next Token :  , Posbility: 0.1641
Next Token :  rec, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0187
Next Token :  first, Posbility: 0.0211
Next Token :  rec, Posbility: 0.0271
Next Token :  find, Posbility: 0.1377
Next Token :  , Posbility: 0.5469
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0096
Next Token : core, Posbility: 0.0096
Next Token : split, Posbility: 0.0140
Next Token : helper, Posbility: 0.0204
Next Token : common, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0008
Next Token : (, Posbility: 0.0013
Next Token :  =, Posbility: 0.0022
Next Token :  , Posbility: 0.0096
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0057
Next Token : last, Posbility: 0.0095
Next Token : rest, Posbility: 0.0095
Next Token : element, Posbility: 0.0256
Next Token : first, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0004
Next Token : (, Posbility: 0.0010
Next Token :  =, Posbility: 0.0031
Next Token :  , Posbility: 0.0109
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0031
Next Token : list, Posbility: 0.0076
Next Token : tuple, Posbility: 0.0160
Next Token : elements, Posbility: 0.0339
Next Token : element, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0111
Next Token : 2, Posbility: 0.0386
Next Token : ', Posbility: 0.0928
Next Token :  , Posbility: 0.1191
Next Token : _, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0469
Next Token : list, Posbility: 0.0532
Next Token : aux, Posbility: 0.0603
Next Token : rec, Posbility: 0.0879
Next Token : opt, Posbility: 0.0996
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0025
Next Token : 
, Posbility: 0.0037
Next Token :  =, Posbility: 0.0309
Next Token : _, Posbility: 0.0396
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0006
Next Token : :, Posbility: 0.0007
Next Token : lst, Posbility: 0.0010
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 0.0009
Next Token :  , Posbility: 0.0052
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  Some, Posbility: 0.0012
Next Token :  match, Posbility: 0.0131
Next Token :  , Posbility: 0.0664
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token : let, Posbility: 0.0010
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.0075
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0140
Next Token : try, Posbility: 0.0179
Next Token : common, Posbility: 0.0806
Next Token : let, Posbility: 0.1035
Next Token : match, Posbility: 0.7656
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  find, Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0009
Next Token : common, Posbility: 0.0474
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token :  None, Posbility: 0.0066
Next Token :  [], Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  =>, Posbility: 0.0017
Next Token :  |, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  none, Posbility: 0.0024
Next Token :  Some, Posbility: 0.0065
Next Token :  , Posbility: 0.0178
Next Token :  None, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0006
Next Token : _, Posbility: 0.0012
Next Token :  |, Posbility: 0.0017
Next Token :  , Posbility: 0.0025
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0012
Next Token :  [], Posbility: 0.0022
Next Token :  [, Posbility: 0.0052
Next Token :  Some, Posbility: 0.0059
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0003
Next Token : head, Posbility: 0.0011
Next Token : (, Posbility: 0.0084
Next Token : _, Posbility: 0.0139
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token : s, Posbility: 0.0024
Next Token : ::, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0002
Next Token : :, Posbility: 0.0004
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  rest, Posbility: 0.0008
Next Token :  [], Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : tail, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0097
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  =>, Posbility: 0.0010
Next Token :  when, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : if, Posbility: 0.0007
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0021
Next Token :  match, Posbility: 0.0058
Next Token : 
, Posbility: 0.0156
Next Token :  , Posbility: 0.1157
Next Token :  Some, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0006
Next Token : _, Posbility: 0.0007
Next Token :  Some, Posbility: 0.0012
Next Token : (, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : common, Posbility: 0.0014
Next Token : (, Posbility: 0.0757
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0014
Next Token :  |, Posbility: 0.0017
Next Token :  , Posbility: 0.0078
Next Token : 

, Posbility: 0.4277
Next Token : 
, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0238
Next Token : 

, Posbility: 0.0270
Next Token :   , Posbility: 0.0347
Next Token : (, Posbility: 0.0830
Next Token : let, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0111
Next Token :  find, Posbility: 0.0111
Next Token :  main, Posbility: 0.0266
Next Token :  , Posbility: 0.1191
Next Token :  rec, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0136
Next Token :  first, Posbility: 0.0136
Next Token :  rec, Posbility: 0.0175
Next Token :  find, Posbility: 0.0610
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0040
Next Token : tail, Posbility: 0.0040
Next Token : f, Posbility: 0.0045
Next Token : map, Posbility: 0.0051
Next Token : common, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : First, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0024
Next Token : second, Posbility: 0.0024
Next Token : last, Posbility: 0.0065
Next Token : element, Posbility: 0.0065
Next Token : first, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token :  =, Posbility: 0.0017
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0014
Next Token : elem, Posbility: 0.0019
Next Token : tuple, Posbility: 0.0024
Next Token : elements, Posbility: 0.0107
Next Token : element, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0030
Next Token : ', Posbility: 0.0039
Next Token : 2, Posbility: 0.0072
Next Token :  , Posbility: 0.0287
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0258
Next Token : rec, Posbility: 0.0425
Next Token : iter, Posbility: 0.0425
Next Token : list, Posbility: 0.1152
Next Token : opt, Posbility: 0.3555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0141
Next Token :  , Posbility: 0.0630
Next Token : ', Posbility: 0.1338
Next Token : 2, Posbility: 0.1514
Next Token : _, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0239
Next Token : list, Posbility: 0.0505
Next Token : rec, Posbility: 0.0505
Next Token : ex, Posbility: 0.1069
Next Token : opt, Posbility: 0.1562
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0067
Next Token : 
, Posbility: 0.0076
Next Token :  =, Posbility: 0.0339
Next Token : _, Posbility: 0.0383
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : lst, Posbility: 0.0003
Next Token : f, Posbility: 0.0022
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0013
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : s, Posbility: 0.0005
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 0.0052
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0003
Next Token :  function, Posbility: 0.0004
Next Token :  match, Posbility: 0.0066
Next Token :  , Posbility: 0.0085
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token :    , Posbility: 0.0007
Next Token : let, Posbility: 0.0009
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0069
Next Token : if, Posbility: 0.0089
Next Token : common, Posbility: 0.0129
Next Token : let, Posbility: 0.0576
Next Token : match, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : List, Posbility: 0.0005
Next Token : (, Posbility: 0.0015
Next Token : common, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0002
Next Token :  None, Posbility: 0.0009
Next Token :  [, Posbility: 0.0040
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  =>, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token :  [], Posbility: 0.0024
Next Token :  Some, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  None, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0003
Next Token : ,, Posbility: 0.0004
Next Token :  |, Posbility: 0.0010
Next Token :  , Posbility: 0.0036
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0040
Next Token :  [], Posbility: 0.0051
Next Token :  [, Posbility: 0.0084
Next Token :  Some, Posbility: 0.0107
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0004
Next Token : (), Posbility: 0.0006
Next Token : _, Posbility: 0.0096
Next Token : (, Posbility: 0.0109
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token :  |, Posbility: 0.0004
Next Token : s, Posbility: 0.0028
Next Token : ::, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0002
Next Token : :, Posbility: 0.0005
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0004
Next Token :  rest, Posbility: 0.0004
Next Token :  [, Posbility: 0.0006
Next Token :  [], Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0097
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0004
Next Token :  =>, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  when, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : if, Posbility: 0.0005
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0021
Next Token : 
, Posbility: 0.0154
Next Token :  match, Posbility: 0.0154
Next Token :  , Posbility: 0.1143
Next Token :  Some, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0017
Next Token :  [, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token :  Some, Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : common, Posbility: 0.0005
Next Token : (, Posbility: 0.0601
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0016
Next Token :  |, Posbility: 0.0023
Next Token :  , Posbility: 0.0102
Next Token : 

, Posbility: 0.3379
Next Token : 
, Posbility: 0.6328
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0259
Next Token : and, Posbility: 0.0259
Next Token : 

, Posbility: 0.0276
Next Token : (, Posbility: 0.1318
Next Token : let, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0028
Next Token :  test, Posbility: 0.0032
Next Token :  main, Posbility: 0.0067
Next Token :  , Posbility: 0.0815
Next Token :  rec, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  first, Posbility: 0.0058
Next Token :  is, Posbility: 0.0084
Next Token :  rec, Posbility: 0.0084
Next Token :  find, Posbility: 0.0259
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0020
Next Token : opt, Posbility: 0.0023
Next Token : f, Posbility: 0.0029
Next Token : map, Posbility: 0.0033
Next Token : common, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : First, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0009
Next Token : second, Posbility: 0.0009
Next Token : last, Posbility: 0.0040
Next Token : element, Posbility: 0.0040
Next Token : first, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0011
Next Token : elem, Posbility: 0.0015
Next Token : first, Posbility: 0.0019
Next Token : elements, Posbility: 0.0066
Next Token : element, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token : ', Posbility: 0.0007
Next Token : 2, Posbility: 0.0031
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0129
Next Token : iter, Posbility: 0.0146
Next Token : rec, Posbility: 0.0188
Next Token : list, Posbility: 0.0742
Next Token : opt, Posbility: 0.6211
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0020
Next Token : s, Posbility: 0.0029
Next Token : 2, Posbility: 0.0312
Next Token :  , Posbility: 0.0354
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0148
Next Token : rec, Posbility: 0.0167
Next Token : none, Posbility: 0.0276
Next Token : list, Posbility: 0.0850
Next Token : opt, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0132
Next Token : ', Posbility: 0.0171
Next Token :  , Posbility: 0.1113
Next Token : 2, Posbility: 0.1836
Next Token : _, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : aux, Posbility: 0.0175
Next Token : rec, Posbility: 0.0288
Next Token : ex, Posbility: 0.0371
Next Token : list, Posbility: 0.0420
Next Token : opt, Posbility: 0.3984
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0030
Next Token : 
, Posbility: 0.0043
Next Token : _, Posbility: 0.0171
Next Token :  =, Posbility: 0.0282
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : f, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : s, Posbility: 0.0004
Next Token :  , Posbility: 0.0067
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0025
Next Token :  match, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0004
Next Token : let, Posbility: 0.0005
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0005
Next Token : if, Posbility: 0.0012
Next Token : common, Posbility: 0.0022
Next Token : let, Posbility: 0.0096
Next Token : match, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : common, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0015
Next Token :  , Posbility: 0.0041
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  Some, Posbility: 0.0009
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0006
Next Token :  Some, Posbility: 0.0012
Next Token :  [], Posbility: 0.0015
Next Token :  [, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : (), Posbility: 0.0004
Next Token : _, Posbility: 0.0052
Next Token : (, Posbility: 0.0059
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : 1, Posbility: 0.0006
Next Token : s, Posbility: 0.0009
Next Token : ::, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0002
Next Token :  None, Posbility: 0.0003
Next Token :  [, Posbility: 0.0005
Next Token :  [], Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0052
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  when, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0005
Next Token : 
, Posbility: 0.0015
Next Token :  match, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token :  Some, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token : , Posbility: 0.0021
Next Token : 

, Posbility: 0.3184
Next Token : 
, Posbility: 0.6719
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0255
Next Token : and, Posbility: 0.0255
Next Token : module, Posbility: 0.0396
Next Token : (, Posbility: 0.1465
Next Token : let, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0012
Next Token :  test, Posbility: 0.0023
Next Token :  main, Posbility: 0.0026
Next Token :  , Posbility: 0.0586
Next Token :  rec, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0037
Next Token :  rec, Posbility: 0.0047
Next Token :  is, Posbility: 0.0060
Next Token :  find, Posbility: 0.0145
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0016
Next Token : opt, Posbility: 0.0018
Next Token : map, Posbility: 0.0023
Next Token : f, Posbility: 0.0026
Next Token : common, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : First, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0009
Next Token : second, Posbility: 0.0011
Next Token : last, Posbility: 0.0031
Next Token : element, Posbility: 0.0031
Next Token : first, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0010
Next Token : elem, Posbility: 0.0015
Next Token : first, Posbility: 0.0019
Next Token : elements, Posbility: 0.0040
Next Token : element, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0068
Next Token : iter, Posbility: 0.0077
Next Token : rec, Posbility: 0.0143
Next Token : list, Posbility: 0.0304
Next Token : opt, Posbility: 0.7812
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0006
Next Token : s, Posbility: 0.0011
Next Token : 2, Posbility: 0.0045
Next Token :  , Posbility: 0.0096
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0041
Next Token : some, Posbility: 0.0059
Next Token : none, Posbility: 0.0098
Next Token : list, Posbility: 0.0206
Next Token : opt, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token :  =, Posbility: 0.0019
Next Token : 2, Posbility: 0.0031
Next Token :  , Posbility: 0.0330
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0025
Next Token : some, Posbility: 0.0054
Next Token : list, Posbility: 0.0114
Next Token : none, Posbility: 0.0147
Next Token : opt, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token :  =, Posbility: 0.0042
Next Token : 2, Posbility: 0.0188
Next Token :  , Posbility: 0.0579
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0031
Next Token : aux, Posbility: 0.0031
Next Token : list, Posbility: 0.0109
Next Token : none, Posbility: 0.0124
Next Token : opt, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0027
Next Token : _, Posbility: 0.0058
Next Token :  =, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0017
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token :  match, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : common, Posbility: 0.0009
Next Token : let, Posbility: 0.0025
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : end, Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : _, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token : , Posbility: 0.0022
Next Token : 

, Posbility: 0.3184
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : and, Posbility: 0.0156
Next Token : 

, Posbility: 0.0166
Next Token : module, Posbility: 0.0352
Next Token : (, Posbility: 0.1475
Next Token : let, Posbility: 0.6211
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0007
Next Token :  test, Posbility: 0.0016
Next Token :  main, Posbility: 0.0020
Next Token :  , Posbility: 0.0525
Next Token :  rec, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0026
Next Token :  compare, Posbility: 0.0026
Next Token :  is, Posbility: 0.0034
Next Token :  find, Posbility: 0.0071
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0011
Next Token : opt, Posbility: 0.0013
Next Token : map, Posbility: 0.0014
Next Token : f, Posbility: 0.0027
Next Token : common, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : First, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0005
Next Token : second, Posbility: 0.0009
Next Token : last, Posbility: 0.0022
Next Token : element, Posbility: 0.0024
Next Token : first, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0005
Next Token : elem, Posbility: 0.0010
Next Token : first, Posbility: 0.0019
Next Token : elements, Posbility: 0.0025
Next Token : element, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0057
Next Token : option, Posbility: 0.0073
Next Token : rec, Posbility: 0.0083
Next Token : list, Posbility: 0.0176
Next Token : opt, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 0.0005
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0019
Next Token : optional, Posbility: 0.0031
Next Token : none, Posbility: 0.0031
Next Token : list, Posbility: 0.0039
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0003
Next Token : list, Posbility: 0.0008
Next Token : none, Posbility: 0.0009
Next Token : optional, Posbility: 0.0013
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0004
Next Token : optional, Posbility: 0.0008
Next Token : list, Posbility: 0.0009
Next Token : none, Posbility: 0.0013
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : 2, Posbility: 0.0036
Next Token :  =, Posbility: 0.0087
Next Token :  , Posbility: 0.0938
Next Token : _, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0013
Next Token : some, Posbility: 0.0013
Next Token : list, Posbility: 0.0039
Next Token : none, Posbility: 0.0039
Next Token : opt, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0024
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token :  match, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : common, Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 0.0001
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : end, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0011
Next Token : , Posbility: 0.0020
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0109
Next Token : and, Posbility: 0.0132
Next Token : module, Posbility: 0.0297
Next Token : (, Posbility: 0.1035
Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0007
Next Token :  test, Posbility: 0.0012
Next Token :  main, Posbility: 0.0023
Next Token :  , Posbility: 0.0525
Next Token :  rec, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0016
Next Token :  is, Posbility: 0.0018
Next Token :  compare, Posbility: 0.0018
Next Token :  find, Posbility: 0.0044
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0011
Next Token : helper, Posbility: 0.0011
Next Token : _, Posbility: 0.0013
Next Token : f, Posbility: 0.0027
Next Token : common, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : First, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0004
Next Token : second, Posbility: 0.0007
Next Token : last, Posbility: 0.0017
Next Token : element, Posbility: 0.0019
Next Token : first, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0004
Next Token : elem, Posbility: 0.0010
Next Token : elements, Posbility: 0.0022
Next Token : first, Posbility: 0.0028
Next Token : element, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0042
Next Token : option, Posbility: 0.0053
Next Token : optional, Posbility: 0.0053
Next Token : list, Posbility: 0.0099
Next Token : opt, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0007
Next Token : none, Posbility: 0.0013
Next Token : list, Posbility: 0.0015
Next Token : optional, Posbility: 0.0019
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0002
Next Token : list, Posbility: 0.0003
Next Token : none, Posbility: 0.0004
Next Token : optional, Posbility: 0.0010
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0006
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : none, Posbility: 0.0002
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : 2, Posbility: 0.0007
Next Token :  =, Posbility: 0.0039
Next Token :  , Posbility: 0.0471
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0003
Next Token : list, Posbility: 0.0005
Next Token : none, Posbility: 0.0005
Next Token : optional, Posbility: 0.0009
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : common, Posbility: 0.0004
Next Token : let, Posbility: 0.0004
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : end, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  rest, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : , Posbility: 0.0017
Next Token : 

, Posbility: 0.2217
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0078
Next Token : and, Posbility: 0.0093
Next Token : module, Posbility: 0.0186
Next Token : (, Posbility: 0.0889
Next Token : let, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0007
Next Token :  test, Posbility: 0.0009
Next Token :  main, Posbility: 0.0023
Next Token :  , Posbility: 0.0469
Next Token :  rec, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0013
Next Token :  is, Posbility: 0.0014
Next Token :  compare, Posbility: 0.0016
Next Token :  find, Posbility: 0.0031
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0005
Next Token : map, Posbility: 0.0008
Next Token : _, Posbility: 0.0010
Next Token : f, Posbility: 0.0017
Next Token : common, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : First, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0003
Next Token : second, Posbility: 0.0004
Next Token : last, Posbility: 0.0009
Next Token : element, Posbility: 0.0013
Next Token : first, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0003
Next Token : elem, Posbility: 0.0008
Next Token : elements, Posbility: 0.0019
Next Token : first, Posbility: 0.0028
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0033
Next Token : option, Posbility: 0.0043
Next Token : optional, Posbility: 0.0043
Next Token : list, Posbility: 0.0070
Next Token : opt, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0004
Next Token : list, Posbility: 0.0006
Next Token : none, Posbility: 0.0007
Next Token : optional, Posbility: 0.0010
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0006
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : var, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0005
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  =, Posbility: 0.0034
Next Token :  , Posbility: 0.0471
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0002
Next Token : none, Posbility: 0.0002
Next Token : op, Posbility: 0.0003
Next Token : optional, Posbility: 0.0007
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.0075
Next Token :  =, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  match, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Common, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token : common, Posbility: 0.0003
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : end, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0014
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0051
Next Token : and, Posbility: 0.0084
Next Token : module, Posbility: 0.0129
Next Token : (, Posbility: 0.0698
Next Token : let, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0006
Next Token :  test, Posbility: 0.0008
Next Token :  main, Posbility: 0.0021
Next Token :  , Posbility: 0.0469
Next Token :  rec, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0010
Next Token :  iter, Posbility: 0.0010
Next Token :  compare, Posbility: 0.0013
Next Token :  find, Posbility: 0.0019
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0005
Next Token : map, Posbility: 0.0006
Next Token : _, Posbility: 0.0010
Next Token : f, Posbility: 0.0013
Next Token : common, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : First, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0002
Next Token : second, Posbility: 0.0004
Next Token : last, Posbility: 0.0006
Next Token : element, Posbility: 0.0012
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  element, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0002
Next Token : elem, Posbility: 0.0006
Next Token : elements, Posbility: 0.0012
Next Token : first, Posbility: 0.0028
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0018
Next Token : optional, Posbility: 0.0038
Next Token : option, Posbility: 0.0044
Next Token : list, Posbility: 0.0056
Next Token : opt, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0003
Next Token : none, Posbility: 0.0005
Next Token : list, Posbility: 0.0006
Next Token : optional, Posbility: 0.0010
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0037
Next Token :  , Posbility: 0.0947
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : option, Posbility: 0.0001
Next Token : none, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token :  match, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Common, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : common, Posbility: 0.0003
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  rest, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0012
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0039
Next Token : and, Posbility: 0.0068
Next Token : module, Posbility: 0.0120
Next Token : (, Posbility: 0.0444
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0006
Next Token :  acc, Posbility: 0.0006
Next Token :  main, Posbility: 0.0018
Next Token :  , Posbility: 0.0369
Next Token :  rec, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0005
Next Token :  iter, Posbility: 0.0007
Next Token :  compare, Posbility: 0.0008
Next Token :  find, Posbility: 0.0010
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : map, Posbility: 0.0004
Next Token : _, Posbility: 0.0008
Next Token : f, Posbility: 0.0009
Next Token : common, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : First, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: noerr
---------------------------
Next Token : head, Posbility: 0.0002
Next Token : second, Posbility: 0.0003
Next Token : last, Posbility: 0.0005
Next Token : element, Posbility: 0.0007
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  element, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0001
Next Token : elem, Posbility: 0.0003
Next Token : elements, Posbility: 0.0007
Next Token : first, Posbility: 0.0022
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0014
Next Token : option, Posbility: 0.0039
Next Token : optional, Posbility: 0.0039
Next Token : list, Posbility: 0.0044
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0004
Next Token : none, Posbility: 0.0004
Next Token : list, Posbility: 0.0007
Next Token : optional, Posbility: 0.0009
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0001
Next Token : option, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0040
Next Token : _, Posbility: 0.0058
Next Token :  =, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : Common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : common, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  some, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : , Posbility: 0.0011
Next Token : 

, Posbility: 0.1641
Next Token : 
, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0033
Next Token : and, Posbility: 0.0074
Next Token : module, Posbility: 0.0079
Next Token : (, Posbility: 0.0398
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0004
Next Token :  acc, Posbility: 0.0005
Next Token :  main, Posbility: 0.0014
Next Token :  , Posbility: 0.0291
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  merge, Posbility: 0.0005
Next Token :  iter, Posbility: 0.0005
Next Token :  compare, Posbility: 0.0007
Next Token :  find, Posbility: 0.0009
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : com, Posbility: 0.0003
Next Token : combine, Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token : f, Posbility: 0.0009
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : First, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: noerr
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : second, Posbility: 0.0002
Next Token : last, Posbility: 0.0004
Next Token : element, Posbility: 0.0006
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  element, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0001
Next Token : elem, Posbility: 0.0003
Next Token : elements, Posbility: 0.0005
Next Token : first, Posbility: 0.0017
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0013
Next Token : option, Posbility: 0.0031
Next Token : list, Posbility: 0.0031
Next Token : optional, Posbility: 0.0031
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0003
Next Token : none, Posbility: 0.0003
Next Token : list, Posbility: 0.0004
Next Token : optional, Posbility: 0.0007
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : o, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0066
Next Token : 
, Posbility: 0.0074
Next Token :  =, Posbility: 0.0108
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : \, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
 score:False
Error type: noerr
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
 score:False
Error type: noerr
---------------------------
Next Token : Common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : common, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : common, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  False, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  Some, Posbility: 0.0000
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : X, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  some, Posbility: 0.0000
Next Token :  None, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : , Posbility: 0.0012
Next Token : 

, Posbility: 0.1191
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0040
Next Token : and, Posbility: 0.0058
Next Token : module, Posbility: 0.0070
Next Token : (, Posbility: 0.0315
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0003
Next Token :  acc, Posbility: 0.0004
Next Token :  main, Posbility: 0.0014
Next Token :  , Posbility: 0.0291
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token :  iter, Posbility: 0.0004
Next Token :  find, Posbility: 0.0005
Next Token :  compare, Posbility: 0.0005
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : com, Posbility: 0.0003
Next Token : combine, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : f, Posbility: 0.0007
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
 score:False
Error type: noerr
---------------------------
Next Token :  first, Posbility: 0.0000
Next Token : First, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
 score:False
Error type: noerr
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : second, Posbility: 0.0002
Next Token : last, Posbility: 0.0003
Next Token : element, Posbility: 0.0004
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
 score:False
Error type: noerr
---------------------------
Next Token :  element, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0001
Next Token : elem, Posbility: 0.0003
Next Token : elements, Posbility: 0.0006
Next Token : first, Posbility: 0.0013
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0011
Next Token : list, Posbility: 0.0027
Next Token : optional, Posbility: 0.0027
Next Token : option, Posbility: 0.0031
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0002
Next Token : list, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0006
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>